/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 08 11:56:04 GMT 2022
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.MillisDurationField;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateTimeZone_ESTest extends DateTimeZone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      try { 
        DateTimeZone.forOffsetHoursMinutes(1, (-32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Positive hours must not have negative minutes: -32
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      Set<String> set0 = uTCProvider0.getAvailableIDs();
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      Set<String> set1 = uTCProvider0.getAvailableIDs();
      assertNotNull(set1);
      assertEquals(1, set1.size());
      assertFalse(set1.isEmpty());
      assertNotSame(set1, set0);
      assertTrue(set1.equals((Object)set0));
      
      DateTimeZone.setProvider(uTCProvider0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      DateTimeUtils.setCurrentMillisSystem();
      String string0 = dateTimeZone0.getName(106109248L);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      String string1 = dateTimeZone0.getID();
      assertEquals("UTC", string1);
      assertNotNull(string1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertFalse(string1.equals((Object)string0));
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(662);
      assertNotNull(dateTimeZone1);
      assertEquals("+00:00:00.662", dateTimeZone1.getID());
      assertEquals("+00:00:00.662", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      
      boolean boolean1 = dateTimeZone1.isStandardOffset((-2752832L));
      assertTrue(boolean1);
      assertEquals("+00:00:00.662", dateTimeZone1.getID());
      assertEquals("+00:00:00.662", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("America/Anchorage");
      assertNotNull(dateTimeZone0);
      assertEquals("America/Anchorage", dateTimeZone0.toString());
      assertEquals("America/Anchorage", dateTimeZone0.getID());
      
      long long0 = 0L;
      long long1 = dateTimeZone0.previousTransition(0L);
      assertEquals((-5749200001L), long1);
      assertEquals("America/Anchorage", dateTimeZone0.toString());
      assertEquals("America/Anchorage", dateTimeZone0.getID());
      assertFalse(long1 == long0);
      
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("America/Anchorage", dateTimeZone0.toString());
      assertEquals("America/Anchorage", dateTimeZone0.getID());
      
      long long2 = dateTimeZone0.adjustOffset((-5749200001L), true);
      assertEquals((-5745600001L), long2);
      assertEquals("America/Anchorage", dateTimeZone0.toString());
      assertEquals("America/Anchorage", dateTimeZone0.getID());
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      DateTimeUtils.setCurrentMillisFixed((-5749200001L));
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("America/Anchorage", dateTimeZone0.toString());
      assertEquals("America/Anchorage", dateTimeZone0.getID());
      assertEquals("America/Anchorage", timeZone0.getID());
      
      TimeZone timeZone1 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone1);
      assertEquals("America/Anchorage", dateTimeZone0.toString());
      assertEquals("America/Anchorage", dateTimeZone0.getID());
      assertEquals("America/Anchorage", timeZone1.getID());
      assertNotSame(timeZone1, timeZone0);
      assertTrue(timeZone1.equals((Object)timeZone0));
      
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertNotNull(set0);
      assertEquals(578, set0.size());
      assertFalse(set0.isEmpty());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1254, "America/Los_Angeles");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.getMillisKeepLocal(fixedDateTimeZone0, 1254);
      assertEquals((-28798746L), long0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      
      boolean boolean1 = dateTimeZone0.isStandardOffset(365L);
      assertTrue(boolean1);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertFalse(boolean1 == boolean0);
      
      DateTimeZone.setDefault(dateTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      
      boolean boolean2 = fixedDateTimeZone0.isStandardOffset(9223372036854775807L);
      assertTrue(boolean2);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Locale locale0 = new Locale("America/Los_Angeles");
      assertNotNull(locale0);
      assertEquals("america/los_angeles", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string0 = dateTimeZone0.getName(365L, locale0);
      assertEquals("-08:00", string0);
      assertNotNull(string0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("america/los_angeles", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("-08:00");
      assertNotNull(dateTimeZone1);
      assertEquals("-08:00", dateTimeZone1.toString());
      assertEquals("-08:00", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertNotSame(dateTimeZone1, fixedDateTimeZone0);
      assertFalse(dateTimeZone1.equals((Object)fixedDateTimeZone0));
      
      String string1 = fixedDateTimeZone0.getShortName(365L);
      assertEquals("+00:00", string1);
      assertNotNull(string1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotSame(fixedDateTimeZone0, dateTimeZone1);
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = fixedDateTimeZone0.getShortName((-727L), locale0);
      assertEquals("+00:00", string2);
      assertNotNull(string2);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("america/los_angeles", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotSame(fixedDateTimeZone0, dateTimeZone1);
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = dateTimeZone0.getOffsetFromLocal(259200000L);
      assertEquals((-28800000), int0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID("America/Anchorage");
      assertNotNull(cachedDateTimeZone0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      
      long long0 = cachedDateTimeZone0.previousTransition(0L);
      assertEquals((-5749200001L), long0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      DateTimeZone.setDefault(cachedDateTimeZone0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      
      long long1 = cachedDateTimeZone0.convertLocalToUTC((-5749200001L), true);
      assertEquals((-5713200001L), long1);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertFalse(long1 == long0);
      
      DateTimeUtils.setCurrentMillisFixed((-5749200001L));
      Object object1 = ((DateTimeZone)cachedDateTimeZone0).writeReplace();
      assertNotNull(object1);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertFalse(object1.equals((Object)object0));
      
      ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", zoneInfo0.getID());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      TimeZone timeZone0 = fixedDateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", timeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals(0, timeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertFalse(timeZone0.useDaylightTime());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", timeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals(0, timeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertSame(fixedDateTimeZone0, dateTimeZone0);
      assertSame(dateTimeZone0, fixedDateTimeZone0);
      
      long long0 = fixedDateTimeZone0.convertUTCToLocal(838L);
      assertEquals(838L, long0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertSame(fixedDateTimeZone0, dateTimeZone0);
      
      boolean boolean0 = fixedDateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertSame(fixedDateTimeZone0, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes(578, 578);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 578
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis((-1911));
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-00:00:01.911", fixedDateTimeZone0.getID());
      assertEquals("-00:00:01.911", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      String string0 = fixedDateTimeZone0.getID();
      assertEquals("-00:00:01.911", string0);
      assertNotNull(string0);
      assertEquals("-00:00:01.911", fixedDateTimeZone0.getID());
      assertEquals("-00:00:01.911", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      assertNotNull(defaultNameProvider0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      Locale.setDefault(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      String string1 = defaultNameProvider0.getName(locale0, "-00:00:01.911", "\"7|-a]qw@AbX pp=G");
      assertNull(string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      
      DateTimeZone.setNameProvider(defaultNameProvider0);
      Object object0 = fixedDateTimeZone0.UTC.writeReplace();
      assertNotNull(object0);
      assertEquals("-00:00:01.911", fixedDateTimeZone0.getID());
      assertEquals("-00:00:01.911", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID("America/New_York");
      assertNotNull(cachedDateTimeZone0);
      assertEquals("America/New_York", cachedDateTimeZone0.toString());
      assertEquals("America/New_York", cachedDateTimeZone0.getID());
      
      int int0 = cachedDateTimeZone0.getOffset(9223372036854775807L);
      assertEquals((-14400000), int0);
      assertEquals("America/New_York", cachedDateTimeZone0.toString());
      assertEquals("America/New_York", cachedDateTimeZone0.getID());
      
      Object object1 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertNotNull(object1);
      assertEquals("-00:00:01.911", fixedDateTimeZone0.getID());
      assertEquals("-00:00:01.911", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
      assertFalse(boolean0);
      assertEquals("-00:00:01.911", fixedDateTimeZone0.getID());
      assertEquals("-00:00:01.911", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      boolean boolean1 = fixedDateTimeZone0.isFixed();
      assertTrue(boolean1);
      assertEquals("-00:00:01.911", fixedDateTimeZone0.getID());
      assertEquals("-00:00:01.911", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        cachedDateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(578, set0.size());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1254, "America/Los_Angeles");
      assertNotNull(simpleTimeZone0);
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertNotNull(object0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      boolean boolean0 = fixedDateTimeZone0.equals(fixedDateTimeZone0);
      assertTrue(boolean0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      long long0 = dateTimeZone0.getMillisKeepLocal(fixedDateTimeZone0, 1254);
      assertEquals((-28798746L), long0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      boolean boolean1 = dateTimeZone0.isStandardOffset(365L);
      assertTrue(boolean1);
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertTrue(boolean1 == boolean0);
      
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      
      boolean boolean2 = fixedDateTimeZone0.isStandardOffset(9223372036854775807L);
      assertTrue(boolean2);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Locale locale0 = new Locale("America/Los_Angeles");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("america/los_angeles", locale0.getLanguage());
      
      String string0 = dateTimeZone0.getName(365L, locale0);
      assertEquals("-08:00", string0);
      assertNotNull(string0);
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("america/los_angeles", locale0.getLanguage());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("-08:00");
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("-08:00", dateTimeZone1.getID());
      assertEquals("-08:00", dateTimeZone1.toString());
      assertNotSame(dateTimeZone1, fixedDateTimeZone0);
      assertFalse(dateTimeZone1.equals((Object)fixedDateTimeZone0));
      
      String string1 = fixedDateTimeZone0.getShortName(365L);
      assertEquals("+00:00", string1);
      assertNotNull(string1);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotSame(fixedDateTimeZone0, dateTimeZone1);
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = fixedDateTimeZone0.getShortName((-727L), locale0);
      assertEquals("+00:00", string2);
      assertNotNull(string2);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("america/los_angeles", locale0.getLanguage());
      assertNotSame(fixedDateTimeZone0, dateTimeZone1);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(86399999);
      assertNotNull(dateTimeZone0);
      assertEquals("+23:59:59.999", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+23:59:59.999", dateTimeZone0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      Locale.setDefault(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      long long0 = dateTimeZone0.UTC.previousTransition((-2395L));
      assertEquals((-2395L), long0);
      assertEquals("+23:59:59.999", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+23:59:59.999", dateTimeZone0.getID());
      
      String string0 = dateTimeZone0.getShortName((long) 86399999, locale0);
      assertEquals("+23:59:59.999", string0);
      assertNotNull(string0);
      assertEquals("+23:59:59.999", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+23:59:59.999", dateTimeZone0.getID());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      dateTimeZone0.hashCode();
      assertEquals("+23:59:59.999", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+23:59:59.999", dateTimeZone0.getID());
      
      long long1 = dateTimeZone0.adjustOffset((-618L), true);
      assertEquals((-618L), long1);
      assertEquals("+23:59:59.999", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+23:59:59.999", dateTimeZone0.getID());
      assertFalse(long1 == long0);
      
      try { 
        DateTimeZone.forOffsetHours(86399999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 86399999
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-86399999));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:59:59.999", dateTimeZone0.toString());
      assertEquals("-23:59:59.999", dateTimeZone0.getID());
      
      String string0 = dateTimeZone0.getNameKey(0L);
      assertNull(string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:59:59.999", dateTimeZone0.toString());
      assertEquals("-23:59:59.999", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(gJChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      
      long long0 = dateTimeZone0.UTC.convertUTCToLocal(0L);
      assertEquals(0L, long0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      
      boolean boolean0 = dateTimeZone1.UTC.equals(buddhistChronology0);
      assertFalse(boolean0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      
      int int0 = dateTimeZone1.getStandardOffset((-628L));
      assertEquals(0, int0);
      assertEquals(1, BuddhistChronology.BE);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis(292271022);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 292271022
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      long long0 = 0L;
      DateTimeUtils.setCurrentMillisOffset(0L);
      Locale locale0 = null;
      String string0 = dateTimeZone0.getName(2115L, (Locale) null);
      assertEquals("+09:00", string0);
      assertNotNull(string0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        DateTimeZone.forID("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'org/joda/time/tz/data' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis((-1105517526));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: -1105517526
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateTimeZone.forID("Ka'su;8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'Ka'su;8' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(23);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+23:00", fixedDateTimeZone0.toString());
      assertEquals("+23:00", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology0);
      
      CopticChronology copticChronology1 = (CopticChronology)copticChronology0.withZone(fixedDateTimeZone0);
      assertEquals(1, CopticChronology.AM);
      assertEquals(1, CopticChronology.AM);
      assertNotNull(copticChronology1);
      assertEquals("+23:00", fixedDateTimeZone0.toString());
      assertEquals("+23:00", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotSame(copticChronology0, copticChronology1);
      assertNotSame(copticChronology1, copticChronology0);
      assertFalse(copticChronology1.equals((Object)copticChronology0));
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(23, 23, 23, 23, 23, 23, 23, copticChronology1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 23 for monthOfYear must be in the range [1,13]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-209));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.209", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.209", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffsetFromLocal((-209));
      assertEquals((-209), int0);
      assertEquals("-00:00:00.209", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.209", dateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("-00:00:00.209", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.209", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertNotNull(dateTimeZone1);
      assertEquals("-00:00:00.209", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.209", dateTimeZone0.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("-00:00:00.209", dateTimeZone1.toString());
      assertEquals("-00:00:00.209", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      
      boolean boolean0 = dateTimeZone1.isFixed();
      assertTrue(boolean0);
      assertEquals("-00:00:00.209", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.209", dateTimeZone0.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("-00:00:00.209", dateTimeZone1.toString());
      assertEquals("-00:00:00.209", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      
      int int1 = dateTimeZone0.hashCode();
      assertEquals("-00:00:00.209", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.209", dateTimeZone0.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(int1 == int0);
      
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      assertNotNull(defaultNameProvider0);
      
      int int2 = dateTimeZone0.getOffsetFromLocal(100000000000000000L);
      assertEquals((-209), int2);
      assertEquals("-00:00:00.209", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.209", dateTimeZone0.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertTrue(int2 == int0);
      
      DateTimeZone.setNameProvider(defaultNameProvider0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Asia/Seoul", cachedDateTimeZone0.toString());
      assertEquals("Asia/Seoul", cachedDateTimeZone0.getID());
      
      Object object0 = ((DateTimeZone)cachedDateTimeZone0).writeReplace();
      assertNotNull(object0);
      assertEquals("Asia/Seoul", cachedDateTimeZone0.toString());
      assertEquals("Asia/Seoul", cachedDateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertLocalToUTC((long) (-209), false);
      assertEquals(0L, long0);
      assertEquals("-00:00:00.209", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-00:00:00.209", dateTimeZone0.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      
      CachedDateTimeZone cachedDateTimeZone1 = (CachedDateTimeZone)DateTimeZone.forID("America/Chicago");
      assertNotNull(cachedDateTimeZone1);
      assertEquals("America/Chicago", cachedDateTimeZone1.toString());
      assertEquals("America/Chicago", cachedDateTimeZone1.getID());
      assertNotSame(cachedDateTimeZone1, cachedDateTimeZone0);
      assertFalse(cachedDateTimeZone1.equals((Object)cachedDateTimeZone0));
      
      CachedDateTimeZone cachedDateTimeZone2 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone2);
      assertEquals("Asia/Seoul", cachedDateTimeZone2.toString());
      assertEquals("Asia/Seoul", cachedDateTimeZone2.getID());
      assertNotSame(cachedDateTimeZone2, cachedDateTimeZone1);
      assertSame(cachedDateTimeZone2, cachedDateTimeZone0);
      assertFalse(cachedDateTimeZone2.equals((Object)cachedDateTimeZone1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      
      String string0 = dateTimeZone0.getNameKey(31083663600000L);
      assertEquals("KST", string0);
      assertNotNull(string0);
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.convertLocalToUTC(2524L, false);
      assertEquals((-32397476L), long0);
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      String string0 = dateTimeZone0.getName(0L);
      assertEquals("+09:00", string0);
      assertNotNull(string0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffset(0L);
      assertEquals(32400000, int0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      boolean boolean0 = dateTimeZone0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
      
      DateTimeZone.setProvider(provider0);
      int int1 = dateTimeZone0.getOffset(0L);
      assertEquals(32400000, int1);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertTrue(int1 == int0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID("+09:00");
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+09:00", fixedDateTimeZone0.getID());
      assertEquals("+09:00", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      assertNotNull(defaultNameProvider0);
      
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertNotNull(object0);
      assertEquals("+09:00", fixedDateTimeZone0.getID());
      assertEquals("+09:00", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      String string1 = defaultNameProvider0.getShortName((Locale) null, (String) null, "+09:00");
      assertNull(string1);
      
      DateTimeZone.setNameProvider(defaultNameProvider0);
      long long0 = dateTimeZone0.convertLocalToUTC((long) 32400000, false, 0L);
      assertEquals(0L, long0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      boolean boolean1 = fixedDateTimeZone0.isFixed();
      assertTrue(boolean1);
      assertEquals("+09:00", fixedDateTimeZone0.getID());
      assertEquals("+09:00", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertFalse(boolean1 == boolean0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID("+09:00");
      assertNotNull(fixedDateTimeZone1);
      assertEquals("+09:00", fixedDateTimeZone1.toString());
      assertTrue(fixedDateTimeZone1.isFixed());
      assertEquals("+09:00", fixedDateTimeZone1.getID());
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      assertNotNull(localDateTime0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(1);
      assertNotNull(localDateTime1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      
      LocalDateTime localDateTime2 = localDateTime1.minusDays(1);
      assertNotNull(localDateTime2);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      
      LocalDateTime localDateTime3 = localDateTime2.minusMonths(1);
      assertNotNull(localDateTime3);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime2.size());
      assertEquals(4, localDateTime3.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertNotSame(localDateTime2, localDateTime3);
      assertNotSame(localDateTime2, localDateTime1);
      assertNotSame(localDateTime2, localDateTime0);
      assertNotSame(localDateTime3, localDateTime0);
      assertNotSame(localDateTime3, localDateTime1);
      assertNotSame(localDateTime3, localDateTime2);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
      assertFalse(localDateTime2.equals((Object)localDateTime1));
      assertFalse(localDateTime2.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime0));
      assertFalse(localDateTime3.equals((Object)localDateTime1));
      assertFalse(localDateTime3.equals((Object)localDateTime2));
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
      assertFalse(boolean0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime0, localDateTime2);
      assertNotSame(localDateTime0, localDateTime3);
      assertNotSame(localDateTime1, localDateTime3);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime1, localDateTime2);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime0.equals((Object)localDateTime2));
      assertFalse(localDateTime0.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime3));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime1.equals((Object)localDateTime2));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        dateTimeZone0.isLocalDateTimeGap((LocalDateTime) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-3287));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:03.287", dateTimeZone0.toString());
      assertEquals("-00:00:03.287", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      String string0 = dateTimeZone0.getNameKey(0L);
      assertNull(string0);
      assertEquals("-00:00:03.287", dateTimeZone0.toString());
      assertEquals("-00:00:03.287", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      int int0 = dateTimeZone0.getStandardOffset((-3287));
      assertEquals((-3287), int0);
      assertEquals("-00:00:03.287", dateTimeZone0.toString());
      assertEquals("-00:00:03.287", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      LocalDateTime localDateTime0 = new LocalDateTime(0L, dateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals("-00:00:03.287", dateTimeZone0.toString());
      assertEquals("-00:00:03.287", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertNotNull(dateTime0);
      assertEquals("-00:00:03.287", dateTimeZone0.toString());
      assertEquals("-00:00:03.287", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals((-32403287L), dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plusHours((-3287));
      assertNotNull(dateTime1);
      assertEquals("-00:00:03.287", dateTimeZone0.toString());
      assertEquals("-00:00:03.287", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals((-32403287L), dateTime0.getMillis());
      assertEquals((-11865603287L), dateTime1.getMillis());
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      DateTime dateTime2 = dateTime1.minusMinutes(578);
      assertNotNull(dateTime2);
      assertEquals("-00:00:03.287", dateTimeZone0.toString());
      assertEquals("-00:00:03.287", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals((-32403287L), dateTime0.getMillis());
      assertEquals((-11865603287L), dateTime1.getMillis());
      assertEquals((-11900283287L), dateTime2.getMillis());
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      
      int int1 = dateTimeZone0.getOffset((ReadableInstant) dateTime2);
      assertEquals((-3287), int1);
      assertEquals("-00:00:03.287", dateTimeZone0.toString());
      assertEquals("-00:00:03.287", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals((-32403287L), dateTime0.getMillis());
      assertEquals((-11865603287L), dateTime1.getMillis());
      assertEquals((-11900283287L), dateTime2.getMillis());
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-1352);
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, (-1352));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -1352
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("UTC");
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      String string0 = dateTimeZone0.toString();
      assertEquals("UTC", string0);
      assertNotNull(string0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      int int0 = dateTimeZone0.UTC.getOffsetFromLocal(1);
      assertEquals(0, int0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("GMT+01:01", timeZone0.getID());
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("GMT+01:01", timeZone0.getID());
      assertEquals("+01:01", dateTimeZone1.toString());
      assertEquals("+01:01", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      
      String string0 = dateTimeZone0.getNameKey(0L);
      assertNull(string0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertSame(dateTimeZone0, dateTimeZone1);
      
      long long0 = dateTimeZone0.adjustOffset((-2153L), true);
      assertEquals((-2153L), long0);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertSame(dateTimeZone0, dateTimeZone1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone2);
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("GMT+01:01", timeZone0.getID());
      assertEquals("+01:01", dateTimeZone2.toString());
      assertEquals("+01:01", dateTimeZone2.getID());
      assertTrue(dateTimeZone2.isFixed());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone0, dateTimeZone2);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = (-294);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-294));
      assertNotNull(dateTimeZone0);
      assertEquals("-00:00:00.294", dateTimeZone0.toString());
      assertEquals("-00:00:00.294", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      int int1 = dateTimeZone0.getOffsetFromLocal((-4213L));
      assertEquals((-294), int1);
      assertEquals("-00:00:00.294", dateTimeZone0.toString());
      assertEquals("-00:00:00.294", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(int1 == int0);
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("-00:00:00.294", dateTimeZone0.toString());
      assertEquals("-00:00:00.294", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("java.util.SimpleTimeZone[id=-00:00:00.294,offset=-294,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("-00:00:00.294", timeZone0.getID());
      assertEquals((-294), timeZone0.getRawOffset());
      assertFalse(timeZone0.useDaylightTime());
      
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '-00:00:00.294' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(578, set0.size());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1254, "America/Los_Angeles");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      
      boolean boolean1 = dateTimeZone0.isStandardOffset(1254);
      assertTrue(boolean1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertFalse(boolean1 == boolean0);
      
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      
      Locale locale0 = new Locale("America/Los_Angeles");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("america/los_angeles", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String string0 = dateTimeZone0.getName((long) 1254, locale0);
      assertEquals("-08:00", string0);
      assertNotNull(string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("america/los_angeles", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone1.getID());
      assertEquals("America/Los_Angeles", dateTimeZone1.toString());
      assertSame(dateTimeZone1, dateTimeZone0);
      
      String string1 = dateTimeZone1.getShortName((long) 1254, locale0);
      assertEquals("-08:00", string1);
      assertNotNull(string1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("america/los_angeles", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("America/Los_Angeles", dateTimeZone1.getID());
      assertEquals("America/Los_Angeles", dateTimeZone1.toString());
      assertSame(dateTimeZone1, dateTimeZone0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(578, set0.size());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1254, "America/Los_Angeles");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertNotNull(object0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.getMillisKeepLocal(fixedDateTimeZone0, 1254);
      assertEquals((-28798746L), long0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      boolean boolean1 = dateTimeZone0.isStandardOffset(365L);
      assertTrue(boolean1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertFalse(boolean1 == boolean0);
      
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      
      boolean boolean2 = fixedDateTimeZone0.isStandardOffset(9223372036854775807L);
      assertTrue(boolean2);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Locale locale0 = new Locale("America/Los_Angeles");
      assertNotNull(locale0);
      assertEquals("america/los_angeles", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = dateTimeZone0.getName(365L, locale0);
      assertEquals("-08:00", string0);
      assertNotNull(string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("america/los_angeles", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("-08:00");
      assertNotNull(dateTimeZone1);
      assertEquals("-08:00", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("-08:00", dateTimeZone1.toString());
      assertNotSame(dateTimeZone1, fixedDateTimeZone0);
      assertFalse(dateTimeZone1.equals((Object)fixedDateTimeZone0));
      
      String string1 = fixedDateTimeZone0.getShortName(365L);
      assertEquals("+00:00", string1);
      assertNotNull(string1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotSame(fixedDateTimeZone0, dateTimeZone1);
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = fixedDateTimeZone0.getShortName((-727L), locale0);
      assertEquals("+00:00", string2);
      assertNotNull(string2);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("america/los_angeles", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotSame(fixedDateTimeZone0, dateTimeZone1);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone1));
      
      long long1 = dateTimeZone0.convertLocalToUTC((-42521614012000L), false, (-28798746L));
      assertEquals((-42521585634000L), long1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)34;
      byteArray0[8] = (byte) (-3);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)89, (byte)15, (byte)112, (byte)51, (byte) (-67), (byte) (-10), (byte)4, (byte)34, (byte) (-3)}, byteArray0);
      
      System.setCurrentTimeMillis((-42521614012000L));
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals((-42521614012000L), dateTime0.getMillis());
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals(30472000, int0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals((-42521614012000L), dateTime0.getMillis());
      
      DateTimeUtils.setCurrentMillisSystem();
      int int1 = dateTimeZone0.getOffsetFromLocal((-42521614012000L));
      assertEquals(30472000, int1);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertTrue(int1 == int0);
      
      boolean boolean1 = dateTimeZone0.isStandardOffset(882L);
      assertTrue(boolean1);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("America/Los_Angeles");
      assertNotNull(dateTimeZone1);
      assertEquals("America/Los_Angeles", dateTimeZone1.toString());
      assertEquals("America/Los_Angeles", dateTimeZone1.getID());
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      
      DateTimeUtils.setCurrentMillisSystem();
      long long0 = dateTimeZone0.convertLocalToUTC(2858L, true, 2858L);
      assertEquals((-32397142L), long0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffset((-414L));
      assertEquals(32400000, int0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      TimeZone timeZone0 = dateTimeZone0.UTC.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals(0, timeZone0.getRawOffset());
      assertEquals("UTC", timeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals(0, timeZone0.getDSTSavings());
      
      String string0 = dateTimeZone0.UTC.getShortName(0L);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      String string1 = dateTimeZone0.toString();
      assertEquals("Asia/Seoul", string1);
      assertNotNull(string1);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertFalse(string1.equals((Object)string0));
      
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID("Asia/Dhaka");
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Dhaka", dateTimeZone0.getID());
      assertEquals("Asia/Dhaka", dateTimeZone0.toString());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertEquals("Asia/Dhaka", dateTimeZone0.getID());
      assertEquals("Asia/Dhaka", dateTimeZone0.toString());
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(strictChronology0);
      assertEquals("Asia/Dhaka", dateTimeZone0.getID());
      assertEquals("Asia/Dhaka", dateTimeZone0.toString());
      
      Chronology chronology0 = strictChronology0.withZone(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(chronology0);
      assertEquals("Asia/Dhaka", dateTimeZone0.getID());
      assertEquals("Asia/Dhaka", dateTimeZone0.toString());
      assertSame(strictChronology0, chronology0);
      assertSame(chronology0, strictChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone1 = gJChronology0.getZone();
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(chronology0, dateTimeZone1);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(zonedChronology0);
      assertEquals("Asia/Dhaka", dateTimeZone0.getID());
      assertEquals("Asia/Dhaka", dateTimeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertSame(strictChronology0, chronology0);
      assertSame(chronology0, strictChronology0);
      
      DateTimeZone dateTimeZone2 = zonedChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone2);
      assertEquals("Asia/Dhaka", dateTimeZone0.getID());
      assertEquals("Asia/Dhaka", dateTimeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone2.isFixed());
      assertEquals("UTC", dateTimeZone2.toString());
      assertEquals("UTC", dateTimeZone2.getID());
      assertSame(strictChronology0, chronology0);
      assertSame(chronology0, strictChronology0);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone2, dateTimeZone1);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      
      String string0 = dateTimeZone2.getName(0L, locale0);
      assertEquals("+00:00", string0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(string0);
      assertEquals("Asia/Dhaka", dateTimeZone0.getID());
      assertEquals("Asia/Dhaka", dateTimeZone0.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone2.isFixed());
      assertEquals("UTC", dateTimeZone2.toString());
      assertEquals("UTC", dateTimeZone2.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertSame(strictChronology0, chronology0);
      assertSame(chronology0, strictChronology0);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertSame(dateTimeZone2, dateTimeZone1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      DateTimeUtils.setCurrentMillisSystem();
      int int0 = dateTimeZone0.UTC.getStandardOffset(1);
      assertEquals(0, int0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone(dateTimeZone0);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology1);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, islamicChronology1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTime0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals((-42521614012000L), dateTime0.getMillis());
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      
      DateTime.Property dateTime_Property0 = dateTime0.hourOfDay();
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(dateTime_Property0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals((-42521614012000L), dateTime0.getMillis());
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      
      int int1 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals(30472000, int1);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals((-42521614012000L), dateTime0.getMillis());
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertFalse(int1 == int0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      MillisDurationField millisDurationField0 = (MillisDurationField)MillisDurationField.INSTANCE;
      assertNotNull(millisDurationField0);
      assertEquals("millis", millisDurationField0.getName());
      assertTrue(millisDurationField0.isPrecise());
      assertEquals("DurationField[millis]", millisDurationField0.toString());
      assertTrue(millisDurationField0.isSupported());
      assertEquals(1L, millisDurationField0.getUnitMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      try { 
        DateTimeZone.forOffsetHoursMinutes(1, (-7200000));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -7200000
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      long long0 = dateTimeZone0.convertLocalToUTC(78L, true, 477L);
      assertEquals((-32399922L), long0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1000);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Instant instant1 = instant0.minus((long) 1000);
      assertNotNull(instant1);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409280320L, instant1.getMillis());
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant1.equals((Object)instant0));
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) instant1);
      assertEquals(1000, int0);
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409280320L, instant1.getMillis());
      assertNotSame(instant0, instant1);
      assertNotSame(instant1, instant0);
      assertFalse(instant0.equals((Object)instant1));
      assertFalse(instant1.equals((Object)instant0));
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      int int1 = dateTimeZone0.getOffsetFromLocal(0L);
      assertEquals(1000, int1);
      assertEquals("+00:00:01", dateTimeZone0.getID());
      assertEquals("+00:00:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone.setProvider(uTCProvider0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertSame(dateTimeZone0, fixedDateTimeZone0);
      
      long long0 = fixedDateTimeZone0.adjustOffset(0L, true);
      assertEquals(0L, long0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertSame(fixedDateTimeZone0, dateTimeZone0);
      
      long long1 = fixedDateTimeZone0.convertLocalToUTC((long) 0, true);
      assertEquals(0L, long1);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertSame(fixedDateTimeZone0, dateTimeZone0);
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      assertNotNull(defaultNameProvider0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      Locale locale1 = Locale.GERMANY;
      assertNotNull(locale1);
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de_DE", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      
      String string0 = locale0.getDisplayScript(locale1);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de_DE", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      
      String string1 = defaultNameProvider0.getName(locale0, "PDT", "PDT");
      assertNull(string1);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      
      DateTimeZone.setNameProvider(defaultNameProvider0);
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertNotNull(object0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours((-23));
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:00", dateTimeZone0.getID());
      assertEquals("-23:00", dateTimeZone0.toString());
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      assertFalse(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      
      Locale locale2 = Locale.GERMANY;
      assertNotNull(locale2);
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertEquals("DE", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("DEU", locale2.getISO3Country());
      assertEquals("de_DE", locale2.toString());
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      
      String string2 = locale2.toLanguageTag();
      assertEquals("de-DE", string2);
      assertNotNull(string2);
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertEquals("DE", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("DEU", locale2.getISO3Country());
      assertEquals("de_DE", locale2.toString());
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = fixedDateTimeZone0.getShortName(259200000L, locale2);
      assertEquals("+00:00", string3);
      assertNotNull(string3);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertEquals("DE", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("DEU", locale2.getISO3Country());
      assertEquals("de_DE", locale2.toString());
      assertNotSame(fixedDateTimeZone0, dateTimeZone0);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone0));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      long long0 = dateTimeZone0.convertUTCToLocal(1812L);
      assertEquals((-82798188L), long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:00", dateTimeZone0.getID());
      assertEquals("-23:00", dateTimeZone0.toString());
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      assertFalse(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      
      String string4 = dateTimeZone0.getNameKey(100000000000000000L);
      assertNull(string4);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:00", dateTimeZone0.getID());
      assertEquals("-23:00", dateTimeZone0.toString());
      assertNotSame(dateTimeZone0, fixedDateTimeZone0);
      assertFalse(dateTimeZone0.equals((Object)fixedDateTimeZone0));
      
      int int0 = fixedDateTimeZone0.getOffset(859L);
      assertEquals(0, int0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotSame(fixedDateTimeZone0, dateTimeZone0);
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      long long0 = fixedDateTimeZone0.convertLocalToUTC(5675L, false);
      assertEquals(5675L, long0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      int int0 = fixedDateTimeZone0.getOffsetFromLocal(0L);
      assertEquals(0, int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(0, 58);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:58", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+00:58", fixedDateTimeZone0.toString());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(0);
      assertNotNull(fixedDateTimeZone1);
      assertTrue(fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      DateTimeUtils.setCurrentMillisFixed(1665L);
      boolean boolean0 = fixedDateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertEquals("+00:58", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+00:58", fixedDateTimeZone0.toString());
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertNotNull(object0);
      assertEquals("+00:58", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+00:58", fixedDateTimeZone0.toString());
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(locale0));
      
      String string0 = locale0.getDisplayScript();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      String string1 = fixedDateTimeZone0.getName(1665L, locale0);
      assertEquals("+00:58", string1);
      assertNotNull(string1);
      assertEquals("+00:58", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+00:58", fixedDateTimeZone0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertFalse(string1.equals((Object)string0));
      
      DateTimeZone.setDefault(fixedDateTimeZone0);
      assertEquals("+00:58", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+00:58", fixedDateTimeZone0.toString());
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(578, set0.size());
      
      int int0 = 1;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(1);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      
      String string0 = fixedDateTimeZone0.getID();
      assertEquals("+00:00:00.001", string0);
      assertNotNull(string0);
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(1);
      assertNotNull(fixedDateTimeZone1);
      assertTrue(fixedDateTimeZone1.isFixed());
      assertEquals("+01:00", fixedDateTimeZone1.toString());
      assertEquals("+01:00", fixedDateTimeZone1.getID());
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      
      int int1 = fixedDateTimeZone1.UTC.getOffset((ReadableInstant) null);
      assertEquals(0, int1);
      assertTrue(fixedDateTimeZone1.isFixed());
      assertEquals("+01:00", fixedDateTimeZone1.toString());
      assertEquals("+01:00", fixedDateTimeZone1.getID());
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(int1 == int0);
      
      Object object0 = fixedDateTimeZone0.UTC.writeReplace();
      assertNotNull(object0);
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      
      String string1 = fixedDateTimeZone0.getName(0L);
      assertEquals("+00:00:00.001", string1);
      assertNotNull(string1);
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      
      long long0 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        fixedDateTimeZone0.convertUTCToLocal(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertNotNull(set0);
      assertEquals(578, set0.size());
      assertFalse(set0.isEmpty());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-673));
      assertNotNull(dateTimeZone1);
      assertEquals("-00:00:00.673", dateTimeZone1.toString());
      assertEquals("-00:00:00.673", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
      
      DateTimeZone.setNameProvider(nameProvider0);
      // Undeclared exception!
      try { 
        dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHoursMinutes((-1742), (-1742));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -1742
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeZone.setProvider((Provider) null);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      Chronology chronology0 = iSOChronology0.withZone(fixedDateTimeZone0);
      assertNotNull(chronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotSame(iSOChronology0, chronology0);
      assertNotSame(chronology0, iSOChronology0);
      assertFalse(chronology0.equals((Object)iSOChronology0));
      
      int int0 = 326565;
      int int1 = 86;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(86, "Invalid UTC zone provided");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Invalid UTC zone provided", simpleTimeZone0.getID());
      assertEquals(86, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Invalid UTC zone provided,offset=86,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'Invalid UTC zone provided' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 653;
      try { 
        DateTimeZone.forOffsetHoursMinutes(0, 653);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 653
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeUtils.setCurrentMillisFixed(0);
      long long0 = dateTimeZone0.convertLocalToUTC(0L, false, 0L);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(578, set0.size());
      
      int int0 = 1;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(1);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(1);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("+01:00", fixedDateTimeZone1.toString());
      assertTrue(fixedDateTimeZone1.isFixed());
      assertEquals("+01:00", fixedDateTimeZone1.getID());
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      
      int int1 = fixedDateTimeZone1.UTC.getOffset((ReadableInstant) null);
      assertEquals(0, int1);
      assertEquals("+01:00", fixedDateTimeZone1.toString());
      assertTrue(fixedDateTimeZone1.isFixed());
      assertEquals("+01:00", fixedDateTimeZone1.getID());
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(int1 == int0);
      
      String string0 = fixedDateTimeZone0.getName(10800000L);
      assertEquals("+00:00:00.001", string0);
      assertNotNull(string0);
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      
      long long0 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        fixedDateTimeZone0.convertUTCToLocal(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "millis");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Asia/Seoul");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("Asia/Seoul");
      assertNotNull(dateTimeZone1);
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
      
      boolean boolean3 = dateTimeZone1.UTC.isFixed();
      assertTrue(boolean3);
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      DateTimeZone.setNameProvider(nameProvider0);
      DateTimeUtils.setCurrentMillisFixed(9223372036854775807L);
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      
      String string0 = dateTimeZone0.toString();
      assertEquals("UTC", string0);
      assertNotNull(string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.UTC.getOffsetFromLocal(0);
      assertEquals(0, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      String string1 = dateTimeZone0.getName((long) 0);
      assertEquals("+00:00", string1);
      assertNotNull(string1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = dateTimeZone1.UTC.getNameKey((-1545L));
      assertEquals("UTC", string2);
      assertNotNull(string2);
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertFalse(string2.equals((Object)string1));
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      
      String string3 = dateTimeZone1.getShortName((long) 0, locale0);
      assertEquals("+09:00", string3);
      assertNotNull(string3);
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      TimeZone timeZone0 = dateTimeZone1.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("Asia/Seoul", timeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      
      DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone2);
      assertEquals("Asia/Seoul", timeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone2.toString());
      assertEquals("Asia/Seoul", dateTimeZone2.getID());
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone2);
      
      System.setCurrentTimeMillis((-9223372036854775808L));
      DateTimeZone.setDefault(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      int int1 = dateTimeZone2.getOffsetFromLocal((-9223372036854775808L));
      assertEquals(30472000, int1);
      assertEquals("Asia/Seoul", timeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone2.toString());
      assertEquals("Asia/Seoul", dateTimeZone2.getID());
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertFalse(int1 == int0);
      
      String string4 = dateTimeZone0.getName((long) 0);
      assertEquals("+00:00", string4);
      assertNotNull(string4);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      
      TimeZone timeZone1 = dateTimeZone1.toTimeZone();
      assertNotNull(timeZone1);
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertEquals("Asia/Seoul", timeZone1.getID());
      assertSame(dateTimeZone1, dateTimeZone2);
      assertNotSame(timeZone1, timeZone0);
      assertTrue(timeZone1.equals((Object)timeZone0));
      
      String string5 = dateTimeZone0.getName(246L, locale0);
      assertEquals("+00:00", string5);
      assertNotNull(string5);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      NameProvider nameProvider1 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider1);
      assertSame(nameProvider1, nameProvider0);
      
      long long0 = dateTimeZone1.convertLocalToUTC((long) 0, true);
      assertEquals((-32400000L), long0);
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertSame(dateTimeZone1, dateTimeZone2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone1);
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertSame(dateTimeZone1, dateTimeZone0);
      
      long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, 0);
      assertEquals(0L, long0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone1.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("UTC", dateTimeZone1.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      Set<String> set0 = uTCProvider0.getAvailableIDs();
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone("America/Denver");
      assertNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone1);
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      
      int int0 = dateTimeZone1.getStandardOffset(31083597720000L);
      assertEquals(32400000, int0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      
      long long0 = dateTimeZone1.getMillisKeepLocal((DateTimeZone) null, 1);
      assertEquals(1L, long0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone.setNameProvider((NameProvider) null);
      DateTimeZone.setProvider((Provider) null);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      boolean boolean0 = fixedDateTimeZone0.isStandardOffset(0L);
      assertTrue(boolean0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      long long0 = fixedDateTimeZone0.previousTransition(0L);
      assertEquals(0L, long0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      boolean boolean1 = fixedDateTimeZone0.equals(uTCProvider0);
      assertFalse(boolean1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(boolean1 == boolean0);
      
      int int0 = fixedDateTimeZone0.getOffsetFromLocal(3548L);
      assertEquals(0, int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      long long1 = fixedDateTimeZone0.nextTransition(1353L);
      assertEquals(1353L, long1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(long1 == long0);
      
      long long2 = fixedDateTimeZone0.nextTransition(1353L);
      assertEquals(1353L, long2);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      
      String string0 = fixedDateTimeZone0.getName(3548L, (Locale) null);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      assertNotNull(defaultNameProvider0);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string0 = "1!\\u#";
      String string1 = defaultNameProvider0.getName(locale0, "America/Los_Angeles", string0);
      assertNull(string1);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      DateTimeZone.setNameProvider(defaultNameProvider0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      try { 
        DateTimeZone.forOffsetHours(631);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 631
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(578, set0.size());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertNotNull(object0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      String string0 = fixedDateTimeZone0.getName(31083597720000L);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      int int0 = fixedDateTimeZone0.getOffsetFromLocal(0L);
      assertEquals(0, int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      String string1 = fixedDateTimeZone0.getNameKey((-2619L));
      assertEquals("UTC", string1);
      assertNotNull(string1);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      String string0 = dateTimeZone0.getShortName((-476L));
      assertEquals("+00:00", string0);
      assertNotNull(string0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID((String) null);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Asia/Seoul", cachedDateTimeZone0.getID());
      assertEquals("Asia/Seoul", cachedDateTimeZone0.toString());
      
      long long0 = cachedDateTimeZone0.previousTransition(34L);
      assertEquals((-39515400001L), long0);
      assertEquals("Asia/Seoul", cachedDateTimeZone0.getID());
      assertEquals("Asia/Seoul", cachedDateTimeZone0.toString());
      
      Object object0 = ((DateTimeZone)cachedDateTimeZone0).writeReplace();
      assertNotNull(object0);
      assertEquals("Asia/Seoul", cachedDateTimeZone0.getID());
      assertEquals("Asia/Seoul", cachedDateTimeZone0.toString());
      
      DateTimeZone.setDefault(cachedDateTimeZone0);
      assertEquals("Asia/Seoul", cachedDateTimeZone0.getID());
      assertEquals("Asia/Seoul", cachedDateTimeZone0.toString());
      
      long long1 = cachedDateTimeZone0.adjustOffset((-39515400001L), false);
      assertEquals((-39515400001L), long1);
      assertEquals("Asia/Seoul", cachedDateTimeZone0.getID());
      assertEquals("Asia/Seoul", cachedDateTimeZone0.toString());
      assertTrue(long1 == long0);
      
      DateTimeUtils.setCurrentMillisFixed((-39515400001L));
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      assertNotNull(strictChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) strictChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("Asia/Seoul", cachedDateTimeZone0.getID());
      assertEquals("Asia/Seoul", cachedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals((-39515400001L), dateTime0.getMillis());
      
      boolean boolean0 = cachedDateTimeZone0.UTC.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals("Asia/Seoul", cachedDateTimeZone0.getID());
      assertEquals("Asia/Seoul", cachedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      
      Object object1 = ((DateTimeZone)cachedDateTimeZone0).writeReplace();
      assertNotNull(object1);
      assertEquals("Asia/Seoul", cachedDateTimeZone0.getID());
      assertEquals("Asia/Seoul", cachedDateTimeZone0.toString());
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      
      ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("Asia/Seoul", cachedDateTimeZone0.getID());
      assertEquals("Asia/Seoul", cachedDateTimeZone0.toString());
      assertEquals("Asia/Seoul", zoneInfo0.getID());
      
      long long2 = strictChronology0.add((-39515400001L), (-39515400001L), 243);
      assertEquals((-9641757600244L), long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      String string0 = cachedDateTimeZone0.getShortName((-39515400001L), (Locale) null);
      assertEquals("+08:30", string0);
      assertNotNull(string0);
      assertEquals("Asia/Seoul", cachedDateTimeZone0.getID());
      assertEquals("Asia/Seoul", cachedDateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfYear((-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -8 for dayOfYear must be in the range [1,366]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone1);
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertSame(dateTimeZone1, dateTimeZone0);
      
      long long0 = dateTimeZone1.UTC.convertLocalToUTC(828L, true, 828L);
      assertEquals(828L, long0);
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertSame(dateTimeZone1, dateTimeZone0);
      
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
      
      int int0 = (-75);
      try { 
        DateTimeZone.forOffsetHours((-75));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -75
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-1), (-1));
      assertNotNull(dateTimeZone0);
      assertEquals("-01:01", dateTimeZone0.getID());
      assertEquals("-01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      int int0 = dateTimeZone0.UTC.getOffsetFromLocal((-1));
      assertEquals(0, int0);
      assertEquals("-01:01", dateTimeZone0.getID());
      assertEquals("-01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("-01:01", dateTimeZone0.getID());
      assertEquals("-01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("GMT-01:01", timeZone0.getID());
      
      long long0 = dateTimeZone0.UTC.convertUTCToLocal(100L);
      assertEquals(100L, long0);
      assertEquals("-01:01", dateTimeZone0.getID());
      assertEquals("-01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertEquals("-01:01", dateTimeZone0.getID());
      assertEquals("-01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("-01:01", dateTimeZone0.getID());
      assertEquals("-01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("GMT-01:01", timeZone0.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("-01:01", dateTimeZone1.getID());
      assertEquals("-01:01", dateTimeZone1.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      
      String string0 = dateTimeZone0.getNameKey(0L);
      assertNull(string0);
      assertEquals("-01:01", dateTimeZone0.getID());
      assertEquals("-01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertSame(dateTimeZone0, dateTimeZone1);
      
      long long1 = dateTimeZone0.adjustOffset((-2153L), false);
      assertEquals((-2153L), long1);
      assertEquals("-01:01", dateTimeZone0.getID());
      assertEquals("-01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(long1 == long0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1924);
      assertNotNull(dateTimeZone0);
      assertEquals("+00:00:01.924", dateTimeZone0.toString());
      assertEquals("+00:00:01.924", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      DateTimeUtils.setCurrentMillisFixed(1924);
      DateTimeUtils.setCurrentMillisOffset(1924);
      long long0 = dateTimeZone0.UTC.previousTransition(1924);
      assertEquals(1924L, long0);
      assertEquals("+00:00:01.924", dateTimeZone0.toString());
      assertEquals("+00:00:01.924", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      long long1 = dateTimeZone0.convertUTCToLocal(1000000000000000L);
      assertEquals(1000000000001924L, long1);
      assertEquals("+00:00:01.924", dateTimeZone0.toString());
      assertEquals("+00:00:01.924", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertFalse(long1 == long0);
      
      long long2 = dateTimeZone0.nextTransition((-1473L));
      assertEquals((-1473L), long2);
      assertEquals("+00:00:01.924", dateTimeZone0.toString());
      assertEquals("+00:00:01.924", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      int int0 = dateTimeZone0.getOffset((long) 1924);
      assertEquals(1924, int0);
      assertEquals("+00:00:01.924", dateTimeZone0.toString());
      assertEquals("+00:00:01.924", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      String string0 = dateTimeZone0.getName(0L);
      assertEquals("+00:00:01.924", string0);
      assertNotNull(string0);
      assertEquals("+00:00:01.924", dateTimeZone0.toString());
      assertEquals("+00:00:01.924", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      String string1 = dateTimeZone0.getShortName(1000000000000000L, (Locale) null);
      assertEquals("+00:00:01.924", string1);
      assertNotNull(string1);
      assertEquals("+00:00:01.924", dateTimeZone0.toString());
      assertEquals("+00:00:01.924", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      
      int int1 = dateTimeZone0.getOffset((ReadableInstant) null);
      assertEquals(1924, int1);
      assertEquals("+00:00:01.924", dateTimeZone0.toString());
      assertEquals("+00:00:01.924", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("GMT+01:01", timeZone0.getID());
      
      long long0 = dateTimeZone0.UTC.convertUTCToLocal(100L);
      assertEquals(100L, long0);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("GMT+01:01", timeZone0.getID());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+01:01", dateTimeZone1.toString());
      assertEquals("+01:01", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      
      String string0 = dateTimeZone0.getNameKey(0L);
      assertNull(string0);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      
      long long1 = dateTimeZone0.adjustOffset((-2153L), true);
      assertEquals((-2153L), long1);
      assertEquals("+01:01", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(long1 == long0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-23), (-23));
      assertNotNull(dateTimeZone0);
      assertEquals("-23:23", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("-23:23", dateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      try { 
        DateTimeZone.forOffsetHours(1472);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 1472
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone1);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      
      long long0 = dateTimeZone1.adjustOffset(1, false);
      assertEquals(1L, long0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      
      String string0 = dateTimeZone0.getNameKey(0L);
      assertEquals("KST", string0);
      assertNotNull(string0);
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.adjustOffset(9223372036854775807L, true);
      assertEquals(9223372036854775807L, long0);
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      
      String string1 = dateTimeZone0.getNameKey(0L);
      assertEquals("KST", string1);
      assertNotNull(string1);
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) julianChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = (-1734);
      int int1 = 1;
      try { 
        julianChronology0.getDateTimeMillis(9223372036854775807L, (-2590), 0, 1663, 2000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2590 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID("America/Anchorage");
      assertNotNull(cachedDateTimeZone0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      
      long long0 = cachedDateTimeZone0.previousTransition(0L);
      assertEquals((-5749200001L), long0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      
      Object object0 = ((DateTimeZone)cachedDateTimeZone0).writeReplace();
      assertNotNull(object0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      
      DateTimeZone.setDefault(cachedDateTimeZone0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      
      long long1 = cachedDateTimeZone0.adjustOffset((-5749200001L), false);
      assertEquals((-5749200001L), long1);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertTrue(long1 == long0);
      
      DateTimeUtils.setCurrentMillisFixed((-5749200001L));
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      assertNotNull(strictChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) strictChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals((-5749200001L), dateTime0.getMillis());
      
      boolean boolean0 = cachedDateTimeZone0.UTC.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      
      Object object1 = ((DateTimeZone)cachedDateTimeZone0).writeReplace();
      assertNotNull(object1);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      
      ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", zoneInfo0.getID());
      
      long long2 = strictChronology0.add((-5749200001L), (-5749200001L), 243);
      assertEquals((-1402804800244L), long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      String string0 = cachedDateTimeZone0.getShortName((-5749200001L), (Locale) null);
      assertEquals("-09:00", string0);
      assertNotNull(string0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfYear((-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -8 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(59);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.059", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.059", fixedDateTimeZone0.toString());
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)fixedDateTimeZone0.toTimeZone();
      assertNotNull(simpleTimeZone0);
      assertEquals("+00:00:00.059", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.059", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.059", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=+00:00:00.059,offset=59,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(59, simpleTimeZone0.getRawOffset());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(1, 59);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("+01:59", fixedDateTimeZone1.toString());
      assertTrue(fixedDateTimeZone1.isFixed());
      assertEquals("+01:59", fixedDateTimeZone1.getID());
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      
      DateTimeZone.setDefault(fixedDateTimeZone1);
      assertEquals("+01:59", fixedDateTimeZone1.toString());
      assertTrue(fixedDateTimeZone1.isFixed());
      assertEquals("+01:59", fixedDateTimeZone1.getID());
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      
      String string0 = fixedDateTimeZone1.UTC.getName((-252L), locale0);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
      assertEquals("+01:59", fixedDateTimeZone1.toString());
      assertTrue(fixedDateTimeZone1.isFixed());
      assertEquals("+01:59", fixedDateTimeZone1.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      
      boolean boolean0 = fixedDateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertEquals("+00:00:00.059", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.059", fixedDateTimeZone0.toString());
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertNotNull(object0);
      assertEquals("+00:00:00.059", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.059", fixedDateTimeZone0.toString());
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      
      FixedDateTimeZone fixedDateTimeZone2 = (FixedDateTimeZone)DateTimeZone.forID("+00:00");
      assertNotNull(fixedDateTimeZone2);
      assertTrue(fixedDateTimeZone2.isFixed());
      assertEquals("UTC", fixedDateTimeZone2.getID());
      assertEquals("UTC", fixedDateTimeZone2.toString());
      assertNotSame(fixedDateTimeZone2, fixedDateTimeZone1);
      assertNotSame(fixedDateTimeZone2, fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone2.equals((Object)fixedDateTimeZone1));
      assertFalse(fixedDateTimeZone2.equals((Object)fixedDateTimeZone0));
      
      String string1 = fixedDateTimeZone2.getName((long) 1);
      assertEquals("+00:00", string1);
      assertNotNull(string1);
      assertTrue(fixedDateTimeZone2.isFixed());
      assertEquals("UTC", fixedDateTimeZone2.getID());
      assertEquals("UTC", fixedDateTimeZone2.toString());
      assertNotSame(fixedDateTimeZone2, fixedDateTimeZone1);
      assertNotSame(fixedDateTimeZone2, fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone2.equals((Object)fixedDateTimeZone1));
      assertFalse(fixedDateTimeZone2.equals((Object)fixedDateTimeZone0));
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = fixedDateTimeZone2.UTC.isStandardOffset(80L);
      assertTrue(boolean1);
      assertTrue(fixedDateTimeZone2.isFixed());
      assertEquals("UTC", fixedDateTimeZone2.getID());
      assertEquals("UTC", fixedDateTimeZone2.toString());
      assertNotSame(fixedDateTimeZone2, fixedDateTimeZone1);
      assertNotSame(fixedDateTimeZone2, fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone2.equals((Object)fixedDateTimeZone1));
      assertFalse(fixedDateTimeZone2.equals((Object)fixedDateTimeZone0));
      assertTrue(boolean1 == boolean0);
      
      fixedDateTimeZone1.hashCode();
      assertEquals("+01:59", fixedDateTimeZone1.toString());
      assertTrue(fixedDateTimeZone1.isFixed());
      assertEquals("+01:59", fixedDateTimeZone1.getID());
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone2);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone2));
      
      String string2 = fixedDateTimeZone2.toString();
      assertEquals("UTC", string2);
      assertNotNull(string2);
      assertTrue(fixedDateTimeZone2.isFixed());
      assertEquals("UTC", fixedDateTimeZone2.getID());
      assertEquals("UTC", fixedDateTimeZone2.toString());
      assertNotSame(fixedDateTimeZone2, fixedDateTimeZone1);
      assertNotSame(fixedDateTimeZone2, fixedDateTimeZone0);
      assertFalse(fixedDateTimeZone2.equals((Object)fixedDateTimeZone1));
      assertFalse(fixedDateTimeZone2.equals((Object)fixedDateTimeZone0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
      assertNotNull(defaultNameProvider0);
      assertSame(defaultNameProvider0, nameProvider0);
      
      long long0 = fixedDateTimeZone1.nextTransition(0L);
      assertEquals(0L, long0);
      assertEquals("+01:59", fixedDateTimeZone1.toString());
      assertTrue(fixedDateTimeZone1.isFixed());
      assertEquals("+01:59", fixedDateTimeZone1.getID());
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone2);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone2));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      long long0 = dateTimeZone0.adjustOffset(0L, false);
      assertEquals(0L, long0);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertNotNull(set0);
      assertEquals(578, set0.size());
      assertFalse(set0.isEmpty());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1254, "America/Los_Angeles");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.getMillisKeepLocal(fixedDateTimeZone0, 1254);
      assertEquals((-28798746L), long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      
      boolean boolean0 = dateTimeZone0.isStandardOffset((-28798746L));
      assertTrue(boolean0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      
      DateTimeZone.setDefault(dateTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      
      boolean boolean1 = fixedDateTimeZone0.isStandardOffset(9223372036854775807L);
      assertTrue(boolean1);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertTrue(boolean1 == boolean0);
      
      Locale locale0 = new Locale("America/Los_Angeles");
      assertNotNull(locale0);
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("america/los_angeles", locale0.getLanguage());
      
      String string0 = dateTimeZone0.getName((-28798746L), locale0);
      assertEquals("-08:00", string0);
      assertNotNull(string0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("america/los_angeles", locale0.getLanguage());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("-08:00");
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("-08:00", dateTimeZone1.getID());
      assertEquals("-08:00", dateTimeZone1.toString());
      assertNotSame(dateTimeZone1, fixedDateTimeZone0);
      assertFalse(dateTimeZone1.equals((Object)fixedDateTimeZone0));
      
      String string1 = fixedDateTimeZone0.getShortName((-28798746L));
      assertEquals("+00:00", string1);
      assertNotNull(string1);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotSame(fixedDateTimeZone0, dateTimeZone1);
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = fixedDateTimeZone0.getShortName((-727L), locale0);
      assertEquals("+00:00", string2);
      assertNotNull(string2);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("america/los_angeles", locale0.getLanguage());
      assertNotSame(fixedDateTimeZone0, dateTimeZone1);
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
      assertEquals((-28378000), int0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);
      assertNotNull(gJChronology0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = zonedChronology0.getZone();
      assertNotNull(dateTimeZone1);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      
      long long0 = dateTimeZone1.convertLocalToUTC(0L, true);
      assertEquals((-32400000L), long0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      
      long long1 = dateTimeZone1.convertUTCToLocal(0L);
      assertEquals(32400000L, long1);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertFalse(long1 == long0);
      
      int int0 = dateTimeZone0.getStandardOffset((-1120L));
      assertEquals(32400000, int0);
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      DateTimeZone.setNameProvider((NameProvider) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte)14;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-21), (byte) (-103), (byte)108, (byte) (-82), (byte)14}, byteArray0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("GMT+01:01");
      assertNotNull(timeZone0);
      assertEquals("GMT+01:01", timeZone0.getID());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals("GMT+01:01", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      
      int int0 = dateTimeZone0.getOffsetFromLocal(43L);
      assertEquals(3660000, int0);
      assertEquals("GMT+01:01", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      
      int int1 = dateTimeZone0.UTC.getOffset((ReadableInstant) null);
      assertEquals(0, int1);
      assertEquals("GMT+01:01", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertFalse(int1 == int0);
      
      TimeZone.setDefault(timeZone0);
      assertEquals("GMT+01:01", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = locale0.toLanguageTag();
      assertEquals("zh-CN", string0);
      assertNotNull(string0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string1 = dateTimeZone0.getShortName((-4313L), locale0);
      assertEquals("+01:01", string1);
      assertNotNull(string1);
      assertEquals("GMT+01:01", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string0));
      
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(578, set0.size());
      assertFalse(set0.contains(string1));
      
      long long0 = dateTimeZone0.UTC.convertLocalToUTC((-4313L), true, (-4313L));
      assertEquals((-4313L), long0);
      assertEquals("GMT+01:01", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = dateTimeZone0.getShortName(1L);
      assertEquals("+01:01", string2);
      assertNotNull(string2);
      assertEquals("GMT+01:01", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertFalse(string2.equals((Object)string0));
      
      TimeZone timeZone1 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone1);
      assertEquals("GMT+01:01", timeZone1.getID());
      assertEquals("GMT+01:01", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertNotSame(timeZone1, timeZone0);
      assertNotSame(timeZone0, timeZone1);
      assertTrue(timeZone1.equals((Object)timeZone0));
      
      boolean boolean2 = dateTimeZone0.isStandardOffset(1L);
      assertTrue(boolean2);
      assertEquals("GMT+01:01", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertNotSame(timeZone0, timeZone1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(timeZone0.equals((Object)timeZone1));
      
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
      
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
      
      DateTimeZone.setNameProvider(nameProvider0);
      String string3 = dateTimeZone0.getName(7L, locale0);
      assertEquals("+01:01", string3);
      assertNotNull(string3);
      assertEquals("GMT+01:01", timeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotSame(timeZone0, timeZone1);
      assertTrue(timeZone0.equals((Object)timeZone1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((-748L));
      DateTimeZone.setProvider((Provider) null);
      System.setCurrentTimeMillis((-748L));
      try { 
        DateTimeZone.forOffsetHoursMinutes((-2246), (-2246));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -2246
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertNotNull(set0);
      assertEquals(578, set0.size());
      assertFalse(set0.isEmpty());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1254, "America/Los_Angeles");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      
      Object object0 = ((DateTimeZone)fixedDateTimeZone0).writeReplace();
      assertNotNull(object0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      
      long long0 = dateTimeZone0.getMillisKeepLocal(fixedDateTimeZone0, 1254);
      assertEquals((-28798746L), long0);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      boolean boolean1 = dateTimeZone0.isStandardOffset(365L);
      assertTrue(boolean1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertFalse(boolean1 == boolean0);
      
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      
      boolean boolean2 = fixedDateTimeZone0.isStandardOffset(9223372036854775807L);
      assertTrue(boolean2);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Locale locale0 = new Locale("America/Los_Angeles");
      assertNotNull(locale0);
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("america/los_angeles", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = dateTimeZone0.getName(365L, locale0);
      assertEquals("-08:00", string0);
      assertNotNull(string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("america/los_angeles", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("-08:00");
      assertNotNull(dateTimeZone1);
      assertEquals("-08:00", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("-08:00", dateTimeZone1.getID());
      assertNotSame(dateTimeZone1, fixedDateTimeZone0);
      assertFalse(dateTimeZone1.equals((Object)fixedDateTimeZone0));
      
      String string1 = fixedDateTimeZone0.getShortName(365L);
      assertEquals("+00:00", string1);
      assertNotNull(string1);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotSame(fixedDateTimeZone0, dateTimeZone1);
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = fixedDateTimeZone0.getShortName((-727L), locale0);
      assertEquals("+00:00", string2);
      assertNotNull(string2);
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("america/los_angeles", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotSame(fixedDateTimeZone0, dateTimeZone1);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(fixedDateTimeZone0.equals((Object)dateTimeZone1));
      
      long long1 = dateTimeZone0.convertLocalToUTC((-42521614012000L), false, (-28798746L));
      assertEquals((-42521585634000L), long1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertFalse(long1 == long0);
      
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
      
      int int0 = dateTimeZone1.getOffsetFromLocal(3600L);
      assertEquals((-28800000), int0);
      assertEquals("-08:00", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("-08:00", dateTimeZone1.getID());
      assertNotSame(dateTimeZone1, fixedDateTimeZone0);
      assertFalse(dateTimeZone1.equals((Object)fixedDateTimeZone0));
      
      DateTimeZone dateTimeZone2 = DateTimeZone.forID("+00:00");
      assertNotNull(dateTimeZone2);
      assertTrue(dateTimeZone2.isFixed());
      assertEquals("UTC", dateTimeZone2.getID());
      assertEquals("UTC", dateTimeZone2.toString());
      assertSame(dateTimeZone2, fixedDateTimeZone0);
      assertNotSame(dateTimeZone2, dateTimeZone1);
      assertFalse(dateTimeZone2.equals((Object)dateTimeZone1));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID("America/Anchorage");
      assertNotNull(cachedDateTimeZone0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      
      long long0 = cachedDateTimeZone0.previousTransition(0L);
      assertEquals((-5749200001L), long0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      
      Object object0 = ((DateTimeZone)cachedDateTimeZone0).writeReplace();
      assertNotNull(object0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      
      DateTimeZone.setDefault(cachedDateTimeZone0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      
      long long1 = cachedDateTimeZone0.adjustOffset((-5749200001L), true);
      assertEquals((-5745600001L), long1);
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertFalse(long1 == long0);
      
      DateTimeUtils.setCurrentMillisFixed((-5749200001L));
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance(gregorianChronology0);
      assertNotNull(strictChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) strictChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals((-5749200001L), dateTime0.getMillis());
      
      boolean boolean0 = cachedDateTimeZone0.UTC.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
      
      Object object1 = ((DateTimeZone)cachedDateTimeZone0).writeReplace();
      assertNotNull(object1);
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      
      ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", zoneInfo0.getID());
      
      long long2 = strictChronology0.add((-5749200001L), (-5749200001L), 243);
      assertEquals((-1402804800244L), long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      
      String string0 = cachedDateTimeZone0.getShortName((-5745600001L), (Locale) null);
      assertEquals("-10:00", string0);
      assertNotNull(string0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      
      // Undeclared exception!
      try { 
        localDateTime0.withDayOfYear((-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -8 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertNotNull(set0);
      assertFalse(set0.isEmpty());
      assertEquals(578, set0.size());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1254, "America/Los_Angeles");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(simpleTimeZone0);
      assertNotNull(dateTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("America/Los_Angeles");
      assertNotNull(dateTimeZone1);
      assertEquals("America/Los_Angeles", dateTimeZone1.toString());
      assertEquals("America/Los_Angeles", dateTimeZone1.getID());
      assertSame(dateTimeZone1, dateTimeZone0);
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertFalse(boolean0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      
      boolean boolean1 = dateTimeZone0.isStandardOffset(365L);
      assertTrue(boolean1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertFalse(boolean1 == boolean0);
      
      Locale locale0 = new Locale("America/Los_Angeles");
      assertNotNull(locale0);
      assertEquals("america/los_angeles", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = dateTimeZone0.getName(365L, locale0);
      assertEquals("-08:00", string0);
      assertNotNull(string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertEquals("america/los_angeles", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertSame(dateTimeZone0, dateTimeZone1);
      
      String string1 = fixedDateTimeZone0.getShortName(365L);
      assertEquals("+00:00", string1);
      assertNotNull(string1);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = fixedDateTimeZone0.getShortName((-727L), locale0);
      assertEquals("+00:00", string2);
      assertNotNull(string2);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("america/los_angeles", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("america/los_angeles", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int0 = dateTimeZone0.getOffsetFromLocal(9223372036854775807L);
      assertEquals((-28378000), int0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=America/Los_Angeles,offset=1254,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("America/Los_Angeles", simpleTimeZone0.getID());
      assertEquals(1254, simpleTimeZone0.getRawOffset());
      assertEquals("America/Los_Angeles", dateTimeZone0.toString());
      assertEquals("America/Los_Angeles", dateTimeZone0.getID());
      assertSame(dateTimeZone0, dateTimeZone1);
      
      String string3 = dateTimeZone1.getName((-1L));
      assertEquals("-08:00", string3);
      assertNotNull(string3);
      assertEquals("America/Los_Angeles", dateTimeZone1.toString());
      assertEquals("America/Los_Angeles", dateTimeZone1.getID());
      assertSame(dateTimeZone1, dateTimeZone0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(30617280288L);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
      
      DateTimeZone.setProvider(provider0);
      int int0 = 240;
      LocalDateTime localDateTime1 = localDateTime0.withYear(240);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      
      try { 
        DateTimeZone.forOffsetHours(86399999);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 86399999
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID("America/Anchorage");
      assertNotNull(cachedDateTimeZone0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      
      long long0 = cachedDateTimeZone0.previousTransition(0L);
      assertEquals((-5749200001L), long0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      
      Object object0 = ((DateTimeZone)cachedDateTimeZone0).writeReplace();
      assertNotNull(object0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      
      long long1 = 100000000000000L;
      DateTimeZone.setDefault(cachedDateTimeZone0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      
      long long2 = cachedDateTimeZone0.convertLocalToUTC((-5749200001L), false);
      assertEquals((-5713200001L), long2);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      DateTimeUtils.setCurrentMillisFixed((-5749200001L));
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset((-5749200001L));
      assertFalse(boolean0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      
      Object object1 = ((DateTimeZone)cachedDateTimeZone0).writeReplace();
      assertNotNull(object1);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertNotSame(object1, object0);
      assertFalse(object1.equals((Object)object0));
      
      ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", zoneInfo0.getID());
      
      String string0 = cachedDateTimeZone0.getShortName((-5713200001L), (Locale) null);
      assertEquals("-10:00", string0);
      assertNotNull(string0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      
      ZoneInfo zoneInfo1 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
      assertNotNull(zoneInfo1);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", zoneInfo1.getID());
      assertNotSame(zoneInfo1, zoneInfo0);
      assertTrue(zoneInfo1.equals((Object)zoneInfo0));
      
      // Undeclared exception!
      try { 
        DateTimeZone.setDefault((DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-1976));
      assertNotNull(dateTimeZone1);
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("-00:00:01.976", dateTimeZone1.toString());
      assertEquals("-00:00:01.976", dateTimeZone1.getID());
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      
      int int0 = dateTimeZone0.UTC.getOffsetFromLocal(1);
      assertEquals(0, int0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      
      TimeZone timeZone0 = dateTimeZone0.toTimeZone();
      assertNotNull(timeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("GMT+01:01", timeZone0.getID());
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = dateTimeZone0.isFixed();
      assertTrue(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      
      DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("GMT+01:01", timeZone0.getID());
      assertEquals("+01:01", dateTimeZone2.getID());
      assertTrue(dateTimeZone2.isFixed());
      assertEquals("+01:01", dateTimeZone2.toString());
      assertSame(dateTimeZone0, dateTimeZone2);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeZone2.equals((Object)dateTimeZone1));
      
      String string0 = dateTimeZone0.getNameKey(0L);
      assertNull(string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertSame(dateTimeZone0, dateTimeZone2);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      
      long long0 = dateTimeZone0.adjustOffset((-2153L), true);
      assertEquals((-2153L), long0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertSame(dateTimeZone0, dateTimeZone2);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      String string1 = dateTimeZone2.getShortName(849L);
      assertEquals("+01:01", string1);
      assertNotNull(string1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+01:01", dateTimeZone0.toString());
      assertEquals("+01:01", dateTimeZone0.getID());
      assertEquals("GMT+01:01", timeZone0.getID());
      assertEquals("+01:01", dateTimeZone2.getID());
      assertTrue(dateTimeZone2.isFixed());
      assertEquals("+01:01", dateTimeZone2.toString());
      assertSame(dateTimeZone0, dateTimeZone2);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertNotSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone2, dateTimeZone0);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertFalse(dateTimeZone2.equals((Object)dateTimeZone1));
      
      DateTimeZone.setNameProvider((NameProvider) null);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone1);
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertSame(dateTimeZone1, dateTimeZone0);
      
      boolean boolean0 = dateTimeZone0.UTC.isFixed();
      assertTrue(boolean0);
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      
      boolean boolean1 = true;
      long long0 = dateTimeZone0.convertLocalToUTC(1594L, true);
      assertEquals((-32398406L), long0);
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long1 = dateTimeZone0.UTC.convertLocalToUTC((-32398406L), true, 2033L);
      assertEquals((-32398406L), long1);
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      assertTrue(long1 == long0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      String string0 = dateTimeZone0.getName((-4937L));
      assertEquals("+09:00", string0);
      assertNotNull(string0);
      assertEquals("Asia/Seoul", dateTimeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone0.toString());
      assertSame(dateTimeZone0, dateTimeZone1);
      
      DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetHoursMinutes(4, 4);
      assertNotNull(dateTimeZone2);
      assertEquals("+04:04", dateTimeZone2.getID());
      assertTrue(dateTimeZone2.isFixed());
      assertEquals("+04:04", dateTimeZone2.toString());
      
      Provider provider0 = DateTimeZone.getProvider();
      assertNotNull(provider0);
      
      int int0 = 292271022;
      // Undeclared exception!
      try { 
        DateTimeZone.forOffsetMillis(292271022);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 292271022
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "millis");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      boolean boolean3 = dateTimeZone0.isFixed();
      assertTrue(boolean3);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("Asia/Seoul");
      assertNotNull(dateTimeZone1);
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      
      NameProvider nameProvider0 = DateTimeZone.getNameProvider();
      assertNotNull(nameProvider0);
      
      boolean boolean4 = dateTimeZone1.UTC.isFixed();
      assertTrue(boolean4);
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      
      DateTimeZone.setNameProvider(nameProvider0);
      DateTimeUtils.setCurrentMillisFixed(9223372036854775807L);
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      
      String string0 = dateTimeZone0.toString();
      assertEquals("UTC", string0);
      assertNotNull(string0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      int int0 = dateTimeZone0.UTC.getOffsetFromLocal(0);
      assertEquals(0, int0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      String string1 = dateTimeZone0.getName((-1475L));
      assertEquals("+00:00", string1);
      assertNotNull(string1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean6 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean6);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      
      String string2 = dateTimeZone1.UTC.getNameKey((-1545L));
      assertEquals("UTC", string2);
      assertNotNull(string2);
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertFalse(string2.equals((Object)string1));
      
      TimeZone timeZone0 = dateTimeZone1.toTimeZone();
      assertNotNull(timeZone0);
      assertEquals("Asia/Seoul", timeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      
      DateTimeZone dateTimeZone2 = DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(dateTimeZone2);
      assertEquals("Asia/Seoul", timeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone2.toString());
      assertEquals("Asia/Seoul", dateTimeZone2.getID());
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone2);
      
      DateTimeZone.setDefault(dateTimeZone1);
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertSame(dateTimeZone1, dateTimeZone2);
      
      DateTimeZone.setDefault(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      
      int int1 = dateTimeZone2.getOffsetFromLocal((-9223372036854775808L));
      assertEquals(30472000, int1);
      assertEquals("Asia/Seoul", timeZone0.getID());
      assertEquals("Asia/Seoul", dateTimeZone2.toString());
      assertEquals("Asia/Seoul", dateTimeZone2.getID());
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertSame(dateTimeZone2, dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone2);
      assertFalse(int1 == int0);
      
      String string3 = dateTimeZone0.getName((long) 0);
      assertEquals("+00:00", string3);
      assertNotNull(string3);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      TimeZone timeZone1 = dateTimeZone1.toTimeZone();
      assertNotNull(timeZone1);
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertEquals("Asia/Seoul", timeZone1.getID());
      assertSame(dateTimeZone1, dateTimeZone2);
      assertNotSame(timeZone1, timeZone0);
      assertTrue(timeZone1.equals((Object)timeZone0));
      
      long long0 = dateTimeZone1.convertLocalToUTC((long) 0, true);
      assertEquals((-32400000L), long0);
      assertEquals("Asia/Seoul", dateTimeZone1.toString());
      assertEquals("Asia/Seoul", dateTimeZone1.getID());
      assertSame(dateTimeZone1, dateTimeZone2);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      Set<String> set0 = uTCProvider0.getAvailableIDs();
      assertNotNull(set0);
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      
      Set<String> set1 = uTCProvider0.getAvailableIDs();
      assertNotNull(set1);
      assertEquals(1, set1.size());
      assertFalse(set1.isEmpty());
      assertNotSame(set1, set0);
      assertTrue(set1.equals((Object)set0));
      
      DateTimeZone.setProvider(uTCProvider0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      DateTimeUtils.setCurrentMillisSystem();
      String string0 = dateTimeZone0.getName(106109248L);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      String string1 = dateTimeZone0.getID();
      assertEquals("UTC", string1);
      assertNotNull(string1);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertFalse(string1.equals((Object)string0));
      
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis(662);
      assertNotNull(dateTimeZone1);
      assertEquals("+00:00:00.662", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.662", dateTimeZone1.getID());
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      
      boolean boolean0 = dateTimeZone1.isStandardOffset((-2752832L));
      assertTrue(boolean0);
      assertEquals("+00:00:00.662", dateTimeZone1.toString());
      assertTrue(dateTimeZone1.isFixed());
      assertEquals("+00:00:00.662", dateTimeZone1.getID());
      assertNotSame(dateTimeZone1, dateTimeZone0);
      assertFalse(dateTimeZone1.equals((Object)dateTimeZone0));
      
      Set<String> set2 = DateTimeZone.getAvailableIDs();
      assertNotNull(set2);
      assertEquals(1, set2.size());
      assertFalse(set2.isEmpty());
      assertTrue(set2.contains(string1));
      assertFalse(set2.contains(string0));
      
      DateTimeZone dateTimeZone2 = DateTimeZone.forOffsetMillis(662);
      assertNotNull(dateTimeZone2);
      assertEquals("+00:00:00.662", dateTimeZone2.toString());
      assertTrue(dateTimeZone2.isFixed());
      assertEquals("+00:00:00.662", dateTimeZone2.getID());
      assertNotSame(dateTimeZone2, dateTimeZone0);
      assertSame(dateTimeZone2, dateTimeZone1);
      assertFalse(dateTimeZone2.equals((Object)dateTimeZone0));
      
      String string2 = dateTimeZone0.getShortName((-996L), locale0);
      assertEquals("+00:00", string2);
      assertNotNull(string2);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotSame(dateTimeZone0, dateTimeZone2);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone2));
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      dateTimeZone0.hashCode();
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertNotSame(dateTimeZone0, dateTimeZone2);
      assertNotSame(dateTimeZone0, dateTimeZone1);
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone2));
      assertFalse(dateTimeZone0.equals((Object)dateTimeZone1));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      dateTimeZone0.getShortName(1L);
      int int0 = (-1928000);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DateTimeZone dateTimeZone1 = DateTimeZone.forOffsetMillis((-1928000));
      dateTimeZone0.getOffsetFromLocal((-35999488L));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LocalDateTime localDateTime0 = new LocalDateTime((long) (-1928000), dateTimeZone0);
      int int1 = 51;
      LocalDateTime localDateTime1 = localDateTime0.minusDays(51);
      LocalDateTime localDateTime2 = localDateTime1.plusMillis((-23));
      int int2 = 1440;
      LocalDateTime localDateTime3 = localDateTime2.minusMillis(1440);
      LocalDateTime localDateTime4 = localDateTime3.withMillisOfDay(51);
      dateTimeZone1.isLocalDateTimeGap(localDateTime4);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(32400000, "UT");
      // Undeclared exception!
      try { 
        DateTimeZone.forTimeZone(simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'UT' is not recognised
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      Seconds seconds0 = Seconds.seconds(3);
      buddhistChronology0.add((ReadablePeriod) seconds0, (long) 3, 3);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      dateTimeZone0.hashCode();
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      Locale locale0 = Locale.FRENCH;
      defaultNameProvider0.getShortName(locale0, "+kr/R*[lZl#NMjI", "GVZ");
      Integer integer0 = new Integer(1);
      DateTimeZone.setNameProvider(defaultNameProvider0);
      String string0 = dateTimeZone0.getName(1635L);
      assertEquals("+00:00", string0);
      assertNotNull(string0);
      
      dateTimeZone0.getOffset((long) 1);
      dateTimeZone0.getStandardOffset(1);
      DateTimeZone.getAvailableIDs();
      DateTimeZone dateTimeZone1 = DateTimeZone.forID("+00:00");
      assertNotNull(dateTimeZone1);
      
      dateTimeZone0.getStandardOffset(1);
      assertSame(dateTimeZone0, dateTimeZone1);
  }
}
