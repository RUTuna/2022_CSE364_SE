/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 07 11:32:14 GMT 2022
 */

package org.apache.commons.math3.util;

import org.junit.Test;
import static org.junit.Assert.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FastMath_ESTest extends FastMath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = FastMath.floor(3.4893601256685762E283);
      assertEquals(3.4893601256685762E283, double0, 0.01);
      
      double double1 = FastMath.exp(3.7072473866919033E-183);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = FastMath.sqrt(3.7072473866919033E-183);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(6.088716931088112E-92, double2, 0.01);
      
      double double3 = FastMath.abs(0.07419405760538333);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.07419405760538333, double3, 0.01);
      
      float float0 = FastMath.nextUp(1623.06F);
      assertEquals(1623.0602F, float0, 0.01F);
      
      double double4 = FastMath.sin(1623.06F);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.9100245640753561, double4, 0.01);
      
      float float1 = FastMath.min((-2933.0F), 1623.0602F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-2933.0F), float1, 0.01F);
      
      int int0 = FastMath.abs(2477);
      assertEquals(2477, int0);
      
      double double5 = FastMath.asin(2477);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      float float2 = FastMath.ulp(1.4E-45F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(1.4E-45F, float2, 0.01F);
      
      double double6 = FastMath.acosh(2477);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(8.50795056930302, double6, 0.01);
      
      double double7 = FastMath.atan2((-509.646871), 0.07419405760538333);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals((-1.5706507474510352), double7, 0.01);
      
      double double8 = FastMath.atanh(8.50795056930302);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      
      double double9 = FastMath.sinh((-2933.0F));
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double9, 0.01);
      
      double double10 = FastMath.nextAfter((-1469.74617605737), 1030.05);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals((-1469.7461760573697), double10, 0.01);
      
      double double11 = FastMath.atanh(0.07419405760538333);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertEquals(double11, double3, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertEquals(0.07433064914731792, double11, 0.01);
      
      double double12 = FastMath.acos(Double.NaN);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertEquals(double12, double8, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertEquals(double12, double5, 0.01);
      assertEquals(Double.NaN, double12, 0.01);
      
      double double13 = FastMath.log1p(0.9100245640753561);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertEquals(0.6471161027482772, double13, 0.01);
      
      double double14 = FastMath.cos(3.965171513035854E23);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertEquals((-0.6518476985002287), double14, 0.01);
      
      double double15 = FastMath.tan((-1.5706507474510352));
      assertNotEquals(double15, double14, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertNotEquals(double15, double3, 0.01);
      assertNotEquals(double15, double13, 0.01);
      assertNotEquals(double15, double10, 0.01);
      assertNotEquals(double15, double4, 0.01);
      assertNotEquals(double15, double0, 0.01);
      assertNotEquals(double15, double6, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertNotEquals(double15, double12, 0.01);
      assertNotEquals(double15, double2, 0.01);
      assertNotEquals(double15, double1, 0.01);
      assertNotEquals(double15, double5, 0.01);
      assertNotEquals(double15, double9, 0.01);
      assertNotEquals(double15, double8, 0.01);
      assertEquals((-6869.106333431848), double15, 0.01);
      
      double double16 = FastMath.cbrt(0.07419405760538333);
      assertNotEquals(double16, double7, 0.01);
      assertNotEquals(double16, double14, 0.01);
      assertNotEquals(double16, double8, 0.01);
      assertNotEquals(double16, double5, 0.01);
      assertNotEquals(double16, double1, 0.01);
      assertNotEquals(double16, double3, 0.01);
      assertNotEquals(double16, double15, 0.01);
      assertNotEquals(double16, double2, 0.01);
      assertNotEquals(double16, double0, 0.01);
      assertNotEquals(double16, double9, 0.01);
      assertNotEquals(double16, double11, 0.01);
      assertNotEquals(double16, double13, 0.01);
      assertNotEquals(double16, double4, 0.01);
      assertNotEquals(double16, double10, 0.01);
      assertNotEquals(double16, double6, 0.01);
      assertNotEquals(double16, double12, 0.01);
      assertEquals(0.4202003156427361, double16, 0.01);
      
      double double17 = FastMath.floor(0.07419405760538333);
      assertNotEquals(double17, double14, 0.01);
      assertNotEquals(double17, double7, 0.01);
      assertEquals(double17, double2, 0.01);
      assertNotEquals(double17, double8, 0.01);
      assertNotEquals(double17, double13, 0.01);
      assertNotEquals(double17, double4, 0.01);
      assertNotEquals(double17, double10, 0.01);
      assertNotEquals(double17, double12, 0.01);
      assertNotEquals(double17, double6, 0.01);
      assertNotEquals(double17, double11, 0.01);
      assertNotEquals(double17, double0, 0.01);
      assertNotEquals(double17, double9, 0.01);
      assertNotEquals(double17, double3, 0.01);
      assertNotEquals(double17, double5, 0.01);
      assertNotEquals(double17, double1, 0.01);
      assertNotEquals(double17, double15, 0.01);
      assertNotEquals(double17, double16, 0.01);
      assertEquals(0.0, double17, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = FastMath.atan2(3444.03838554391, 3444.03838554391);
      assertEquals(0.7853981633974483, double0, 0.01);
      
      double double1 = FastMath.abs(0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ROUND_CEILING";
      stringArray0[1] = "Dd\"a'Ne MvV";
      stringArray0[2] = "";
      FastMath.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      double double2 = FastMath.atan2(0.7853981633974483, 0.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.5707963267948966, double2, 0.01);
      
      double double3 = FastMath.ulp(0.0);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(4.9E-324, double3, 0.01);
      
      long long0 = FastMath.max(0L, 0L);
      assertEquals(0L, long0);
      
      double double4 = FastMath.random();
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      int int0 = FastMath.round((float) 0L);
      assertEquals(0, int0);
      
      double double5 = FastMath.atan(0.0);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = FastMath.ceil(0L);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      double double7 = FastMath.ulp(4.9E-324);
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(4.9E-324, double7, 0.01);
      
      double double8 = FastMath.log10(0.0);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double8, 0.01);
      
      int int1 = FastMath.getExponent(4.9E-324);
      assertFalse(int1 == int0);
      assertEquals((-1023), int1);
      
      double double9 = FastMath.acos(0.0);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(double9, double2, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertEquals(1.5707963267948966, double9, 0.01);
      
      double double10 = FastMath.cos(0.029824241995811462);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertEquals(0.9995552902597226, double10, 0.01);
      
      double double11 = FastMath.sinh(2.499312400817871);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertEquals(6.04598935372285, double11, 0.01);
      
      double double12 = FastMath.random();
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertEquals(0.1, double12, 0.01);
      
      float float0 = FastMath.copySign((float) 0L, 1.4E-45F);
      assertEquals(0.0F, float0, 0.01F);
      
      double double13 = FastMath.log(4.9E-324);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertEquals((-744.4400719213812), double13, 0.01);
      
      double double14 = FastMath.floor(6.191247522703296E-125);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertEquals(double14, double7, 0.01);
      assertEquals(double14, double1, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertEquals(double14, double4, 0.01);
      assertEquals(double14, double5, 0.01);
      assertEquals(double14, double3, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertEquals(double14, double6, 0.01);
      assertEquals(0.0, double14, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = FastMath.pow((-1.7168146928204135), (-1742.4));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = FastMath.hypot((-1742.4), (-1742.4));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2464.125711078881, double1, 0.01);
      
      double double2 = FastMath.expm1(0.4518963694572449);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.5712891065971515, double2, 0.01);
      
      int int0 = FastMath.getExponent((-1742.4));
      assertEquals(10, int0);
      
      double double3 = FastMath.toRadians((-1742.4));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals((-30.4106168867492), double3, 0.01);
      
      double double4 = FastMath.nextAfter(0.5712891065971515, (-1742.4));
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(0.5712891065971514, double4, 0.01);
      
      double double5 = FastMath.rint(1.5);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(2.0, double5, 0.01);
      
      double double6 = FastMath.max(Double.NaN, (-2610.3942851883));
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = FastMath.IEEEremainder(1.5, 10);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(1.5, double7, 0.01);
      
      float float0 = FastMath.nextUp((-2290.626F));
      assertEquals((-2290.6257F), float0, 0.01F);
      
      double double8 = FastMath.toDegrees(2755.3208127486855);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertEquals(157868.25377505546, double8, 0.01);
      
      float float1 = FastMath.abs((float) 10);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(10.0F, float1, 0.01F);
      
      double double9 = FastMath.atanh(1631.7761686399929);
      assertNotEquals(double9, double1, 0.01);
      assertEquals(double9, double0, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertEquals(double9, double6, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
      
      double double10 = FastMath.exp(5.856589221771548E-8);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals(1.000000058565894, double10, 0.01);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = FastMath.nextAfter((-2347.33), (-2347.33));
      assertEquals((-2347.33), double0, 0.01);
      
      double double1 = FastMath.sinh((-2347.33));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
      
      long long0 = FastMath.min((-1105L), (-1961L));
      assertEquals((-1961L), long0);
      
      double double2 = FastMath.expm1((-1105L));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-1.0), double2, 0.01);
      
      float float0 = FastMath.max((float) (-1961L), (-745.9F));
      assertEquals((-745.9F), float0, 0.01F);
      
      double double3 = FastMath.min(4819.749433828, (-1.0));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals((-1.0), double3, 0.01);
      
      double double4 = FastMath.abs((double) (-1961L));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(1961.0, double4, 0.01);
      
      double double5 = FastMath.log(0.0);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double5, 0.01);
      
      double double6 = FastMath.toRadians((-2347.33));
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals((-40.968637130838495), double6, 0.01);
      
      long long1 = FastMath.round((-2343.31));
      assertFalse(long1 == long0);
      assertEquals((-2343L), long1);
      
      double double7 = FastMath.asin((-1.0));
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals((-1.5707963267948966), double7, 0.01);
      
      double double8 = FastMath.sinh(1.3083870531380308E144);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double8, 0.01);
      
      float float1 = FastMath.min((-745.9F), 0.0F);
      assertEquals(float1, float0, 0.01F);
      assertEquals((-745.9F), float1, 0.01F);
      
      float float2 = FastMath.copySign(0.0F, 0.0F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      double double9 = FastMath.exp((-2347.33));
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(0.0, double9, 0.01);
      
      double double10 = FastMath.sin((-1.5707963267948966));
      assertEquals(double10, double2, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertEquals(double10, double3, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals((-1.0), double10, 0.01);
      
      double double11 = FastMath.log10(2.0);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertEquals(0.3010299956639812, double11, 0.01);
      
      double double12 = FastMath.sqrt((-194.09334191));
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertEquals(Double.NaN, double12, 0.01);
      
      int int0 = FastMath.abs(2045);
      assertEquals(2045, int0);
      
      double double13 = FastMath.atan2(4694.97504, (-872.58380361586));
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertEquals(1.7545545113204266, double13, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = FastMath.sinh((-546.0025517));
      assertEquals((-6.681366769587972E236), double0, 0.01);
      
      double double1 = FastMath.tanh((-6.681366769587972E236));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.0), double1, 0.01);
      
      long long0 = FastMath.abs(0L);
      assertEquals(0L, long0);
      
      double double2 = FastMath.acos((-1.0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(3.141592653589793, double2, 0.01);
      
      double double3 = FastMath.rint((-546.0025517));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals((-546.0), double3, 0.01);
      
      float float0 = FastMath.nextUp((float) 0L);
      assertEquals(1.4E-45F, float0, 0.01F);
      
      double double4 = FastMath.rint(0.0);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = FastMath.acos(0.49999999999999994);
      assertEquals(1.0471975511965979, double0, 0.01);
      
      double double1 = FastMath.toDegrees(1.0471975511965979);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(60.00000000000001, double1, 0.01);
      
      double double2 = FastMath.nextAfter(60.00000000000001, 0.49999999999999994);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(60.0, double2, 0.01);
      
      int int0 = FastMath.EXP_FRAC_TABLE_LEN;
      assertEquals(1025, int0);
      
      double double3 = FastMath.toDegrees(60.00000000000001);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(3437.7467707849396, double3, 0.01);
      
      double double4 = FastMath.toRadians(3437.7467707849396);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(60.00000000000001, double4, 0.01);
      
      double double5 = FastMath.log10(60.00000000000001);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(1.7781512503836436, double5, 0.01);
      
      double double6 = FastMath.acos(60.00000000000001);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      int int1 = FastMath.getExponent(60.00000000000001);
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      float float0 = FastMath.nextUp((float) (-3286));
      assertEquals((-3285.9998F), float0, 0.01F);
      
      double double7 = FastMath.atan2(284.718327, 1025);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(0.2709433223399949, double7, 0.01);
      
      double double8 = FastMath.abs(0.12470348179340363);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(0.12470348179340363, double8, 0.01);
      
      double double9 = FastMath.asin(1025);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(double9, double6, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
      
      double double10 = FastMath.floor(3437.7467707849396);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals(3437.0, double10, 0.01);
      
      int int2 = FastMath.round((float) 1025);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1025, int2);
      
      double double11 = FastMath.cos((-102.74303095));
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertEquals((-0.5982133873683622), double11, 0.01);
      
      double double12 = FastMath.toDegrees(Double.NaN);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertEquals(double12, double9, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertEquals(double12, double6, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertEquals(Double.NaN, double12, 0.01);
      
      double double13 = FastMath.asin(Double.NaN);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertEquals(double13, double12, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertEquals(double13, double9, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertEquals(double13, double6, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertEquals(Double.NaN, double13, 0.01);
      
      double double14 = FastMath.ceil(0.49999999999999994);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertEquals(1.0, double14, 0.01);
      
      double double15 = FastMath.log1p(Double.NaN);
      assertNotEquals(double15, double8, 0.01);
      assertNotEquals(double15, double0, 0.01);
      assertNotEquals(double15, double10, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertNotEquals(double15, double2, 0.01);
      assertNotEquals(double15, double5, 0.01);
      assertNotEquals(double15, double14, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertNotEquals(double15, double4, 0.01);
      assertNotEquals(double15, double3, 0.01);
      assertEquals(double15, double6, 0.01);
      assertEquals(double15, double13, 0.01);
      assertEquals(double15, double12, 0.01);
      assertEquals(double15, double9, 0.01);
      assertNotEquals(double15, double1, 0.01);
      assertEquals(Double.NaN, double15, 0.01);
      
      double double16 = FastMath.signum(Double.NaN);
      assertEquals(double16, double15, 0.01);
      assertNotEquals(double16, double7, 0.01);
      assertNotEquals(double16, double2, 0.01);
      assertNotEquals(double16, double0, 0.01);
      assertNotEquals(double16, double10, 0.01);
      assertNotEquals(double16, double1, 0.01);
      assertNotEquals(double16, double4, 0.01);
      assertEquals(double16, double12, 0.01);
      assertNotEquals(double16, double5, 0.01);
      assertEquals(double16, double9, 0.01);
      assertNotEquals(double16, double11, 0.01);
      assertNotEquals(double16, double8, 0.01);
      assertEquals(double16, double6, 0.01);
      assertNotEquals(double16, double3, 0.01);
      assertEquals(double16, double13, 0.01);
      assertNotEquals(double16, double14, 0.01);
      assertEquals(Double.NaN, double16, 0.01);
      
      double double17 = FastMath.ulp((-1082.0));
      assertNotEquals(double17, double8, 0.01);
      assertNotEquals(double17, double12, 0.01);
      assertNotEquals(double17, double13, 0.01);
      assertNotEquals(double17, double15, 0.01);
      assertNotEquals(double17, double3, 0.01);
      assertNotEquals(double17, double4, 0.01);
      assertNotEquals(double17, double11, 0.01);
      assertNotEquals(double17, double0, 0.01);
      assertNotEquals(double17, double10, 0.01);
      assertNotEquals(double17, double9, 0.01);
      assertNotEquals(double17, double7, 0.01);
      assertNotEquals(double17, double6, 0.01);
      assertNotEquals(double17, double14, 0.01);
      assertNotEquals(double17, double2, 0.01);
      assertNotEquals(double17, double1, 0.01);
      assertNotEquals(double17, double5, 0.01);
      assertNotEquals(double17, double16, 0.01);
      assertEquals(2.2737367544323206E-13, double17, 0.01);
      
      double double18 = FastMath.sinh((-709.782712893384));
      assertNotEquals(double18, double9, 0.01);
      assertNotEquals(double18, double15, 0.01);
      assertNotEquals(double18, double14, 0.01);
      assertNotEquals(double18, double11, 0.01);
      assertNotEquals(double18, double17, 0.01);
      assertNotEquals(double18, double3, 0.01);
      assertNotEquals(double18, double8, 0.01);
      assertNotEquals(double18, double12, 0.01);
      assertNotEquals(double18, double6, 0.01);
      assertNotEquals(double18, double13, 0.01);
      assertNotEquals(double18, double7, 0.01);
      assertNotEquals(double18, double2, 0.01);
      assertNotEquals(double18, double0, 0.01);
      assertNotEquals(double18, double10, 0.01);
      assertNotEquals(double18, double1, 0.01);
      assertNotEquals(double18, double4, 0.01);
      assertNotEquals(double18, double5, 0.01);
      assertNotEquals(double18, double16, 0.01);
      assertEquals((-8.988465674311366E307), double18, 0.01);
      
      double double19 = FastMath.scalb(3.145894820876798E-6, 1025);
      assertNotEquals(double19, double16, 0.01);
      assertNotEquals(double19, double0, 0.01);
      assertNotEquals(double19, double10, 0.01);
      assertNotEquals(double19, double5, 0.01);
      assertNotEquals(double19, double1, 0.01);
      assertNotEquals(double19, double4, 0.01);
      assertNotEquals(double19, double12, 0.01);
      assertNotEquals(double19, double8, 0.01);
      assertNotEquals(double19, double6, 0.01);
      assertNotEquals(double19, double13, 0.01);
      assertNotEquals(double19, double14, 0.01);
      assertNotEquals(double19, double15, 0.01);
      assertNotEquals(double19, double7, 0.01);
      assertNotEquals(double19, double11, 0.01);
      assertNotEquals(double19, double17, 0.01);
      assertNotEquals(double19, double3, 0.01);
      assertNotEquals(double19, double2, 0.01);
      assertNotEquals(double19, double18, 0.01);
      assertNotEquals(double19, double9, 0.01);
      assertEquals(1.131070704497827E303, double19, 0.01);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = FastMath.copySign(0.0, 7.549789948768648E-8);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = FastMath.scalb(7.549789948768648E-8, 12);
      assertEquals(double1, double0, 0.01);
      assertEquals(3.0923939630156383E-4, double1, 0.01);
      
      double double2 = FastMath.atanh((-1077.354078971));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = FastMath.hypot(0.0, 984.6494689);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(984.6494689, double3, 0.01);
      
      double double4 = FastMath.pow(Double.NaN, 984.6494689);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = FastMath.nextUp(0.0);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(4.9E-324, double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = FastMath.nextAfter((-3.7999795083850525E-8), 182.0);
      assertEquals((-3.799979508385052E-8), double0, 0.01);
      
      double double1 = FastMath.nextAfter((-7.25680516883106E-8), 1651.3244102255098);
      assertEquals(double1, double0, 0.01);
      assertEquals((-7.256805168831058E-8), double1, 0.01);
      
      float float0 = FastMath.scalb((-119.61F), 141);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      
      float float1 = FastMath.min((-1.0F), (-119.61F));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-119.61F), float1, 0.01F);
      
      double double2 = FastMath.atan2((-3.4028234663852886E38), 5447.82);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-1.5707963267948966), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = FastMath.acos((-2914.09));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = FastMath.sqrt(Double.NaN);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = FastMath.cosh((-2914.09));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      double double3 = FastMath.nextAfter((-3.7999795083850525E-8), 182.0);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-3.799979508385052E-8), double3, 0.01);
      
      double double4 = FastMath.nextAfter((-7.25680516883106E-8), 1650.97);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals((-7.256805168831058E-8), double4, 0.01);
      
      float float0 = FastMath.scalb((-1.4E-45F), 141);
      assertEquals((-0.00390625F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = FastMath.acosh((-241.4301651657875));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = FastMath.toRadians(Double.NaN);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      float float0 = FastMath.scalb(1001.3F, 256);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      float float1 = FastMath.abs((float) 256);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(256.0F, float1, 0.01F);
      
      float float2 = FastMath.nextAfter(2445.33F, (-1.3862982541468227E-4));
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(2445.3298F, float2, 0.01F);
      
      double double2 = FastMath.tanh((-1842.0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-1.0), double2, 0.01);
      
      double double3 = FastMath.pow((double) Float.POSITIVE_INFINITY, 1.75879225876483E-25);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01);
      
      float float3 = FastMath.nextUp(1432.0F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(1432.0001F, float3, 0.01F);
      
      double double4 = FastMath.nextUp((-1614.11011));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals((-1614.1101099999998), double4, 0.01);
      
      double double5 = FastMath.scalb(981.4903142417021, 256);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(1.1364881405223668E80, double5, 0.01);
      
      double double6 = FastMath.pow(1.5707963267948966, 1.5707963267948966);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(2.032658322210728, double6, 0.01);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double double0 = FastMath.log1p(0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = FastMath.ulp(0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(4.9E-324, double1, 0.01);
      
      float float0 = FastMath.ulp(0.0F);
      assertEquals(1.4E-45F, float0, 0.01F);
      
      double double2 = FastMath.atan(4.9E-324);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(4.9E-324, double2, 0.01);
      
      double double3 = FastMath.nextUp((-293.949943));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals((-293.94994299999996), double3, 0.01);
      
      int int0 = FastMath.min(1553, 1553);
      assertEquals(1553, int0);
      
      double double4 = FastMath.acos(4.9E-324);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(1.5707963267948966, double4, 0.01);
      
      int int1 = FastMath.getExponent((-293.949943));
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      
      long long0 = FastMath.min((-712L), (-712L));
      assertEquals((-712L), long0);
      
      int int2 = FastMath.max((-1586), 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      double double5 = FastMath.asinh(1446.0);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(7.969703702843456, double5, 0.01);
      
      double double6 = FastMath.log(0.0);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double6, 0.01);
      
      int int3 = FastMath.abs(68);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(68, int3);
      
      float float1 = FastMath.signum((float) 1553);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      
      int int4 = FastMath.getExponent((-293.94994299999996));
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(8, int4);
      
      double double7 = FastMath.copySign(0.0, 0.0);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(0.0, double7, 0.01);
      
      float float2 = FastMath.signum((float) 1553);
      assertEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(1.0F, float2, 0.01F);
      
      double double8 = FastMath.max((-2022.270281490076), 4.464279133463661E-201);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double7, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(4.464279133463661E-201, double8, 0.01);
      
      double double9 = FastMath.toRadians((-1142.720016201975));
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals((-19.944226711167413), double9, 0.01);
      
      double double10 = FastMath.signum((double) 0.0F);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals(double10, double1, 0.01);
      assertEquals(double10, double8, 0.01);
      assertEquals(double10, double0, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertEquals(double10, double2, 0.01);
      assertEquals(double10, double7, 0.01);
      assertEquals(0.0, double10, 0.01);
      
      double double11 = FastMath.abs(1.5748463788034308E-137);
      assertEquals(double11, double1, 0.01);
      assertEquals(double11, double2, 0.01);
      assertEquals(double11, double7, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertEquals(double11, double10, 0.01);
      assertEquals(double11, double0, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertEquals(double11, double8, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertEquals(1.5748463788034308E-137, double11, 0.01);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = FastMath.nextAfter(4.537273754534966E121, 0.003);
      assertEquals(4.537273754534965E121, double0, 0.01);
      
      float float0 = FastMath.nextAfter((-447.3002F), 4819.749433828);
      assertEquals((-447.30017F), float0, 0.01F);
      
      float float1 = FastMath.nextUp((-1.4E-45F));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(-0.0F, float1, 0.01F);
      
      float float2 = FastMath.max((-1.0F), 1542.9F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(1542.9F, float2, 0.01F);
      
      double double1 = FastMath.random();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = FastMath.tan(1542.9F);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.39713197760346647, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = FastMath.atanh(1.126528263092041);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = FastMath.cbrt((-2655.900229));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-13.8485377369884), double1, 0.01);
      
      double double2 = FastMath.atan(0.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = FastMath.hypot(2856.38397528, (-2655.900229));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(3900.350681751402, double3, 0.01);
      
      double double4 = FastMath.pow((-13.8485377369884), 2223);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = FastMath.sinh(Double.NaN);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      float float0 = FastMath.nextUp((float) 2223);
      assertEquals(2223.0002F, float0, 0.01F);
      
      long long0 = FastMath.abs(0L);
      assertEquals(0L, long0);
      
      float float1 = FastMath.max((float) 0L, 0.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      int int0 = FastMath.getExponent(2223.0002F);
      assertEquals(11, int0);
      
      double double6 = FastMath.cosh(Double.NaN);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = FastMath.cbrt(1.0E-6);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(0.01, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = FastMath.min(1.4093490364499379E22, 1.4093490364499379E22);
      assertEquals(1.4093490364499379E22, double0, 0.01);
      
      float float0 = FastMath.copySign(909.8867F, 909.8867F);
      assertEquals(909.8867F, float0, 0.01F);
      
      double double1 = FastMath.cos(1.4093490364499379E22);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.35379157461393984, double1, 0.01);
      
      double double2 = FastMath.acosh((-0.49999999999999994));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = FastMath.sin(0.35379157461393984);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.3464570358996461, double3, 0.01);
      
      double double4 = FastMath.tan(0.35379157461393984);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(0.369331256627042, double4, 0.01);
      
      double double5 = FastMath.log(0.0);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double5, 0.01);
      
      double double6 = FastMath.ceil(1.4093490364499379E22);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(1.4093490364499379E22, double6, 0.01);
      
      double double7 = FastMath.toDegrees((-1452.0));
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals((-83193.47185299553), double7, 0.01);
      
      long long0 = FastMath.max(2992L, 2992L);
      assertEquals(2992L, long0);
      
      double double8 = FastMath.floor(0.0);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(0.0, double8, 0.01);
      
      int int0 = FastMath.round(909.8867F);
      assertEquals(910, int0);
      
      double double9 = FastMath.rint(0.0);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(double9, double8, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(0.0, double9, 0.01);
      
      int int1 = FastMath.round((float) 910);
      assertTrue(int1 == int0);
      assertEquals(910, int1);
      
      float float1 = FastMath.min(0.0F, 909.8867F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      double double10 = FastMath.pow((-3242.09063512), (-582));
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals(double10, double8, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(double10, double9, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertEquals(0.0, double10, 0.01);
      
      double double11 = FastMath.pow((-1420.97), 1425);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertEquals(double11, double2, 0.01);
      assertEquals(Double.NaN, double11, 0.01);
      
      double double12 = FastMath.abs(0.0);
      assertNotEquals(double12, double2, 0.01);
      assertEquals(double12, double10, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertEquals(double12, double8, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertEquals(double12, double9, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertEquals(0.0, double12, 0.01);
      
      long long1 = FastMath.round((double) 0.0F);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      double double13 = FastMath.hypot(0.0, 0.35379157461393984);
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertEquals(double13, double3, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertEquals(double13, double1, 0.01);
      assertEquals(0.35379157461393984, double13, 0.01);
      
      double double14 = FastMath.log1p(0.0);
      assertNotEquals(double14, double3, 0.01);
      assertEquals(double14, double12, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertEquals(double14, double8, 0.01);
      assertEquals(double14, double9, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertEquals(double14, double10, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertEquals(0.0, double14, 0.01);
      
      double double15 = FastMath.acos(910);
      assertNotEquals(double15, double3, 0.01);
      assertNotEquals(double15, double12, 0.01);
      assertNotEquals(double15, double10, 0.01);
      assertNotEquals(double15, double4, 0.01);
      assertNotEquals(double15, double9, 0.01);
      assertEquals(double15, double2, 0.01);
      assertNotEquals(double15, double6, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertNotEquals(double15, double0, 0.01);
      assertEquals(double15, double11, 0.01);
      assertNotEquals(double15, double14, 0.01);
      assertNotEquals(double15, double8, 0.01);
      assertNotEquals(double15, double1, 0.01);
      assertNotEquals(double15, double5, 0.01);
      assertNotEquals(double15, double13, 0.01);
      assertEquals(Double.NaN, double15, 0.01);
      
      double double16 = FastMath.min(0.0, 2396.08);
      assertNotEquals(double16, double2, 0.01);
      assertEquals(double16, double8, 0.01);
      assertNotEquals(double16, double13, 0.01);
      assertNotEquals(double16, double0, 0.01);
      assertNotEquals(double16, double3, 0.01);
      assertNotEquals(double16, double6, 0.01);
      assertEquals(double16, double14, 0.01);
      assertEquals(double16, double10, 0.01);
      assertNotEquals(double16, double15, 0.01);
      assertNotEquals(double16, double5, 0.01);
      assertNotEquals(double16, double1, 0.01);
      assertEquals(double16, double12, 0.01);
      assertNotEquals(double16, double4, 0.01);
      assertEquals(double16, double9, 0.01);
      assertNotEquals(double16, double11, 0.01);
      assertNotEquals(double16, double7, 0.01);
      assertEquals(0.0, double16, 0.01);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = FastMath.acosh(0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = FastMath.tanh(0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = FastMath.cbrt(0.0);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = FastMath.cos(0.0);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1.0, double3, 0.01);
      
      double double4 = FastMath.tanh(0.0);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = FastMath.ceil(1.0);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(1.0, double5, 0.01);
      
      double double6 = FastMath.abs(1.9219114780426025);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(1.9219114780426025, double6, 0.01);
      
      double double7 = FastMath.sqrt((-2082.80405837593));
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      int int0 = FastMath.round((-1.0F));
      assertEquals((-1), int0);
      
      double double8 = FastMath.random();
      assertEquals(double8, double4, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(0.0, double8, 0.01);
      
      double double9 = FastMath.toDegrees((-5.500631513861575E-10));
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertEquals(double9, double1, 0.01);
      assertEquals(double9, double8, 0.01);
      assertEquals(double9, double2, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals((-3.15162970400925E-8), double9, 0.01);
      
      long long0 = FastMath.abs((-1636L));
      assertEquals(1636L, long0);
      
      int int1 = FastMath.round((-1.0F));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      float float0 = FastMath.signum(Float.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
      
      double double10 = FastMath.acos(3.6769498759522324E-8);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(1.5707962900253978, double10, 0.01);
      
      double double11 = FastMath.asin(179.4413);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertEquals(double11, double7, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertEquals(double11, double0, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertEquals(Double.NaN, double11, 0.01);
      
      int int2 = FastMath.max((-1), 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      double double12 = FastMath.tanh((-3.5997360512765566E-9));
      assertEquals(double12, double4, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertEquals(double12, double9, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertEquals(double12, double8, 0.01);
      assertEquals(double12, double1, 0.01);
      assertEquals(double12, double2, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertEquals((-3.5997360512765566E-9), double12, 0.01);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float float0 = FastMath.min(272.584F, 2646.073F);
      assertEquals(272.584F, float0, 0.01F);
      
      double double0 = FastMath.tanh(272.584F);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = FastMath.toRadians(272.584F);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4.757488548180746, double1, 0.01);
      
      long long0 = FastMath.round(357.0);
      assertEquals(357L, long0);
      
      double double2 = FastMath.atan((-0.7853981633974483));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-0.6657737500283538), double2, 0.01);
      
      long long1 = FastMath.abs(1848L);
      assertFalse(long1 == long0);
      assertEquals(1848L, long1);
      
      double double3 = FastMath.tan((-7908.93249482808));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-37.01351993391564), double3, 0.01);
      
      double double4 = FastMath.log(0.49999999999999994);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals((-0.6931471805599454), double4, 0.01);
      
      double double5 = FastMath.asinh((-1.7976931348623157E308));
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double5, 0.01);
      
      double double6 = FastMath.ulp(2344.28845669);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(4.547473508864641E-13, double6, 0.01);
      
      double double7 = FastMath.ulp((-1.7976931348623157E308));
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(1.9958403095347198E292, double7, 0.01);
      
      double double8 = FastMath.max((-0.7853981633974483), 0.0);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(double8, double6, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(0.0, double8, 0.01);
      
      float float1 = FastMath.abs(0.5F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.5F, float1, 0.01F);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "nV*[7yv5[[";
      stringArray0[1] = "org.apache.commons.math3.exception.MathIllegalArgumentException";
      stringArray0[2] = "";
      stringArray0[3] = "";
      FastMath.main(stringArray0);
      assertEquals(4, stringArray0.length);
      
      double double9 = FastMath.cos(272.584F);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals((-0.7421351437948078), double9, 0.01);
      
      double double10 = FastMath.cosh((-0.6931471805599454));
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertEquals(1.25, double10, 0.01);
      
      // Undeclared exception!
      FastMath.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = FastMath.floor((-425.64023));
      assertEquals((-426.0), double0, 0.01);
      
      double double1 = FastMath.exp(0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = FastMath.abs(1.0);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      double double3 = FastMath.log((-1046.704757962), (-426.0));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      int int0 = FastMath.abs(22);
      assertEquals(22, int0);
      
      double double4 = FastMath.tanh((-425.64023));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals((-1.0), double4, 0.01);
      
      double double5 = FastMath.signum(0.0);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = FastMath.nextAfter(0.0, (-2994.0));
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals((-4.9E-324), double6, 0.01);
      
      double double7 = FastMath.signum((-4.9E-324));
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals((-1.0), double7, 0.01);
      
      double double8 = FastMath.max(1824.8817865, (double) 22);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(1824.8817865, double8, 0.01);
      
      double double9 = FastMath.scalb(0.1256551444530487, 22);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(527035.875, double9, 0.01);
      
      double double10 = FastMath.asin((-1046.704757962));
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(double10, double3, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertEquals(Double.NaN, double10, 0.01);
      
      double double11 = FastMath.ulp((-4.9E-324));
      assertEquals(double11, double6, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertEquals(double11, double5, 0.01);
      assertEquals(4.9E-324, double11, 0.01);
      
      double double12 = FastMath.atan2((-2994.0), 4.877860620031438E147);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertEquals(double12, double11, 0.01);
      assertEquals(double12, double5, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertEquals(double12, double6, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertEquals((-6.1379367579812145E-145), double12, 0.01);
      
      double double13 = FastMath.sqrt(4.877860620031438E147);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertEquals(6.98416825400952E73, double13, 0.01);
      
      double double14 = FastMath.ulp((-936.034102119124));
      assertEquals(double14, double5, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertEquals(double14, double12, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertEquals(double14, double11, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertEquals(double14, double6, 0.01);
      assertEquals(1.1368683772161603E-13, double14, 0.01);
      
      float float0 = FastMath.ulp((float) 22);
      assertEquals(1.9073486E-6F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = FastMath.rint((-1.1368933260611668E-7));
      assertEquals(-0.0, double0, 0.01);
      
      double double1 = FastMath.asin((-1.1368933260611668E-7));
      assertEquals(double1, double0, 0.01);
      assertEquals((-1.1368933260611693E-7), double1, 0.01);
      
      double double2 = FastMath.min((-1.1368933260611668E-7), 0.0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals((-1.1368933260611668E-7), double2, 0.01);
      
      double double3 = FastMath.nextUp((-1.1368933260611668E-7));
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals((-1.1368933260611667E-7), double3, 0.01);
      
      long long0 = FastMath.min((-3565L), (-3565L));
      assertEquals((-3565L), long0);
      
      double double4 = FastMath.tanh(0.0);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = FastMath.cosh((-1.1368933260611668E-7));
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(1.0000000000000064, double5, 0.01);
      
      double double6 = FastMath.hypot((-3565L), 1.0000000000000064);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(3565.0001402524517, double6, 0.01);
      
      double double7 = FastMath.expm1(0.0);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(0.0, double7, 0.01);
      
      float float0 = FastMath.min((float) (-3565L), (-1260.25F));
      assertEquals((-3565.0F), float0, 0.01F);
      
      double double8 = FastMath.ulp(0.9974949359893799);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double7, 0.01);
      assertEquals(double8, double4, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(1.1102230246251565E-16, double8, 0.01);
      
      double double9 = FastMath.sinh(1349.76391317055);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double9, 0.01);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = FastMath.acosh((-3.141592653589793));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = FastMath.cos((-3.141592653589793));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.0), double1, 0.01);
      
      double double2 = FastMath.signum(0.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = FastMath.cosh(0.0);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(1.0, double3, 0.01);
      
      double double4 = FastMath.IEEEremainder((-1707.521), 0.6409968137741089);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.09451189422611606, double4, 0.01);
      
      double double5 = FastMath.cos(0.7937005259840998);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(0.701211821723673, double5, 0.01);
      
      double double6 = FastMath.log(0.7937005259840998, 0.7937005259840998);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(1.0, double6, 0.01);
      
      double double7 = FastMath.ceil(0.0);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(0.0, double7, 0.01);
      
      float float0 = FastMath.nextAfter((-3.4028235E38F), 4774.2641699099);
      assertEquals((-3.4028233E38F), float0, 0.01F);
      
      int int0 = FastMath.max(0, 0);
      assertEquals(0, int0);
      
      double double8 = FastMath.toDegrees((-3.4028235E38F));
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals((-1.9496742305195398E40), double8, 0.01);
      
      float float1 = FastMath.max((-3.4028235E38F), (-3.4028235E38F));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      
      double double9 = FastMath.rint((-3.4028233E38F));
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals((-3.4028232635611926E38), double9, 0.01);
      
      int int1 = FastMath.getExponent(0.0F);
      assertFalse(int1 == int0);
      assertEquals((-127), int1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = FastMath.exp((-729.2907139));
      assertEquals(1.875285E-317, double0, 0.01);
      
      double double1 = FastMath.nextAfter((-729.2907139), 1.875285E-317);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-729.2907138999999), double1, 0.01);
      
      double double2 = FastMath.acosh((-729.2907139));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = FastMath.abs((-6.461509354879894E29));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(6.461509354879894E29, double3, 0.01);
      
      double double4 = FastMath.ulp((-729.2907139));
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(1.1368683772161603E-13, double4, 0.01);
      
      float float0 = FastMath.max(0.0F, 1542.9F);
      assertEquals(1542.9F, float0, 0.01F);
      
      float float1 = FastMath.min(0.0F, 0.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      double double5 = FastMath.cosh(1.875285E-317);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(1.0, double5, 0.01);
      
      double double6 = FastMath.hypot((-3370.7164471), 1270.2685155);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(3602.1259650685483, double6, 0.01);
      
      double double7 = FastMath.min((-2.6437112632041807E-8), (double) 1542.9F);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals((-2.6437112632041807E-8), double7, 0.01);
      
      double double8 = FastMath.asinh((-1338.7112847621));
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals((-7.892610022455918), double8, 0.01);
      
      long long0 = FastMath.max(0L, 0L);
      assertEquals(0L, long0);
      
      double double9 = FastMath.acos(4652.0);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertEquals(double9, double2, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
      
      long long1 = FastMath.abs(0L);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = FastMath.abs(2398);
      assertEquals(2398, int0);
      
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = FastMath.log1p(2398);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(7.782807262839695, double1, 0.01);
      
      double double2 = FastMath.expm1(3.6725170580355583E-9);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(3.672517064779249E-9, double2, 0.01);
      
      float float0 = FastMath.min((float) 2398, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      double double3 = FastMath.pow((-0.25), (double) 2398);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = FastMath.IEEEremainder((-2148.0312334909627), (-256.0));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals((-100.03123349096268), double4, 0.01);
      
      int int1 = FastMath.round(0.0F);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = FastMath.tanh(0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = FastMath.rint(0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = FastMath.copySign(0.0, 0.0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = FastMath.toDegrees(0.0);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = FastMath.max(0.0, 0.04168701738764507);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(0.04168701738764507, double4, 0.01);
      
      double double5 = FastMath.expm1(0.0);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = FastMath.atanh(0.0);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      int int0 = FastMath.round((-1514.298F));
      assertEquals((-1514), int0);
      
      float float0 = FastMath.max((-581.4F), (-581.4F));
      assertEquals((-581.4F), float0, 0.01F);
      
      float float1 = FastMath.copySign((-1.0F), 0.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      
      double double7 = FastMath.nextUp(2838.99165178);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(2838.9916517800007, double7, 0.01);
      
      double double8 = FastMath.random();
      assertEquals(double8, double5, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double0, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double6, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(0.0, double8, 0.01);
      
      double double9 = FastMath.toRadians(0.0);
      assertNotEquals(double9, double7, 0.01);
      assertEquals(double9, double5, 0.01);
      assertEquals(double9, double3, 0.01);
      assertEquals(double9, double0, 0.01);
      assertEquals(double9, double2, 0.01);
      assertEquals(double9, double8, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(double9, double1, 0.01);
      assertEquals(0.0, double9, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      double double0 = FastMath.cosh((-1387.9155845742905));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      float float0 = FastMath.signum(2451.211F);
      assertEquals(1.0F, float0, 0.01F);
      
      double double1 = FastMath.floor(156.46753);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(156.0, double1, 0.01);
      
      float float1 = FastMath.copySign(Float.POSITIVE_INFINITY, (-365.329F));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      
      long long0 = FastMath.min((-1446L), 0L);
      assertEquals((-1446L), long0);
      
      float float2 = FastMath.nextUp((float) (-1446L));
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-1445.9999F), float2, 0.01F);
      
      double double2 = FastMath.abs(0.018384650349617004);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.018384650349617004, double2, 0.01);
      
      double double3 = FastMath.cbrt(Float.POSITIVE_INFINITY);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01);
      
      double double4 = FastMath.tan(Float.NEGATIVE_INFINITY);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      int int0 = FastMath.getExponent((float) (-1446L));
      assertEquals(10, int0);
      
      float float3 = FastMath.nextUp(0.0F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(1.4E-45F, float3, 0.01F);
      
      double double5 = FastMath.log((double) (-1446L));
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      String[] stringArray0 = new String[0];
      FastMath.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double double6 = FastMath.toRadians(0.0F);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      float float4 = FastMath.nextUp(2451.211F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertEquals(2451.2112F, float4, 0.01F);
      
      double double7 = FastMath.sin(Double.POSITIVE_INFINITY);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      float float5 = FastMath.scalb((-99.37561F), 10);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float0, 0.01F);
      assertEquals((-101760.625F), float5, 0.01F);
      
      double double8 = FastMath.atan((-462.0160481));
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals((-1.568631903194168), double8, 0.01);
      
      long long1 = FastMath.min(0L, 3581L);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      double double0 = FastMath.copySign(967.66, 967.66);
      assertEquals(967.66, double0, 0.01);
      
      double double1 = FastMath.max(967.66, 967.66);
      assertEquals(double1, double0, 0.01);
      assertEquals(967.66, double1, 0.01);
      
      float float0 = FastMath.min(0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      double double2 = FastMath.expm1(0.0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = FastMath.expm1(0.0F);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = FastMath.asinh(0.0);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = FastMath.toRadians(0.0);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(0.0, double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = FastMath.abs(0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = FastMath.log10(0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
      
      float float0 = FastMath.min(1679.12F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      double double2 = FastMath.sinh(0.0F);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      int int0 = FastMath.round(0.0F);
      assertEquals(0, int0);
      
      double double3 = FastMath.abs(Double.NEGATIVE_INFINITY);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01);
      
      double double4 = FastMath.ceil(0.0F);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = FastMath.cbrt(Double.NEGATIVE_INFINITY);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double5, 0.01);
      
      double double6 = FastMath.min(Double.NEGATIVE_INFINITY, 3.42171232580676E-8);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double6, 0.01);
      
      float float1 = FastMath.nextAfter(1679.12F, Double.POSITIVE_INFINITY);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1679.1201F, float1, 0.01F);
      
      double double7 = FastMath.floor(0.0);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(0.0, double7, 0.01);
      
      double double8 = FastMath.log10(1.5830993332061267E-10);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals((-9.800491834025935), double8, 0.01);
      
      double double9 = FastMath.hypot(Double.POSITIVE_INFINITY, 0.0);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(double9, double3, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double9, 0.01);
      
      double double10 = FastMath.sqrt(0.0);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertEquals(double10, double4, 0.01);
      assertEquals(double10, double0, 0.01);
      assertEquals(double10, double7, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertEquals(double10, double2, 0.01);
      assertEquals(0.0, double10, 0.01);
      
      float float2 = FastMath.nextAfter(1679.1201F, 0.0);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(1679.12F, float2, 0.01F);
      
      double double11 = FastMath.ceil(567.2980883781);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertEquals(568.0, double11, 0.01);
      
      double double12 = FastMath.cos(0.0);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertEquals(1.0, double12, 0.01);
      
      double double13 = FastMath.ulp(0.0);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertEquals(double13, double4, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertEquals(double13, double10, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertEquals(double13, double2, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertEquals(double13, double7, 0.01);
      assertEquals(double13, double0, 0.01);
      assertEquals(4.9E-324, double13, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = FastMath.toRadians(14.23);
      assertEquals(0.2483603525587931, double0, 0.01);
      
      float float0 = FastMath.nextAfter(1106.292F, 0.2483603525587931);
      assertEquals(1106.2919F, float0, 0.01F);
      
      double double1 = FastMath.floor(0.2483603525587931);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      float float1 = FastMath.nextAfter(1106.2919F, 14.23);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1106.2917F, float1, 0.01F);
      
      double double2 = FastMath.nextAfter((-0.1428571423679182), (double) 1106.292F);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-0.14285714236791816), double2, 0.01);
      
      double double3 = FastMath.hypot((-0.14285714236791816), (-0.14285714236791816));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.20203050821857393, double3, 0.01);
      
      double double4 = FastMath.atan2(0.0, 0.20203050821857393);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = FastMath.random();
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      Random.setNextRandom(2140023846);
      double double6 = FastMath.floor(0.0);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      double double7 = FastMath.pow(180.0, (double) 1106.292F);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double7, 0.01);
      
      double double8 = FastMath.min(180.0, 454.794);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(180.0, double8, 0.01);
      
      double double9 = FastMath.max(326.7, 1.272789478302002);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(326.7, double9, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = FastMath.sqrt((-2770.440495451861));
      assertEquals(Double.NaN, double0, 0.01);
      
      float float0 = FastMath.nextUp((-4034.874F));
      assertEquals((-4034.8738F), float0, 0.01F);
      
      double double1 = FastMath.cos((-2770.440495451861));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.9029439929933867, double1, 0.01);
      
      double double2 = FastMath.asin(Double.NaN);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = FastMath.ceil(2.6367639658206183E288);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(2.6367639658206183E288, double3, 0.01);
      
      double double4 = FastMath.sin(2.6367639658206183E288);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals((-0.7251036047310381), double4, 0.01);
      
      double double5 = FastMath.max((-0.5), (double) (-4034.8738F));
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals((-0.5), double5, 0.01);
      
      double double6 = FastMath.tan(Double.NaN);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = FastMath.abs(0.9029439929933867);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(0.9029439929933867, double7, 0.01);
      
      float float1 = FastMath.nextAfter(1.4E-45F, (-3115.0910861));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      long long0 = FastMath.round((double) 0.0F);
      assertEquals(0L, long0);
      
      double double8 = FastMath.exp((-2770.440495451861));
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(0.0, double8, 0.01);
      
      float float2 = FastMath.nextUp((float) 0L);
      assertEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(1.4E-45F, float2, 0.01F);
      
      float float3 = FastMath.nextAfter(3.4028235E38F, 2.6367639658206183E288);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, float3, 0.01F);
      
      double double9 = FastMath.log(1738.98, (double) Float.POSITIVE_INFINITY);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double9, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = FastMath.atan((-70.696513));
      assertEquals((-1.5566523008424347), double0, 0.01);
      
      float float0 = FastMath.scalb(0.0F, 187);
      assertEquals(0.0F, float0, 0.01F);
      
      double double1 = FastMath.cosh(0.0F);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = FastMath.exp(0.0F);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      double double3 = FastMath.random();
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = FastMath.toRadians(1.0);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.017453292519943295, double4, 0.01);
      
      double double5 = FastMath.asin((-1764.4961322));
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = FastMath.pow((-1434.026277), (-1764.4961322));
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = FastMath.copySign((-1.5566523008424347), (-1216.3176314953441));
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals((-1.5566523008424347), double7, 0.01);
      
      double double8 = FastMath.toDegrees(0.0);
      assertEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(0.0, double8, 0.01);
      
      float float1 = FastMath.nextAfter(0.0F, 1.0);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1.4E-45F, float1, 0.01F);
      
      double double9 = FastMath.cos(Double.NaN);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(double9, double5, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
      
      double double10 = FastMath.abs(0.017453292519943295);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals(double10, double4, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertEquals(0.017453292519943295, double10, 0.01);
      
      double double11 = FastMath.atanh(0.017453292519943295);
      assertEquals(double11, double4, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertEquals(double11, double10, 0.01);
      assertEquals(0.017455065036229584, double11, 0.01);
      
      double double12 = FastMath.signum(2284.8703681242);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertEquals(double12, double2, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertEquals(double12, double1, 0.01);
      assertEquals(1.0, double12, 0.01);
      
      double double13 = FastMath.log10((-3.614672661225457E131));
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertEquals(double13, double6, 0.01);
      assertEquals(double13, double9, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertEquals(double13, double5, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertEquals(Double.NaN, double13, 0.01);
      
      int int0 = FastMath.min(187, 5252);
      assertEquals(187, int0);
      
      double double14 = FastMath.hypot((-1248.21), 0.0);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertEquals(1248.21, double14, 0.01);
      
      float float2 = FastMath.min((-1989.0459F), 0.0F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-1989.0459F), float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = FastMath.min(0, 0);
      assertEquals(0, int0);
      
      double double0 = FastMath.sinh((-3.233204600453039E-9));
      assertEquals((-3.233204600453039E-9), double0, 0.01);
      
      double double1 = FastMath.log10(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
      
      double double2 = FastMath.asinh(1.570796251296997);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.2334030769666342, double2, 0.01);
      
      double double3 = FastMath.ceil((-1841.0101269235));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-1841.0), double3, 0.01);
      
      double double4 = FastMath.log1p((-3.233204600453039E-9));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals((-3.2332046056798454E-9), double4, 0.01);
      
      double double5 = FastMath.sin(1.570796251296997);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(0.9999999999999971, double5, 0.01);
      
      double double6 = FastMath.log((-1841.0), (-2071.47490951085));
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      int int1 = FastMath.getExponent((-1654.2275004));
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      int int2 = FastMath.round((-704.63F));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-705), int2);
      
      double double7 = FastMath.atan2((-3.233204600453039E-9), (-3606.72753752008));
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals((-3.141592653588897), double7, 0.01);
      
      int int3 = FastMath.abs(0);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = FastMath.ulp(0.0);
      assertEquals(4.9E-324, double0, 0.01);
      
      double double1 = FastMath.log1p(0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = FastMath.atanh(0.0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = FastMath.log(295.280281588);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(5.687925012351741, double3, 0.01);
      
      double double4 = FastMath.cos(0.0);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(1.0, double4, 0.01);
      
      double double5 = FastMath.pow(1.0, 1.0);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(1.0, double5, 0.01);
      
      double double6 = FastMath.expm1(1.0);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(1.7182818284590453, double6, 0.01);
      
      double double7 = FastMath.tanh((-2.1139124097042925E-7));
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals((-2.113912409704261E-7), double7, 0.01);
      
      double double8 = FastMath.acosh((-2082.9717524600173));
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      
      long long0 = FastMath.round(0.0);
      assertEquals(0L, long0);
      
      long long1 = FastMath.abs(0L);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      float float0 = FastMath.copySign(0.0F, 485.7F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = FastMath.max((-2792.665), (-2792.665));
      assertEquals((-2792.665), double0, 0.01);
      
      double double1 = FastMath.acos((-2792.665));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      float float0 = FastMath.nextAfter(404.84955F, (-895.0));
      assertEquals(404.84952F, float0, 0.01F);
      
      double double2 = FastMath.sin(0.167);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.16622483788139697, double2, 0.01);
      
      double double3 = FastMath.nextUp((-3226.24912271736));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals((-3226.2491227173596), double3, 0.01);
      
      float float1 = FastMath.nextUp(404.84955F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(404.84958F, float1, 0.01F);
      
      double double4 = FastMath.sinh(0.16622483788139697);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.16699138080186038, double4, 0.01);
      
      double double5 = FastMath.acosh((-895.0));
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = FastMath.log1p(2.356194490192345);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(1.2108077399032076, double6, 0.01);
      
      double double7 = FastMath.cos((-895.0));
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals((-0.9380260968549131), double7, 0.01);
      
      double double8 = FastMath.asinh((-2792.665));
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals((-8.627898828652974), double8, 0.01);
      
      double double9 = FastMath.tan(3143.71);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertEquals((-1.6437406484601815), double9, 0.01);
      
      Random.setNextRandom((-2146210919));
      double double10 = FastMath.sin(0.16622483788139697);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals(double10, double4, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertEquals(double10, double2, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertEquals(0.16546041004897385, double10, 0.01);
      
      double double11 = FastMath.min(757.4810670524, 757.4810670524);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertEquals(757.4810670524, double11, 0.01);
      
      float float2 = FastMath.abs(404.84955F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(404.84955F, float2, 0.01F);
      
      double double12 = FastMath.scalb(2107.160434504, (-2146210919));
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertEquals(0.0, double12, 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = FastMath.acosh((-2.0197142620980974E-8));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = FastMath.pow((-2.0197142620980974E-8), 1.023714303970337);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = FastMath.hypot(414.7212, 0.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(414.7212, double2, 0.01);
      
      float float0 = FastMath.copySign(1572.4F, 1572.4F);
      assertEquals(1572.4F, float0, 0.01F);
      
      double double3 = FastMath.rint(414.7212);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(415.0, double3, 0.01);
      
      float float1 = FastMath.ulp(1572.4F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.2207031E-4F, float1, 0.01F);
      
      float float2 = FastMath.min(1572.4F, 1572.4F);
      assertEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(1572.4F, float2, 0.01F);
      
      double double4 = FastMath.pow((double) 1572.4F, 0.0);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(1.0, double4, 0.01);
      
      double double5 = FastMath.asinh(3071.7155987895085);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(8.72313871851867, double5, 0.01);
      
      long long0 = FastMath.abs((-2789L));
      assertEquals(2789L, long0);
      
      float float3 = FastMath.nextAfter(1286.71F, 3071.7155987895085);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(1286.7101F, float3, 0.01F);
      
      double double6 = FastMath.cos(1.2207031E-4F);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(0.9999999925494194, double6, 0.01);
      
      double double7 = FastMath.nextAfter(Double.NaN, (-3051.0));
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      long long1 = FastMath.max(3248L, 1031L);
      assertFalse(long1 == long0);
      assertEquals(3248L, long1);
      
      double double8 = FastMath.acos((-3051.0));
      assertEquals(double8, double7, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      
      int int0 = FastMath.abs(0);
      assertEquals(0, int0);
      
      double double9 = FastMath.cosh(0);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(1.0, double9, 0.01);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Ks,b#rL7e}UJ;qF";
      stringArray0[1] = "org.apache.commons.math3.util.FastMath$ExpFracTable";
      stringArray0[2] = "H>BY";
      stringArray0[3] = "{|A)";
      stringArray0[4] = "";
      stringArray0[5] = "";
      FastMath.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = FastMath.log((-6.663542893624021E-14), (-6.663542893624021E-14));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = FastMath.signum(0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = FastMath.nextUp(Double.NaN);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = FastMath.toRadians((-2625.1));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-45.81663819410314), double3, 0.01);
      
      int int0 = FastMath.getExponent((-6.663542893624021E-14));
      assertEquals((-44), int0);
      
      double double4 = FastMath.copySign((-566.2901003161759), (-0.09088450866185192));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals((-566.2901003161759), double4, 0.01);
      
      double double5 = FastMath.sinh((-566.2901003161759));
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals((-4.3215120477718783E245), double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = FastMath.pow((-642.963702813017), 0.0);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = FastMath.scalb(1356.32366, (-442));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.1942775107933894E-130, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = FastMath.ceil(0.3333333134651184);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = FastMath.rint(0.125);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      float float0 = FastMath.scalb((-1380.9906F), 413);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      
      double double2 = FastMath.pow(0.0, (double) (-1380.9906F));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      double double3 = FastMath.IEEEremainder(0.0, (-4826.47));
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = FastMath.log1p(Double.POSITIVE_INFINITY);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01);
      
      double double5 = FastMath.atan(1761.81801044);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(1.5702287313414014, double5, 0.01);
      
      long long0 = FastMath.abs((long) 413);
      assertEquals(413L, long0);
      
      double double6 = FastMath.log10((-4826.47));
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = FastMath.signum(0.0);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(0.0, double7, 0.01);
      
      float float1 = FastMath.copySign((-653.7F), (-653.7F));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-653.7F), float1, 0.01F);
      
      int int0 = FastMath.round(0.0F);
      assertEquals(0, int0);
      
      double double8 = FastMath.tan((-2512.12));
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(2.2594351084503668, double8, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = FastMath.sinh(2092.5924936);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = FastMath.log1p(4712.47530433);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(8.4581807714738, double1, 0.01);
      
      double double2 = FastMath.scalb(8.4581807714738, 27);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.1352378061605008E9, double2, 0.01);
      
      float float0 = FastMath.ulp((-782.7855F));
      assertEquals(6.1035156E-5F, float0, 0.01F);
      
      double double3 = FastMath.cosh(27);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(2.6602412030089932E11, double3, 0.01);
      
      double double4 = FastMath.atan2((-1928.2839134), 1893.3);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals((-0.7945522044995538), double4, 0.01);
      
      float float1 = FastMath.nextUp((float) 27);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(27.000002F, float1, 0.01F);
      
      float float2 = FastMath.nextAfter((-1.0F), 1.1352378061605008E9);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-0.99999994F), float2, 0.01F);
      
      double double5 = FastMath.sinh((-782.7855F));
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double5, 0.01);
      
      double double6 = FastMath.random();
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      float float3 = FastMath.scalb(1.2207031E-4F, 2145325372);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, float3, 0.01F);
      
      long long0 = FastMath.abs((long) 2145325372);
      assertEquals(2145325372L, long0);
      
      double double7 = FastMath.nextAfter((-1746.74939526191), (-3071.053407));
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals((-1746.7493952619102), double7, 0.01);
      
      double double8 = FastMath.sinh(20.0);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(2.4258259770489514E8, double8, 0.01);
      
      double double9 = FastMath.scalb((-3071.053407), (-3444));
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(-0.0, double9, 0.01);
      
      float float4 = FastMath.min(1.2207031E-4F, (float) (-3444));
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertEquals((-3444.0F), float4, 0.01F);
      
      double double10 = FastMath.pow((-1928.2839134), 2145325372);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertEquals(Double.NaN, double10, 0.01);
      
      double double11 = FastMath.cos(2.2250738585072014E-308);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertEquals(1.0, double11, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = FastMath.min(0L, 0L);
      assertEquals(0L, long0);
      
      double double0 = FastMath.copySign((double) 0L, (double) 0L);
      assertEquals(0.0, double0, 0.01);
      
      long long1 = FastMath.abs(0L);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      long long2 = FastMath.min(0L, 0L);
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals(0L, long2);
      
      double double1 = FastMath.sin(530.7862555458044);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.14241703142986278, double1, 0.01);
      
      double double2 = FastMath.cosh(4.983191803254889E-7);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.0000000000001241, double2, 0.01);
      
      double double3 = FastMath.pow(0.0, 1008.37056);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = FastMath.pow((-1366.8440561190694), 1458);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = FastMath.sinh((-18.430862426757812));
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals((-5.051168462516839E7), double5, 0.01);
      
      double double6 = FastMath.IEEEremainder(0L, (-5.051168462516839E7));
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      float float0 = FastMath.max((float) 0L, (float) 1458);
      assertEquals(1458.0F, float0, 0.01F);
      
      double double7 = FastMath.abs((-18.430862426757812));
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(18.430862426757812, double7, 0.01);
      
      double double8 = FastMath.toDegrees(0.0);
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(double8, double6, 0.01);
      assertEquals(0.0, double8, 0.01);
      
      long long3 = FastMath.round((-2390.670284055961));
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertEquals((-2391L), long3);
      
      double double9 = FastMath.log((double) 1458, (double) 0L);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double9, 0.01);
      
      float float1 = FastMath.copySign(1.0F, (-932.49F));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1.0F), float1, 0.01F);
      
      double double10 = FastMath.copySign((double) 0L, (-0.12502530217170715));
      assertEquals(double10, double6, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(double10, double0, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(double10, double8, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertEquals(-0.0, double10, 0.01);
      
      double double11 = FastMath.pow(530.7862555458044, 0);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertEquals(double11, double2, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertEquals(1.0, double11, 0.01);
      
      float float2 = FastMath.min((float) (-2391L), 493.7911F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-2391.0F), float2, 0.01F);
      
      double double12 = FastMath.cos(0.1666666505023083);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertEquals(0.9861432342445294, double12, 0.01);
      
      double double13 = FastMath.sqrt(2.0003490682463053E196);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertEquals(1.4143369712505946E98, double13, 0.01);
      
      double double14 = FastMath.asin(1.0F);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertEquals(1.5707963267948966, double14, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = FastMath.nextAfter(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      long long0 = FastMath.abs(478L);
      assertEquals(478L, long0);
      
      double double1 = FastMath.cbrt((-1.1819540733893871E-7));
      assertEquals(double1, double0, 0.01);
      assertEquals((-0.004907574116423857), double1, 0.01);
      
      double double2 = FastMath.log((double) 478L);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(6.169610732491456, double2, 0.01);
      
      long long1 = FastMath.min(1118L, 0L);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      double double3 = FastMath.abs(2.3703896609663678E-8);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(2.3703896609663678E-8, double3, 0.01);
      
      double double4 = FastMath.pow(0.0, (double) 478L);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      float float0 = FastMath.ulp((float) 1118L);
      assertEquals(1.2207031E-4F, float0, 0.01F);
      
      float float1 = FastMath.scalb((-451.858F), 746);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      
      double double5 = FastMath.acosh(0.0);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = FastMath.log(Double.NaN);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = FastMath.nextAfter(0.0, 64.1742);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(4.9E-324, double7, 0.01);
      
      double double8 = FastMath.abs((double) Float.NEGATIVE_INFINITY);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double8, 0.01);
      
      double double9 = FastMath.acos(0.0);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(1.5707963267948966, double9, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = FastMath.atanh(0.11951763927936554);
      assertEquals(0.12009164891143911, double0, 0.01);
      
      double double1 = FastMath.sinh(0.12009164891143911);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.12038051751224833, double1, 0.01);
      
      double double2 = FastMath.acosh(1316.26);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(7.87569669702339, double2, 0.01);
      
      float float0 = FastMath.ulp(2677.46F);
      assertEquals(2.4414062E-4F, float0, 0.01F);
      
      double double3 = FastMath.ulp((double) 2677.46F);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(4.547473508864641E-13, double3, 0.01);
      
      double double4 = FastMath.rint(2677.46F);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(2677.0, double4, 0.01);
      
      double double5 = FastMath.cos(2677.46F);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(0.6800099812552424, double5, 0.01);
      
      double double6 = FastMath.acosh((-3644.642252261558));
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = FastMath.sinh((-1.0));
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals((-1.1752011936438014), double7, 0.01);
      
      double double8 = FastMath.cosh((-105.15262));
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(2.3236602460867495E45, double8, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = FastMath.acosh(0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      int int0 = FastMath.getExponent(288.4449F);
      assertEquals(8, int0);
      
      double double1 = FastMath.abs((double) 288.4449F);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(288.44488525390625, double1, 0.01);
      
      double double2 = FastMath.acos(Double.NaN);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      float float0 = FastMath.nextAfter(0.0F, 0.0);
      assertEquals(0.0F, float0, 0.01F);
      
      double double3 = FastMath.rint(0.0);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = FastMath.log1p((-1554.0285));
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = FastMath.expm1(0.0);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = FastMath.max(288.44488525390625, (-1901.3704016609));
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(288.44488525390625, double6, 0.01);
      
      double double7 = FastMath.log10(288.44488525390625);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(2.4600628423903683, double7, 0.01);
      
      double double8 = FastMath.asinh(0.0F);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(0.0, double8, 0.01);
      
      float float1 = FastMath.nextAfter(288.4449F, 0.0);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(288.44485F, float1, 0.01F);
      
      double double9 = FastMath.ceil((-1259.28989));
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertEquals((-1259.0), double9, 0.01);
      
      int int1 = FastMath.max(0, 0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      float float2 = FastMath.signum(Float.POSITIVE_INFINITY);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(1.0F, float2, 0.01F);
      
      double double10 = FastMath.copySign((double) 0, (double) 0.0F);
      assertNotEquals(double10, double9, 0.01);
      assertEquals(double10, double8, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals(double10, double5, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(0.0, double10, 0.01);
      
      int int2 = FastMath.getExponent(288.44485F);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, int2);
      
      double double11 = FastMath.tan(288.44488525390625);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertEquals((-0.6575133256258437), double11, 0.01);
      
      double double12 = FastMath.atanh(0.0);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertEquals(double12, double8, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertEquals(double12, double3, 0.01);
      assertEquals(double12, double5, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertEquals(double12, double10, 0.01);
      assertEquals(0.0, double12, 0.01);
      
      double double13 = FastMath.cos(0.0F);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertEquals(1.0, double13, 0.01);
      
      double double14 = FastMath.ceil(Double.NaN);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertEquals(double14, double4, 0.01);
      assertEquals(double14, double2, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertEquals(double14, double0, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertEquals(Double.NaN, double14, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = FastMath.nextUp((-20.0));
      assertEquals((-19.999999999999996), double0, 0.01);
      
      long long0 = FastMath.abs(3166L);
      assertEquals(3166L, long0);
      
      double double1 = FastMath.sin(3166L);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-0.6634309123980492), double1, 0.01);
      
      double double2 = FastMath.scalb((-0.6634309123980492), 2396);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01);
      
      double double3 = FastMath.ceil((-4.503599627370496E15));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals((-4.503599627370496E15), double3, 0.01);
      
      float float0 = FastMath.max((float) 2396, (float) 3166L);
      assertEquals(3166.0F, float0, 0.01F);
      
      float float1 = FastMath.ulp((float) 3166L);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(2.4414062E-4F, float1, 0.01F);
      
      double double4 = FastMath.floor((-20.0));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals((-20.0), double4, 0.01);
      
      double double5 = FastMath.random();
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = FastMath.abs(2564.0);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(2564.0, double6, 0.01);
      
      float float2 = FastMath.nextAfter(3166.0F, (double) 2396);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(3165.9998F, float2, 0.01F);
      
      float float3 = FastMath.nextAfter((float) 2396, Double.NEGATIVE_INFINITY);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(2395.9998F, float3, 0.01F);
      
      double double7 = FastMath.atanh(1.1645605564117432);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      double double8 = FastMath.random();
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(0.1, double8, 0.01);
      
      double double9 = FastMath.min((-455.8065501), (-20.0));
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals((-455.8065501), double9, 0.01);
      
      double double10 = FastMath.cos((-20.0));
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(0.40808206181339196, double10, 0.01);
      
      double double11 = FastMath.sqrt(577.757290837);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertEquals(24.036582345187927, double11, 0.01);
      
      double double12 = FastMath.cbrt((-2187.15291302921));
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertEquals((-12.980548648007987), double12, 0.01);
      
      Random.setNextRandom(2396);
      double double13 = FastMath.cbrt(2.4414062E-4F);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertEquals(0.0625, double13, 0.01);
      
      double double14 = FastMath.atan2(Double.NaN, 0.0625);
      assertNotEquals(double14, double5, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertEquals(double14, double7, 0.01);
      assertEquals(Double.NaN, double14, 0.01);
      
      double double15 = FastMath.ceil(2395.9998F);
      assertNotEquals(double15, double6, 0.01);
      assertNotEquals(double15, double3, 0.01);
      assertNotEquals(double15, double8, 0.01);
      assertNotEquals(double15, double12, 0.01);
      assertNotEquals(double15, double1, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertNotEquals(double15, double4, 0.01);
      assertNotEquals(double15, double14, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertNotEquals(double15, double2, 0.01);
      assertNotEquals(double15, double13, 0.01);
      assertNotEquals(double15, double0, 0.01);
      assertNotEquals(double15, double10, 0.01);
      assertNotEquals(double15, double9, 0.01);
      assertNotEquals(double15, double5, 0.01);
      assertEquals(2396.0, double15, 0.01);
      
      double double16 = FastMath.floor((-4.503599627370496E15));
      assertNotEquals(double16, double7, 0.01);
      assertNotEquals(double16, double11, 0.01);
      assertNotEquals(double16, double14, 0.01);
      assertNotEquals(double16, double5, 0.01);
      assertNotEquals(double16, double8, 0.01);
      assertNotEquals(double16, double10, 0.01);
      assertNotEquals(double16, double13, 0.01);
      assertEquals(double16, double3, 0.01);
      assertNotEquals(double16, double1, 0.01);
      assertNotEquals(double16, double6, 0.01);
      assertNotEquals(double16, double4, 0.01);
      assertNotEquals(double16, double2, 0.01);
      assertNotEquals(double16, double12, 0.01);
      assertNotEquals(double16, double9, 0.01);
      assertNotEquals(double16, double0, 0.01);
      assertNotEquals(double16, double15, 0.01);
      assertEquals((-4.503599627370496E15), double16, 0.01);
      
      double double17 = FastMath.max(0.25995755195617676, (-3.7999795083850525E-8));
      assertNotEquals(double17, double4, 0.01);
      assertNotEquals(double17, double6, 0.01);
      assertNotEquals(double17, double15, 0.01);
      assertNotEquals(double17, double3, 0.01);
      assertNotEquals(double17, double8, 0.01);
      assertNotEquals(double17, double1, 0.01);
      assertNotEquals(double17, double11, 0.01);
      assertNotEquals(double17, double12, 0.01);
      assertNotEquals(double17, double14, 0.01);
      assertNotEquals(double17, double2, 0.01);
      assertNotEquals(double17, double13, 0.01);
      assertNotEquals(double17, double0, 0.01);
      assertNotEquals(double17, double9, 0.01);
      assertNotEquals(double17, double5, 0.01);
      assertNotEquals(double17, double7, 0.01);
      assertNotEquals(double17, double10, 0.01);
      assertNotEquals(double17, double16, 0.01);
      assertEquals(0.25995755195617676, double17, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = FastMath.scalb((-1762.47126070662), 1528305693);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double double1 = FastMath.nextUp((-1762.47126070662));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1762.4712607066197), double1, 0.01);
      
      double double2 = FastMath.cosh((-1762.4712607066197));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      double double3 = FastMath.cos(1686.622);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-0.9158185022383303), double3, 0.01);
      
      double double4 = FastMath.asin((-1.974894592E9));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      Random.setNextRandom(1528305693);
      double double5 = FastMath.nextAfter((-2013.499), (-1816.7000182901938));
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals((-2013.4989999999998), double5, 0.01);
      
      double double6 = FastMath.pow(Double.POSITIVE_INFINITY, 1528305693);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = FastMath.pow((double) 1528305693, 744.4361531);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double7, 0.01);
      
      double double8 = FastMath.acosh(3282.4329117595);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(8.789487325170814, double8, 0.01);
      
      double double9 = FastMath.rint(1528305693);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertEquals(1.528305693E9, double9, 0.01);
      
      double double10 = FastMath.acos(1.0E-6);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertEquals(1.5707953267948966, double10, 0.01);
      
      double double11 = FastMath.atan2((-4.503599627370496E15), (-1816.7000182901938));
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertEquals((-1.5707963267953), double11, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = FastMath.rint((-1.02137463037812));
      assertEquals((-1.0), double0, 0.01);
      
      double double1 = FastMath.asin((-1.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.5707963267948966), double1, 0.01);
      
      double double2 = FastMath.scalb((-1.0), (-592));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-6.169394854663383E-179), double2, 0.01);
      
      double double3 = FastMath.log1p((-1046.408262697877));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = FastMath.asin(599.153965);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      float float0 = FastMath.abs((float) (-592));
      assertEquals(592.0F, float0, 0.01F);
      
      double double5 = FastMath.hypot((-6.169394854663383E-179), 0.087);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(0.087, double5, 0.01);
      
      double double6 = FastMath.scalb(968.6, 1274);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double6, 0.01);
      
      double double7 = FastMath.rint(0.036);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(0.0, double7, 0.01);
      
      double double8 = FastMath.asinh(1003.888336);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(7.604783503569829, double8, 0.01);
      
      float float1 = FastMath.scalb((float) (-592), (-592));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(-0.0F, float1, 0.01F);
      
      float float2 = FastMath.nextUp(3430.0F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(3430.0002F, float2, 0.01F);
      
      double double9 = FastMath.ceil(0.1111111111111111);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(1.0, double9, 0.01);
      
      double double10 = FastMath.random();
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(double10, double7, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertEquals(double10, double2, 0.01);
      assertEquals(0.0, double10, 0.01);
      
      double double11 = FastMath.cos(1.5707963267948966);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertEquals(double11, double7, 0.01);
      assertEquals(double11, double10, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertEquals(double11, double2, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertEquals(6.123233995736766E-17, double11, 0.01);
      
      float float3 = FastMath.scalb((float) 1274, 853);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, float3, 0.01F);
      
      double double12 = FastMath.random();
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertEquals(0.1, double12, 0.01);
      
      Random.setNextRandom(2146200802);
      double double13 = FastMath.cosh(0.087);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertEquals(double13, double9, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertEquals(1.003786887675715, double13, 0.01);
      
      float float4 = FastMath.ulp((-3174.716F));
      assertEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(2.4414062E-4F, float4, 0.01F);
      
      float float5 = FastMath.scalb(3393.72F, (-592));
      assertNotEquals(float5, float2, 0.01F);
      assertEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float0, 0.01F);
      assertEquals(0.0F, float5, 0.01F);
      
      double double14 = FastMath.pow(1003.888336, (double) Float.POSITIVE_INFINITY);
      assertNotEquals(double14, double2, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertEquals(double14, double6, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double14, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = FastMath.sinh(3539.5388549);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = FastMath.cos(Double.POSITIVE_INFINITY);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = FastMath.abs(Double.POSITIVE_INFINITY);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      int int0 = FastMath.abs((-53));
      assertEquals(53, int0);
      
      double double3 = FastMath.exp(3539.5388549);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01);
      
      double double4 = FastMath.cosh(Double.POSITIVE_INFINITY);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01);
      
      double double5 = FastMath.ceil((-477.3525472));
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals((-477.0), double5, 0.01);
      
      float float0 = FastMath.scalb(145.0F, (-1730));
      assertEquals(0.0F, float0, 0.01F);
      
      double double6 = FastMath.asinh(0.48610860109329224);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(0.4687525910111068, double6, 0.01);
      
      double double7 = FastMath.tan((-2640.506807636881));
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals((-550.1435665097688), double7, 0.01);
      
      double double8 = FastMath.cbrt((-477.0));
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals((-7.813389232115573), double8, 0.01);
      
      double double9 = FastMath.atanh((-1730));
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(double9, double1, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
      
      double double10 = FastMath.cbrt((-53));
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals((-3.756285754221072), double10, 0.01);
      
      double double11 = FastMath.sqrt(1.6121782610217253E-8);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertEquals(1.269715819001136E-4, double11, 0.01);
      
      double double12 = FastMath.nextAfter((-21.6665), 1932.63);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertEquals((-21.666499999999996), double12, 0.01);
      
      double double13 = FastMath.random();
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertEquals(double13, double11, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertEquals(0.0, double13, 0.01);
      
      double double14 = FastMath.cbrt((-1730));
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertEquals((-12.004627844654687), double14, 0.01);
      
      double double15 = FastMath.sin(Double.NaN);
      assertNotEquals(double15, double2, 0.01);
      assertNotEquals(double15, double6, 0.01);
      assertNotEquals(double15, double5, 0.01);
      assertNotEquals(double15, double14, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertNotEquals(double15, double10, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertNotEquals(double15, double12, 0.01);
      assertNotEquals(double15, double13, 0.01);
      assertNotEquals(double15, double0, 0.01);
      assertEquals(double15, double9, 0.01);
      assertNotEquals(double15, double8, 0.01);
      assertEquals(double15, double1, 0.01);
      assertNotEquals(double15, double3, 0.01);
      assertNotEquals(double15, double4, 0.01);
      assertEquals(Double.NaN, double15, 0.01);
      
      double double16 = FastMath.hypot((-550.1435665097688), 145.0F);
      assertNotEquals(double16, double13, 0.01);
      assertNotEquals(double16, double4, 0.01);
      assertNotEquals(double16, double8, 0.01);
      assertNotEquals(double16, double0, 0.01);
      assertNotEquals(double16, double6, 0.01);
      assertNotEquals(double16, double3, 0.01);
      assertNotEquals(double16, double1, 0.01);
      assertNotEquals(double16, double15, 0.01);
      assertNotEquals(double16, double2, 0.01);
      assertNotEquals(double16, double10, 0.01);
      assertNotEquals(double16, double11, 0.01);
      assertNotEquals(double16, double5, 0.01);
      assertNotEquals(double16, double9, 0.01);
      assertNotEquals(double16, double14, 0.01);
      assertNotEquals(double16, double12, 0.01);
      assertNotEquals(double16, double7, 0.01);
      assertEquals(568.9314051553916, double16, 0.01);
      
      double double17 = FastMath.cbrt(1.0);
      assertNotEquals(double17, double15, 0.01);
      assertNotEquals(double17, double3, 0.01);
      assertNotEquals(double17, double7, 0.01);
      assertNotEquals(double17, double1, 0.01);
      assertNotEquals(double17, double12, 0.01);
      assertNotEquals(double17, double6, 0.01);
      assertNotEquals(double17, double8, 0.01);
      assertNotEquals(double17, double9, 0.01);
      assertNotEquals(double17, double16, 0.01);
      assertNotEquals(double17, double4, 0.01);
      assertNotEquals(double17, double13, 0.01);
      assertNotEquals(double17, double2, 0.01);
      assertNotEquals(double17, double10, 0.01);
      assertNotEquals(double17, double14, 0.01);
      assertNotEquals(double17, double5, 0.01);
      assertNotEquals(double17, double0, 0.01);
      assertNotEquals(double17, double11, 0.01);
      assertEquals(1.0, double17, 0.01);
      
      float float1 = FastMath.nextUp(0.0F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1.4E-45F, float1, 0.01F);
      
      double double18 = FastMath.toRadians(Double.NaN);
      assertNotEquals(double18, double16, 0.01);
      assertNotEquals(double18, double4, 0.01);
      assertNotEquals(double18, double17, 0.01);
      assertNotEquals(double18, double13, 0.01);
      assertEquals(double18, double15, 0.01);
      assertNotEquals(double18, double6, 0.01);
      assertNotEquals(double18, double8, 0.01);
      assertEquals(double18, double1, 0.01);
      assertNotEquals(double18, double7, 0.01);
      assertNotEquals(double18, double3, 0.01);
      assertNotEquals(double18, double12, 0.01);
      assertNotEquals(double18, double2, 0.01);
      assertNotEquals(double18, double10, 0.01);
      assertEquals(double18, double9, 0.01);
      assertNotEquals(double18, double14, 0.01);
      assertNotEquals(double18, double5, 0.01);
      assertNotEquals(double18, double0, 0.01);
      assertNotEquals(double18, double11, 0.01);
      assertEquals(Double.NaN, double18, 0.01);
      
      double double19 = FastMath.pow(0.9375, Double.POSITIVE_INFINITY);
      assertNotEquals(double19, double3, 0.01);
      assertNotEquals(double19, double7, 0.01);
      assertNotEquals(double19, double12, 0.01);
      assertNotEquals(double19, double15, 0.01);
      assertNotEquals(double19, double10, 0.01);
      assertNotEquals(double19, double6, 0.01);
      assertNotEquals(double19, double18, 0.01);
      assertEquals(double19, double13, 0.01);
      assertNotEquals(double19, double9, 0.01);
      assertEquals(double19, double11, 0.01);
      assertNotEquals(double19, double8, 0.01);
      assertNotEquals(double19, double14, 0.01);
      assertNotEquals(double19, double16, 0.01);
      assertNotEquals(double19, double1, 0.01);
      assertNotEquals(double19, double17, 0.01);
      assertNotEquals(double19, double0, 0.01);
      assertNotEquals(double19, double4, 0.01);
      assertNotEquals(double19, double5, 0.01);
      assertNotEquals(double19, double2, 0.01);
      assertEquals(0.0, double19, 0.01);
      
      double double20 = FastMath.rint(145.0F);
      assertNotEquals(double20, double0, 0.01);
      assertNotEquals(double20, double8, 0.01);
      assertNotEquals(double20, double4, 0.01);
      assertNotEquals(double20, double19, 0.01);
      assertNotEquals(double20, double17, 0.01);
      assertNotEquals(double20, double1, 0.01);
      assertNotEquals(double20, double15, 0.01);
      assertNotEquals(double20, double13, 0.01);
      assertNotEquals(double20, double3, 0.01);
      assertNotEquals(double20, double6, 0.01);
      assertNotEquals(double20, double14, 0.01);
      assertNotEquals(double20, double2, 0.01);
      assertNotEquals(double20, double11, 0.01);
      assertNotEquals(double20, double5, 0.01);
      assertNotEquals(double20, double10, 0.01);
      assertNotEquals(double20, double9, 0.01);
      assertNotEquals(double20, double18, 0.01);
      assertNotEquals(double20, double7, 0.01);
      assertNotEquals(double20, double12, 0.01);
      assertNotEquals(double20, double16, 0.01);
      assertEquals(145.0, double20, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = FastMath.acos(1282.48486);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = FastMath.sinh((-360.36));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.58975245013025E156), double1, 0.01);
      
      double double2 = FastMath.pow(2.2250738585072014E-308, 16);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = FastMath.sinh((-8.763590722345843E-19));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals((-8.763590722345843E-19), double3, 0.01);
      
      double double4 = FastMath.asinh(2.2250738585072014E-308);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(2.2250738585072014E-308, double4, 0.01);
      
      double double5 = FastMath.sqrt((-952.1716));
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = FastMath.scalb(Double.NaN, (-650));
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      float float0 = FastMath.scalb((float) 16, (-650));
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = FastMath.nextUp((float) (-650));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-649.99994F), float1, 0.01F);
      
      double double7 = FastMath.pow((-8.763590722345843E-19), 16);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(1.210356733782427E-289, double7, 0.01);
      
      double double8 = FastMath.atan2(1.0E-6, Double.NaN);
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double6, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      
      Random.setNextRandom(1023);
      double double9 = FastMath.sin(2.2250738585072014E-308);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertEquals(double9, double2, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(double9, double3, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertEquals(double9, double7, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(2.2250738585072014E-308, double9, 0.01);
      
      double double10 = FastMath.abs((-1.58975245013025E156));
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertEquals(1.58975245013025E156, double10, 0.01);
      
      double double11 = FastMath.min(1.0859222881334994E-7, 0.9921976327896118);
      assertNotEquals(double11, double5, 0.01);
      assertEquals(double11, double9, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertEquals(double11, double7, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertEquals(double11, double4, 0.01);
      assertEquals(double11, double2, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertEquals(double11, double3, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertEquals(1.0859222881334994E-7, double11, 0.01);
      
      double double12 = FastMath.asin(2.2250738585072014E-308);
      assertEquals(double12, double3, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertEquals(double12, double9, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertEquals(double12, double11, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertEquals(double12, double7, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertEquals(double12, double2, 0.01);
      assertEquals(double12, double4, 0.01);
      assertEquals(2.2250738585072014E-308, double12, 0.01);
      
      float float2 = FastMath.ulp((float) 1023);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(6.1035156E-5F, float2, 0.01F);
      
      double double13 = FastMath.rint(2.2250738585072014E-308);
      assertNotEquals(double13, double0, 0.01);
      assertEquals(double13, double7, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertEquals(double13, double11, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertEquals(double13, double2, 0.01);
      assertEquals(double13, double4, 0.01);
      assertEquals(double13, double9, 0.01);
      assertEquals(double13, double12, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertEquals(double13, double3, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertEquals(0.0, double13, 0.01);
      
      double double14 = FastMath.atan2((-952.1716), 2.2250738585072014E-308);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertEquals((-1.5707963267948966), double14, 0.01);
      
      double double15 = FastMath.scalb((-1.58975245013025E156), 1023);
      assertNotEquals(double15, double3, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertNotEquals(double15, double9, 0.01);
      assertNotEquals(double15, double14, 0.01);
      assertNotEquals(double15, double8, 0.01);
      assertNotEquals(double15, double13, 0.01);
      assertNotEquals(double15, double10, 0.01);
      assertNotEquals(double15, double2, 0.01);
      assertNotEquals(double15, double1, 0.01);
      assertNotEquals(double15, double6, 0.01);
      assertNotEquals(double15, double12, 0.01);
      assertNotEquals(double15, double0, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertNotEquals(double15, double5, 0.01);
      assertNotEquals(double15, double4, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double15, 0.01);
      
      float float3 = FastMath.min((-1.4E-45F), 4.5035996E15F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(float3, float0, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals((-1.4E-45F), float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = FastMath.rint(1485.7103854);
      assertEquals(1486.0, double0, 0.01);
      
      long long0 = FastMath.abs(2739L);
      assertEquals(2739L, long0);
      
      float float0 = FastMath.nextUp(0.0F);
      assertEquals(1.4E-45F, float0, 0.01F);
      
      double double1 = FastMath.tanh((-1.0E-6));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-9.999999999996666E-7), double1, 0.01);
      
      long long1 = FastMath.abs(2739L);
      assertTrue(long1 == long0);
      assertEquals(2739L, long1);
      
      double double2 = FastMath.asinh(1431655765);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(21.775244669577255, double2, 0.01);
      
      double double3 = FastMath.tan(2739L);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-0.5064495543010613), double3, 0.01);
      
      double double4 = FastMath.scalb((-3579.009126), 1239);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double4, 0.01);
      
      float float1 = FastMath.max((float) 1048576L, (float) 1239);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1048576.0F, float1, 0.01F);
      
      double double5 = FastMath.log((double) 1.4E-45F);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals((-103.27892990343184), double5, 0.01);
      
      double double6 = FastMath.log1p((-0.5064495543010613));
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals((-0.7061302050714617), double6, 0.01);
      
      double double7 = FastMath.hypot(2731.0, Double.NEGATIVE_INFINITY);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double7, 0.01);
      
      int int0 = FastMath.abs(1431655765);
      assertEquals(1431655765, int0);
      
      double double8 = FastMath.random();
      assertEquals(double8, double1, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(0.0, double8, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = FastMath.acosh(0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = FastMath.cbrt(0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      float float0 = FastMath.max(584.0F, 584.0F);
      assertEquals(584.0F, float0, 0.01F);
      
      double double2 = FastMath.sin(0.0);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      int int0 = FastMath.abs(0);
      assertEquals(0, int0);
      
      double double3 = FastMath.cos(1003.888336);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.14892709395283393, double3, 0.01);
      
      double double4 = FastMath.asinh(0);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = FastMath.IEEEremainder(4.503599627370496E15, (-1.997046552871766E-8));
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(2.750897789347621E-9, double5, 0.01);
      
      double double6 = FastMath.ceil(584.0F);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(584.0, double6, 0.01);
      
      double double7 = FastMath.IEEEremainder(1003.888336, (-2605.7534839843966));
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(1003.888336, double7, 0.01);
      
      double double8 = FastMath.exp((-0.3058015757857271));
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(0.7365327508899948, double8, 0.01);
      
      double double9 = FastMath.ceil(0.07490822288864472);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(1.0, double9, 0.01);
      
      double double10 = FastMath.tanh(607.66);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals(double10, double9, 0.01);
      assertEquals(1.0, double10, 0.01);
      
      double double11 = FastMath.toRadians(1.633123935319537E16);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertEquals(2.850338976445283E14, double11, 0.01);
      
      double double12 = FastMath.atan2(Double.NEGATIVE_INFINITY, 0.9375);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertEquals((-1.5707963267948966), double12, 0.01);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = FastMath.toRadians(14.23);
      assertEquals(0.2483603525587931, double0, 0.01);
      
      float float0 = FastMath.nextAfter(1106.292F, 0.2483603525587931);
      assertEquals(1106.2919F, float0, 0.01F);
      
      double double1 = FastMath.cosh(1106.292F);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      float float1 = FastMath.nextAfter(1106.2919F, 14.23);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1106.2917F, float1, 0.01F);
      
      double double2 = FastMath.nextAfter((-0.1428571423679182), (double) 1106.292F);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-0.14285714236791816), double2, 0.01);
      
      double double3 = FastMath.cbrt(132.186402);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(5.094038940639787, double3, 0.01);
      
      double double4 = FastMath.atan2(Double.POSITIVE_INFINITY, 5.094038940639787);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(1.5707963267948966, double4, 0.01);
      
      double double5 = FastMath.random();
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      Random.setNextRandom(2140023846);
      double double6 = FastMath.floor(0.0);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      double double7 = FastMath.pow(180.0, (double) 1106.292F);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = FastMath.sinh((-1318.98115619));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double double1 = FastMath.hypot((-1318.98115619), 2685.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2991.477275592163, double1, 0.01);
      
      double double2 = FastMath.asinh(3614.46276887368);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(8.885845711591863, double2, 0.01);
      
      double double3 = FastMath.acos(709.782712893384);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      float float0 = FastMath.min((-4.8828125E-4F), Float.POSITIVE_INFINITY);
      assertEquals((-4.8828125E-4F), float0, 0.01F);
      
      double double4 = FastMath.acosh(3614.46276887368);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(8.885845673319745, double4, 0.01);
      
      double double5 = FastMath.nextAfter(Double.NEGATIVE_INFINITY, (-398.557331));
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals((-1.7976931348623157E308), double5, 0.01);
      
      double double6 = FastMath.log1p(7.196457718729758E281);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(649.0000000527755, double6, 0.01);
      
      double double7 = FastMath.nextUp(0.19999954120254515);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(0.19999954120254518, double7, 0.01);
      
      double double8 = FastMath.sin(2991.477275592163);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(0.629624180905291, double8, 0.01);
      
      double double9 = FastMath.sqrt(7.196457718729758E281);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(8.483193808189082E140, double9, 0.01);
      
      double double10 = FastMath.asin(129.80313);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals(double10, double3, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals(Double.NaN, double10, 0.01);
      
      double double11 = FastMath.ulp(0.7853981633974483);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertEquals(1.1102230246251565E-16, double11, 0.01);
      
      double double12 = FastMath.sqrt((-1.7976931348623157E308));
      assertEquals(double12, double3, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertEquals(double12, double10, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertEquals(Double.NaN, double12, 0.01);
      
      double double13 = FastMath.atanh((-4.8828125E-4F));
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertEquals(double13, double11, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertEquals((-4.882812888051129E-4), double13, 0.01);
      
      double double14 = FastMath.random();
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertEquals(double14, double13, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertEquals(double14, double11, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertEquals(0.0, double14, 0.01);
      
      double double15 = FastMath.tan(2442.441444786848);
      assertNotEquals(double15, double4, 0.01);
      assertNotEquals(double15, double12, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertNotEquals(double15, double9, 0.01);
      assertNotEquals(double15, double1, 0.01);
      assertNotEquals(double15, double8, 0.01);
      assertNotEquals(double15, double6, 0.01);
      assertNotEquals(double15, double10, 0.01);
      assertNotEquals(double15, double0, 0.01);
      assertNotEquals(double15, double2, 0.01);
      assertNotEquals(double15, double13, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertNotEquals(double15, double3, 0.01);
      assertNotEquals(double15, double14, 0.01);
      assertNotEquals(double15, double5, 0.01);
      assertEquals(6.760958459312525, double15, 0.01);
      
      double double16 = FastMath.asin(8.885845711591863);
      assertNotEquals(double16, double5, 0.01);
      assertEquals(double16, double10, 0.01);
      assertNotEquals(double16, double13, 0.01);
      assertNotEquals(double16, double7, 0.01);
      assertNotEquals(double16, double2, 0.01);
      assertNotEquals(double16, double15, 0.01);
      assertEquals(double16, double3, 0.01);
      assertNotEquals(double16, double14, 0.01);
      assertNotEquals(double16, double11, 0.01);
      assertNotEquals(double16, double8, 0.01);
      assertNotEquals(double16, double1, 0.01);
      assertNotEquals(double16, double9, 0.01);
      assertNotEquals(double16, double4, 0.01);
      assertEquals(double16, double12, 0.01);
      assertNotEquals(double16, double6, 0.01);
      assertNotEquals(double16, double0, 0.01);
      assertEquals(Double.NaN, double16, 0.01);
      
      double double17 = FastMath.asinh((-4.547473508864641E-13));
      assertNotEquals(double17, double8, 0.01);
      assertNotEquals(double17, double4, 0.01);
      assertNotEquals(double17, double12, 0.01);
      assertEquals(double17, double11, 0.01);
      assertNotEquals(double17, double1, 0.01);
      assertNotEquals(double17, double9, 0.01);
      assertEquals(double17, double14, 0.01);
      assertNotEquals(double17, double10, 0.01);
      assertEquals(double17, double13, 0.01);
      assertNotEquals(double17, double15, 0.01);
      assertNotEquals(double17, double7, 0.01);
      assertNotEquals(double17, double6, 0.01);
      assertNotEquals(double17, double2, 0.01);
      assertNotEquals(double17, double3, 0.01);
      assertNotEquals(double17, double5, 0.01);
      assertNotEquals(double17, double16, 0.01);
      assertNotEquals(double17, double0, 0.01);
      assertEquals((-4.547473508864641E-13), double17, 0.01);
      
      long long0 = FastMath.abs(907L);
      assertEquals(907L, long0);
      
      float float1 = FastMath.ulp((-4.8828125E-4F));
      assertEquals(float1, float0, 0.01F);
      assertEquals(5.820766E-11F, float1, 0.01F);
      
      double double18 = FastMath.atanh((-224.6));
      assertEquals(double18, double10, 0.01);
      assertNotEquals(double18, double0, 0.01);
      assertNotEquals(double18, double7, 0.01);
      assertNotEquals(double18, double5, 0.01);
      assertNotEquals(double18, double13, 0.01);
      assertNotEquals(double18, double8, 0.01);
      assertNotEquals(double18, double17, 0.01);
      assertEquals(double18, double16, 0.01);
      assertNotEquals(double18, double9, 0.01);
      assertNotEquals(double18, double15, 0.01);
      assertEquals(double18, double3, 0.01);
      assertNotEquals(double18, double14, 0.01);
      assertNotEquals(double18, double2, 0.01);
      assertNotEquals(double18, double4, 0.01);
      assertNotEquals(double18, double1, 0.01);
      assertNotEquals(double18, double11, 0.01);
      assertNotEquals(double18, double6, 0.01);
      assertEquals(double18, double12, 0.01);
      assertEquals(Double.NaN, double18, 0.01);
      
      double double19 = FastMath.scalb((-2350.016), 411);
      assertNotEquals(double19, double2, 0.01);
      assertNotEquals(double19, double15, 0.01);
      assertNotEquals(double19, double6, 0.01);
      assertNotEquals(double19, double13, 0.01);
      assertNotEquals(double19, double14, 0.01);
      assertNotEquals(double19, double7, 0.01);
      assertNotEquals(double19, double9, 0.01);
      assertNotEquals(double19, double1, 0.01);
      assertNotEquals(double19, double10, 0.01);
      assertNotEquals(double19, double11, 0.01);
      assertNotEquals(double19, double8, 0.01);
      assertNotEquals(double19, double4, 0.01);
      assertNotEquals(double19, double12, 0.01);
      assertNotEquals(double19, double5, 0.01);
      assertNotEquals(double19, double3, 0.01);
      assertNotEquals(double19, double18, 0.01);
      assertNotEquals(double19, double0, 0.01);
      assertNotEquals(double19, double16, 0.01);
      assertNotEquals(double19, double17, 0.01);
      assertEquals((-1.242793682842068E127), double19, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = FastMath.min((-9223372036854775808L), (-9223372036854775808L));
      assertEquals((-9223372036854775808L), long0);
      
      float float0 = FastMath.copySign((float) (-9223372036854775808L), 3168.7314F);
      assertEquals(9.223372E18F, float0, 0.01F);
      
      double double0 = FastMath.ceil(1.9782818312325887E-8);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = FastMath.toRadians(573.8965571330889);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(10.01638448783215, double1, 0.01);
      
      double double2 = FastMath.ceil(1.9782818312325887E-8);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      double double3 = FastMath.atan((-1253.049217771));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-1.5699982737148408), double3, 0.01);
      
      float float1 = FastMath.copySign(1628.8043F, 0.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1628.8043F, float1, 0.01F);
      
      double double4 = FastMath.cosh(0.0);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(1.0, double4, 0.01);
      
      double double5 = FastMath.log10(1.0);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      float float2 = FastMath.min(1315.0F, 1315.0F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(1315.0F, float2, 0.01F);
      
      double double6 = FastMath.asin(0.0);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      double double7 = FastMath.cbrt(2824.093862696815);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(14.134909828990438, double7, 0.01);
      
      double double8 = FastMath.log((double) 1628.8043F, (double) (-9223372036854775808L));
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      
      float float3 = FastMath.copySign(3168.7314F, 0.0F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(3168.7314F, float3, 0.01F);
      
      long long1 = FastMath.min((-9223372036854775808L), 0L);
      assertTrue(long1 == long0);
      assertEquals((-9223372036854775808L), long1);
      
      double double9 = FastMath.log1p((-3296.90783146241));
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertEquals(double9, double8, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = FastMath.min((-9223372036854775808L), (-2073L));
      assertEquals((-9223372036854775808L), long0);
      
      double double0 = FastMath.atanh((-8.893078799284047E-8));
      assertEquals((-8.893078799284071E-8), double0, 0.01);
      
      float float0 = FastMath.scalb((float) (-9223372036854775808L), 3559);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      
      double double1 = FastMath.atan2((-8.893078799284047E-8), (-253.6));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-3.14159265323912), double1, 0.01);
      
      double double2 = FastMath.acosh(2041.79);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(8.31472927367576, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = FastMath.asin((-2.462631860370667E-9));
      assertEquals((-2.462631860370667E-9), double0, 0.01);
      
      long long0 = FastMath.round((-2.462631860370667E-9));
      assertEquals(0L, long0);
      
      double double1 = FastMath.acosh(0L);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      float float0 = FastMath.max((float) 0L, (float) 0L);
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = FastMath.signum(2731.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      
      double double2 = FastMath.log((double) 2731.0F, (double) 2731.0F);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      long long1 = FastMath.abs(4503599627370496L);
      assertFalse(long1 == long0);
      assertEquals(4503599627370496L, long1);
      
      float float2 = FastMath.abs(0.0F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      float float3 = FastMath.min((float) 0L, (float) 4503599627370496L);
      assertEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      
      double double3 = FastMath.copySign(1.0, (-5.207000323380292E-8));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-1.0), double3, 0.01);
      
      double double4 = FastMath.scalb((-1.5707963267948966), 27);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals((-2.1082871413315654E8), double4, 0.01);
      
      double double5 = FastMath.log1p(0L);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = FastMath.exp((-2.462631860370667E-9));
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(0.9999999975373681, double6, 0.01);
      
      float float4 = FastMath.scalb((float) 27, 128);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = FastMath.max(0L, 0L);
      assertEquals(0L, long0);
      
      float float0 = FastMath.signum((float) 0L);
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = FastMath.log(1.3430713954289087E118, (double) 0.0F);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double double1 = FastMath.nextUp(Double.NEGATIVE_INFINITY);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.7976931348623157E308), double1, 0.01);
      
      double double2 = FastMath.acosh(0.36900103092193604);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      float float1 = FastMath.ulp(0.0F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1.4E-45F, float1, 0.01F);
      
      double double3 = FastMath.copySign((-1.7976931348623157E308), 0.0);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(1.7976931348623157E308, double3, 0.01);
      
      float float2 = FastMath.ulp((float) 0L);
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(1.4E-45F, float2, 0.01F);
      
      double double4 = FastMath.hypot(1.3430713954289087E118, 0.0F);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(1.3430713954289087E118, double4, 0.01);
      
      double double5 = FastMath.floor(2.356194490192345);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(2.0, double5, 0.01);
      
      double double6 = FastMath.scalb(0.0, 0);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      double double7 = FastMath.signum(1882.32);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(1.0, double7, 0.01);
      
      int int0 = FastMath.round((float) 0L);
      assertEquals(0, int0);
      
      float float3 = FastMath.signum(755.4207F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(1.0F, float3, 0.01F);
      
      double double8 = FastMath.cosh(0.0);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double7, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(1.0, double8, 0.01);
      
      double double9 = FastMath.asinh(1882.32);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertEquals(8.233407588691568, double9, 0.01);
      
      long long1 = FastMath.min(0L, 1073741824L);
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      double double10 = FastMath.random();
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertEquals(double10, double6, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertEquals(0.0, double10, 0.01);
      
      double double11 = FastMath.cosh(0.0);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertEquals(double11, double8, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertEquals(double11, double7, 0.01);
      assertEquals(1.0, double11, 0.01);
      
      double double12 = FastMath.ceil(455.343);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertEquals(456.0, double12, 0.01);
      
      double double13 = FastMath.atan2((-2158.014064), (-3282.17));
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertEquals((-2.5599657846489423), double13, 0.01);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      FastMath.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = FastMath.toRadians((-4.503599627370496E15));
      assertEquals((-7.860264168920489E13), double0, 0.01);
      
      int int0 = FastMath.min((-2573), (-3522));
      assertEquals((-3522), int0);
      
      double double1 = FastMath.pow((double) (-2573), 636);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      int int1 = FastMath.min(52, 446);
      assertFalse(int1 == int0);
      assertEquals(52, int1);
      
      float float0 = FastMath.nextAfter((float) (-2573), (-4063.968243));
      assertEquals((-2573.0002F), float0, 0.01F);
      
      float float1 = FastMath.min(65.49801F, Float.POSITIVE_INFINITY);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(65.49801F, float1, 0.01F);
      
      int int2 = FastMath.getExponent(804.9346739);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(9, int2);
      
      double double2 = FastMath.tan((-7.860264168920489E13));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-0.2853087886953114), double2, 0.01);
      
      double double3 = FastMath.nextAfter(804.9346739, (-4063.968243));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(804.9346738999999, double3, 0.01);
      
      double double4 = FastMath.tan((-1.830335419852293E-147));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals((-1.830335419852293E-147), double4, 0.01);
      
      double double5 = FastMath.nextAfter((double) Float.POSITIVE_INFINITY, (double) (-2573.0002F));
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(1.7976931348623157E308, double5, 0.01);
      
      long long0 = FastMath.min(1L, (long) 52);
      assertEquals(1L, long0);
      
      double double6 = FastMath.atan((-48.194839482));
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals((-1.5500501942360783), double6, 0.01);
      
      double double7 = FastMath.nextAfter((-4173.80322), (-2191.4));
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals((-4173.803219999999), double7, 0.01);
      
      int int3 = FastMath.getExponent(996.330386596);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(9, int3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = FastMath.nextUp(1.4E-45F);
      assertEquals(2.8E-45F, float0, 0.01F);
      
      float float1 = FastMath.ulp(Float.NaN);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(Float.NaN, float1, 0.01F);
      
      float float2 = FastMath.signum(0.0F);
      assertEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      double double0 = FastMath.sin(0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = FastMath.log10(0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01);
      
      float float3 = FastMath.ulp((-3835.6648F));
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(float3, float0, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals(2.4414062E-4F, float3, 0.01F);
      
      double double2 = FastMath.floor(2.4414062E-4F);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = FastMath.sinh((-3196.406182888395));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float float0 = FastMath.min(0.5F, 1.0F);
      assertEquals(0.5F, float0, 0.01F);
      
      double double0 = FastMath.atan2(1281.74, 1158.4);
      assertEquals(0.835901462055968, double0, 0.01);
      
      int int0 = FastMath.abs(2144679976);
      assertEquals(2144679976, int0);
      
      double double1 = FastMath.acos(7.494218049456063E304);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      float float1 = FastMath.max(Float.NEGATIVE_INFINITY, Float.NaN);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(Float.NaN, float1, 0.01F);
      
      double double2 = FastMath.random();
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = FastMath.atan2(0.7937005259840998, Float.NEGATIVE_INFINITY);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(3.141592653589793, double3, 0.01);
      
      double double4 = FastMath.exp(0.15);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(1.161834242728283, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = FastMath.ceil(0.3333333134651184);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = FastMath.rint(0.125);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      float float0 = FastMath.scalb((-1380.9906F), 413);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      
      double double2 = FastMath.nextUp((double) Float.NEGATIVE_INFINITY);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-1.7976931348623157E308), double2, 0.01);
      
      double double3 = FastMath.IEEEremainder(0.0, (-4826.47));
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = FastMath.log1p((-1.7976931348623157E308));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = FastMath.atan(1761.81801044);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(1.5702287313414014, double5, 0.01);
      
      long long0 = FastMath.abs((long) 413);
      assertEquals(413L, long0);
      
      double double6 = FastMath.log10((-4826.47));
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = FastMath.signum(0.0);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(0.0, double7, 0.01);
      
      float float1 = FastMath.copySign((-1380.9906F), (-1380.9906F));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1380.9906F), float1, 0.01F);
      
      int int0 = FastMath.round(0.0F);
      assertEquals(0, int0);
      
      double double8 = FastMath.tan((-2512.12));
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(2.2594351084503668, double8, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float float0 = FastMath.abs(2335.494F);
      assertEquals(2335.494F, float0, 0.01F);
      
      float float1 = FastMath.ulp(2335.494F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(2.4414062E-4F, float1, 0.01F);
      
      float float2 = FastMath.scalb(2335.494F, 1679);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, float2, 0.01F);
      
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = FastMath.atanh((-996.1948750652));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = FastMath.asin(16.33);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = FastMath.random();
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.1, double3, 0.01);
      
      double double4 = FastMath.rint(9.688634479836055E-19);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = FastMath.nextAfter((double) 2.4414062E-4F, 1.9699272335463627E-8);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(2.4414062499999997E-4, double5, 0.01);
      
      double double6 = FastMath.random();
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(0.2, double6, 0.01);
      
      float float3 = FastMath.nextAfter(Float.POSITIVE_INFINITY, 2776.430622);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(3.4028235E38F, float3, 0.01F);
      
      double double7 = FastMath.asinh(Double.NaN);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = FastMath.abs((-1952));
      assertEquals(1952, int0);
      
      double double0 = FastMath.scalb((double) 1952, 2789);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      float float0 = FastMath.nextAfter(2578.2288F, (double) (-1952));
      assertEquals(2578.2285F, float0, 0.01F);
      
      double double1 = FastMath.asin(1952);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = FastMath.cosh(2789);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      double double3 = FastMath.min((double) (-1952), 175.182);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals((-1952.0), double3, 0.01);
      
      double double4 = FastMath.cosh(1952);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01);
      
      double double5 = FastMath.pow((double) 2578.2288F, 1952);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = FastMath.ulp(Double.POSITIVE_INFINITY);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double6, 0.01);
      
      double double7 = FastMath.sqrt(1952);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(44.181444068749045, double7, 0.01);
      
      double double8 = FastMath.sinh(5.669184079525E-24);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertEquals(5.669184079525E-24, double8, 0.01);
      
      double double9 = FastMath.pow((-203.646264), 2789);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(double9, double5, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(double9, double1, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
      
      double double10 = FastMath.scalb((-2905.4268), 1952);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double10, 0.01);
      
      float float1 = FastMath.nextAfter((float) 2789, Double.POSITIVE_INFINITY);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(2789.0002F, float1, 0.01F);
      
      double double11 = FastMath.cos(Double.POSITIVE_INFINITY);
      assertEquals(double11, double5, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertEquals(double11, double1, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertEquals(double11, double9, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertEquals(Double.NaN, double11, 0.01);
      
      double double12 = FastMath.tan(1024.0);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertEquals((-0.16056393283879805), double12, 0.01);
      
      double double13 = FastMath.cbrt((-317.5124222073475));
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertEquals((-6.822133918630989), double13, 0.01);
      
      double double14 = FastMath.scalb(2713.2651087174, 12);
      assertNotEquals(double14, double2, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertEquals(1.111353388530647E7, double14, 0.01);
      
      double double15 = FastMath.tan(1.111353388530647E7);
      assertNotEquals(double15, double8, 0.01);
      assertNotEquals(double15, double14, 0.01);
      assertNotEquals(double15, double13, 0.01);
      assertNotEquals(double15, double5, 0.01);
      assertNotEquals(double15, double4, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertNotEquals(double15, double6, 0.01);
      assertNotEquals(double15, double2, 0.01);
      assertNotEquals(double15, double1, 0.01);
      assertNotEquals(double15, double3, 0.01);
      assertNotEquals(double15, double10, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertNotEquals(double15, double9, 0.01);
      assertNotEquals(double15, double0, 0.01);
      assertNotEquals(double15, double12, 0.01);
      assertEquals((-1.322060097387702), double15, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = FastMath.exp((-2.281578975407609E-22));
      assertEquals(1.0, double0, 0.01);
      
      double double1 = FastMath.rint((-2.281578975407609E-22));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(-0.0, double1, 0.01);
      
      float float0 = FastMath.max(1465.0F, 824.047F);
      assertEquals(1465.0F, float0, 0.01F);
      
      double double2 = FastMath.scalb((-2.281578975407609E-22), 1500);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01);
      
      double double3 = FastMath.acos(824.047F);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = FastMath.pow(0.01745329052209854, (-2.281578975407609E-22));
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(1.0, double4, 0.01);
      
      double double5 = FastMath.abs(434.0283467312525);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(434.0283467312525, double5, 0.01);
      
      double double6 = FastMath.random();
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      double double7 = FastMath.exp(434.0283467312525);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(3.1341225557051627E188, double7, 0.01);
      
      double double8 = FastMath.ceil(2093.17);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(2094.0, double8, 0.01);
      
      double double9 = FastMath.nextUp(1.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(1.0100000000000002, double9, 0.01);
      
      double double10 = FastMath.atanh(2094.0);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(double10, double3, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertEquals(Double.NaN, double10, 0.01);
      
      double double11 = FastMath.floor((-2464.8756501163034));
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertEquals((-2465.0), double11, 0.01);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float float0 = FastMath.scalb(1.4E-45F, 11);
      assertEquals(2.87E-42F, float0, 0.01F);
      
      double double0 = FastMath.asin(2.87E-42F);
      assertEquals(2.8698592549372254E-42, double0, 0.01);
      
      float float1 = FastMath.scalb(1.4E-45F, 11);
      assertEquals(float1, float0, 0.01F);
      assertEquals(2.87E-42F, float1, 0.01F);
      
      float float2 = FastMath.ulp((-1.0F));
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(1.1920929E-7F, float2, 0.01F);
      
      int int0 = FastMath.abs(11);
      assertEquals(11, int0);
      
      double double1 = FastMath.acos((-173.58550628389418));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = FastMath.tanh((-5.207000323380292E-8));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-5.207000323380287E-8), double2, 0.01);
      
      double double3 = FastMath.pow((-198.356), Double.NaN);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      float float3 = FastMath.nextUp(Float.NEGATIVE_INFINITY);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals((-3.4028235E38F), float3, 0.01F);
      
      double double4 = FastMath.asinh(3472.0);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(8.84563327707884, double4, 0.01);
      
      double double5 = FastMath.rint(2.87E-42F);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = FastMath.nextUp((double) 11);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(11.000000000000002, double6, 0.01);
      
      float float4 = FastMath.nextUp(1.4E-45F);
      assertEquals(float4, float0, 0.01F);
      assertEquals(float4, float2, 0.01F);
      assertEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertEquals(2.8E-45F, float4, 0.01F);
      
      double double7 = FastMath.toRadians(926.607322);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(16.172348641987288, double7, 0.01);
      
      double double8 = FastMath.hypot(Double.NaN, 1.4E-45F);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(double8, double3, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      
      Random.setNextRandom(746);
      double double9 = FastMath.nextAfter(1.5707963267948966, (-1150.376));
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(1.5707963267948963, double9, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = FastMath.ulp(1.4E-45F);
      assertEquals(1.4E-45F, float0, 0.01F);
      
      double double0 = FastMath.scalb((-915.09693969), (-1726));
      assertEquals(-0.0, double0, 0.01);
      
      double double1 = FastMath.tan(1.4E-45F);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.401298464324817E-45, double1, 0.01);
      
      double double2 = FastMath.max(877.5994577237979, (double) 1.4E-45F);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(877.5994577237979, double2, 0.01);
      
      double double3 = FastMath.ulp(877.5994577237979);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(1.1368683772161603E-13, double3, 0.01);
      
      double double4 = FastMath.ulp((double) 1.4E-45F);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(3.111507638930571E-61, double4, 0.01);
      
      double double5 = FastMath.toRadians((-1744.0));
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals((-30.438542154781107), double5, 0.01);
      
      double double6 = FastMath.abs(Double.POSITIVE_INFINITY);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double6, 0.01);
      
      double double7 = FastMath.log1p(3.111507638930571E-61);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(3.111507638930571E-61, double7, 0.01);
      
      Random.setNextRandom(5);
      double double8 = FastMath.ulp(Double.POSITIVE_INFINITY);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(double8, double6, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double8, 0.01);
      
      double double9 = FastMath.cosh((-915.09693969));
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(double9, double8, 0.01);
      assertEquals(double9, double6, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double9, 0.01);
      
      double double10 = FastMath.atan2(0.7249995199969751, (-915.09693969));
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals(3.1408003884899314, double10, 0.01);
      
      double double11 = FastMath.tan((-3086.89428195));
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertEquals(3.4841646664505252, double11, 0.01);
      
      double double12 = FastMath.acosh(3.1408003884899314);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertEquals(1.811260212609926, double12, 0.01);
      
      float float1 = FastMath.nextAfter((-1.0F), 1.811260212609926);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-0.99999994F), float1, 0.01F);
      
      double double13 = FastMath.rint(Double.POSITIVE_INFINITY);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertEquals(double13, double9, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertEquals(double13, double6, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertEquals(double13, double8, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double13, 0.01);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = FastMath.asin((-108.646322));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = FastMath.rint(Double.NaN);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      float float0 = FastMath.scalb(2056.6636F, 130);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      double double2 = FastMath.min((-1513.7730873052171), (-1395.0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-1513.7730873052171), double2, 0.01);
      
      float float1 = FastMath.nextUp(2.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(2.0000002F, float1, 0.01F);
      
      double double3 = FastMath.acosh((-753.0));
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      long long0 = FastMath.abs(2062L);
      assertEquals(2062L, long0);
      
      double double4 = FastMath.hypot((-1513.7730873052171), Double.NaN);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = FastMath.ceil(9.219544613762692E-9);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = FastMath.ulp(1.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.220446049250313E-16, double1, 0.01);
      
      double double2 = FastMath.ceil(0.4000000000000057);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      Random.setNextRandom(1024);
      float float0 = FastMath.scalb(1814.9874F, 1024);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      double double3 = FastMath.exp((-2.2250738585072014E-308));
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(1.0, double3, 0.01);
      
      double double4 = FastMath.atanh((-750.44617455208));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = FastMath.asin((-9.007199254740992E15));
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = FastMath.scalb((double) Float.POSITIVE_INFINITY, 1024);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double6, 0.01);
      
      double double7 = FastMath.acosh(Double.NaN);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      double double8 = FastMath.min(1.0, (-2.2250738585072014E-308));
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals((-2.2250738585072014E-308), double8, 0.01);
      
      double double9 = FastMath.sqrt(50.98519856568);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(7.140392045656877, double9, 0.01);
      
      double double10 = FastMath.tan(1.0);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(1.5574077246549023, double10, 0.01);
      
      double double11 = FastMath.toRadians(1.0);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertEquals(0.017453292519943295, double11, 0.01);
      
      double double12 = FastMath.atanh(1144.7089982500459);
      assertEquals(double12, double4, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertEquals(double12, double5, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertEquals(double12, double7, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertEquals(Double.NaN, double12, 0.01);
      
      double double13 = FastMath.pow(1144.7089982500459, 1024);
      assertEquals(double13, double4, 0.01);
      assertEquals(double13, double5, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertEquals(double13, double12, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertEquals(double13, double7, 0.01);
      assertEquals(Double.NaN, double13, 0.01);
      
      double double14 = FastMath.acosh(1.0);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertEquals(double14, double1, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertEquals(double14, double8, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertEquals(0.0, double14, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float float0 = FastMath.nextAfter(0.0F, 0.0);
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = FastMath.asin(0.0F);
      assertEquals(0.0, double0, 0.01);
      
      float float1 = FastMath.ulp(0.0F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1.4E-45F, float1, 0.01F);
      
      double double1 = FastMath.toRadians((-4237.432994625));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-73.95715758884943), double1, 0.01);
      
      double double2 = FastMath.max((-4237.432994625), 0.0);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = FastMath.scalb(Double.NEGATIVE_INFINITY, (-1953));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01);
      
      double double4 = FastMath.atan((-1.118706134478866E-7));
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals((-1.1187061344788614E-7), double4, 0.01);
      
      long long0 = FastMath.abs((long) (-1953));
      assertEquals(1953L, long0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = FastMath.rint(0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = FastMath.floor(0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = FastMath.scalb(0.0, 688);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = FastMath.expm1((-326.1));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals((-1.0), double3, 0.01);
      
      double double4 = FastMath.max(0.0, 0.0);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = FastMath.expm1(0.0);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = FastMath.acos(0.0);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(1.5707963267948966, double6, 0.01);
      
      double double7 = FastMath.rint(0.0);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(0.0, double7, 0.01);
      
      double double8 = FastMath.tanh(0.0);
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double4, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(double8, double5, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double7, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(0.0, double8, 0.01);
      
      long long0 = FastMath.min((long) 688, 3518L);
      assertEquals(688L, long0);
      
      double double9 = FastMath.log1p(5850.2300464);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(8.674407182465334, double9, 0.01);
      
      double double10 = FastMath.log1p(0.0);
      assertEquals(double10, double2, 0.01);
      assertEquals(double10, double7, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertEquals(double10, double5, 0.01);
      assertEquals(double10, double1, 0.01);
      assertEquals(double10, double4, 0.01);
      assertEquals(double10, double8, 0.01);
      assertEquals(double10, double0, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertEquals(0.0, double10, 0.01);
      
      int int0 = FastMath.getExponent((-326.1));
      assertEquals(8, int0);
      
      float float0 = FastMath.ulp((float) 688L);
      assertEquals(6.1035156E-5F, float0, 0.01F);
      
      double double11 = FastMath.min(2.85040095144011776E17, 3199.23931791541);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertEquals(3199.23931791541, double11, 0.01);
      
      double double12 = FastMath.rint(3199.23931791541);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertEquals(3199.0, double12, 0.01);
      
      double double13 = FastMath.sqrt((-32.606708));
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertEquals(Double.NaN, double13, 0.01);
      
      double double14 = FastMath.log(0.0, 4.9436516047443576E-154);
      assertEquals(double14, double5, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertEquals(double14, double7, 0.01);
      assertEquals(double14, double2, 0.01);
      assertEquals(double14, double0, 0.01);
      assertEquals(double14, double4, 0.01);
      assertEquals(double14, double8, 0.01);
      assertEquals(double14, double1, 0.01);
      assertEquals(double14, double10, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertEquals(0.0, double14, 0.01);
      
      long long1 = FastMath.abs(5648769086999809661L);
      assertFalse(long1 == long0);
      assertEquals(5648769086999809661L, long1);
      
      double double15 = FastMath.tan(2.85040095144011776E17);
      assertNotEquals(double15, double5, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertNotEquals(double15, double9, 0.01);
      assertNotEquals(double15, double6, 0.01);
      assertNotEquals(double15, double13, 0.01);
      assertNotEquals(double15, double10, 0.01);
      assertNotEquals(double15, double3, 0.01);
      assertNotEquals(double15, double12, 0.01);
      assertNotEquals(double15, double1, 0.01);
      assertNotEquals(double15, double2, 0.01);
      assertNotEquals(double15, double0, 0.01);
      assertNotEquals(double15, double4, 0.01);
      assertNotEquals(double15, double8, 0.01);
      assertNotEquals(double15, double14, 0.01);
      assertEquals((-108.83538159540501), double15, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = FastMath.tanh(0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = FastMath.atan2(0.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      float float0 = FastMath.copySign((-1423.6F), (-1423.6F));
      assertEquals((-1423.6F), float0, 0.01F);
      
      float float1 = FastMath.copySign((-1423.6F), 224.92F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1423.6F, float1, 0.01F);
      
      double double2 = FastMath.nextAfter((double) (-1423.6F), 0.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-1423.5999755859373), double2, 0.01);
      
      double double3 = FastMath.cos(0.0);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(1.0, double3, 0.01);
      
      double double4 = FastMath.max(0.0, (-1117.984264));
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      long long0 = FastMath.abs((-5034868814120038111L));
      assertEquals(5034868814120038111L, long0);
      
      int int0 = FastMath.min(124, 124);
      assertEquals(124, int0);
      
      double double5 = FastMath.ceil(0.0);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      int int1 = FastMath.max(0, 530);
      assertFalse(int1 == int0);
      assertEquals(530, int1);
      
      double double6 = FastMath.expm1((-1423.5999755859373));
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals((-1.0), double6, 0.01);
      
      double double7 = FastMath.toDegrees(0.0);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(0.0, double7, 0.01);
      
      double double8 = FastMath.cbrt((-5034868814120038111L));
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertEquals((-1713941.7309962665), double8, 0.01);
      
      double double9 = FastMath.IEEEremainder(0.0, 1423.6F);
      assertEquals(double9, double4, 0.01);
      assertEquals(double9, double5, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(double9, double7, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(double9, double0, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(double9, double1, 0.01);
      assertEquals(0.0, double9, 0.01);
      
      int int2 = FastMath.abs(2825);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2825, int2);
      
      double double10 = FastMath.cos(3294198.0);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals(0.7910146852024715, double10, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float float0 = FastMath.scalb((-1.0F), 1875);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
      
      double double0 = FastMath.tanh(0.0);
      assertEquals(0.0, double0, 0.01);
      
      long long0 = FastMath.abs((long) 1875);
      assertEquals(1875L, long0);
      
      int int0 = FastMath.getExponent(3235.9753F);
      assertEquals(11, int0);
      
      double double1 = FastMath.acosh((-4401.8653673315));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = FastMath.cos(0.0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      int int1 = FastMath.round(Float.NEGATIVE_INFINITY);
      assertFalse(int1 == int0);
      assertEquals(Integer.MIN_VALUE, int1);
      
      double double3 = FastMath.IEEEremainder(3235.9753F, Double.NaN);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = FastMath.ceil(0.041666666666621166);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(1.0, double4, 0.01);
      
      double double5 = FastMath.atan((-515.24672));
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals((-1.5688555114425706), double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = FastMath.expm1(0.0);
      assertEquals(0.0, double0, 0.01);
      
      float float0 = FastMath.max(170.761F, 170.761F);
      assertEquals(170.761F, float0, 0.01F);
      
      long long0 = FastMath.min(874L, 0L);
      assertEquals(0L, long0);
      
      int int0 = FastMath.getExponent((float) 0L);
      assertEquals((-127), int0);
      
      double double1 = FastMath.asinh((-2.6437112632041807E-8));
      assertEquals(double1, double0, 0.01);
      assertEquals((-2.6437112632041804E-8), double1, 0.01);
      
      float float1 = FastMath.ulp((float) 0L);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.4E-45F, float1, 0.01F);
      
      double double2 = FastMath.asin(0.0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = FastMath.ulp(0.0);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(4.9E-324, double3, 0.01);
      
      double double4 = FastMath.nextAfter(1348.1, 6.837671137556327E30);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(1348.1000000000001, double4, 0.01);
      
      float float2 = FastMath.nextUp((float) 874L);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(874.00006F, float2, 0.01F);
      
      double double5 = FastMath.atanh(0.0);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = FastMath.cosh(1.1122405335641184E307);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double6, 0.01);
      
      double double7 = FastMath.tanh(Double.POSITIVE_INFINITY);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(1.0, double7, 0.01);
      
      double double8 = FastMath.atan2((-1.002706067002219), Double.POSITIVE_INFINITY);
      assertEquals(double8, double2, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double0, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(double8, double5, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(-0.0, double8, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = FastMath.toRadians(14.23);
      assertEquals(0.2483603525587931, double0, 0.01);
      
      float float0 = FastMath.nextAfter(1106.292F, 0.2483603525587931);
      assertEquals(1106.2919F, float0, 0.01F);
      
      double double1 = FastMath.E;
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.718281828459045, double1, 0.01);
      
      float float1 = FastMath.nextUp(1106.292F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1106.2921F, float1, 0.01F);
      
      double double2 = FastMath.exp(1106.292F);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      double double3 = FastMath.hypot(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01);
      
      double double4 = FastMath.atan2(2.718281828459045, Double.POSITIVE_INFINITY);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = FastMath.random();
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      Random.setNextRandom(2140023846);
      double double6 = FastMath.floor(0.0);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      double double7 = FastMath.pow(180.0, (double) 1106.292F);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double7, 0.01);
      
      double double8 = FastMath.min(180.0, 454.794);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(180.0, double8, 0.01);
      
      double double9 = FastMath.max(326.7, 1.272789478302002);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(326.7, double9, 0.01);
      
      double double10 = FastMath.cbrt(180.0);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals(5.646216173286171, double10, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float float0 = FastMath.max((-1951.3828F), 1286.71F);
      assertEquals(1286.71F, float0, 0.01F);
      
      double double0 = FastMath.tanh(3583.0);
      assertEquals(1.0, double0, 0.01);
      
      int int0 = FastMath.abs((-1005682688));
      assertEquals(1005682688, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = FastMath.scalb(2431.3523, 5152);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      float float0 = FastMath.nextUp((-1.0F));
      assertEquals((-0.99999994F), float0, 0.01F);
      
      double double1 = FastMath.atan2(4945.371, 2431.3523);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.1138574117714695, double1, 0.01);
      
      float float1 = FastMath.min((float) 5152, (-657.561F));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-657.561F), float1, 0.01F);
      
      double double2 = FastMath.cbrt((-1.0F));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-1.0), double2, 0.01);
      
      double double3 = FastMath.asin((-1628.917314406478));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = FastMath.asinh((-0.99999994F));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals((-0.8813735448726939), double4, 0.01);
      
      double double5 = FastMath.cos(1098.7062199);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(0.65907447373163, double5, 0.01);
      
      String[] stringArray0 = new String[0];
      FastMath.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double double6 = FastMath.log(1098.7062199, 0.0);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double6, 0.01);
      
      double double7 = FastMath.cos(526.02);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals((-0.19550217130162192), double7, 0.01);
      
      double double8 = FastMath.pow((-2622.9823336086), 1440.83);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(double8, double3, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      
      double double9 = FastMath.sin(4945.371);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(0.48307496850607323, double9, 0.01);
      
      long long0 = FastMath.round(2975.0);
      assertEquals(2975L, long0);
      
      double double10 = FastMath.rint(903.2528658);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals(903.0, double10, 0.01);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      float float0 = FastMath.copySign(1479.3019F, 1572.2F);
      assertEquals(1479.3019F, float0, 0.01F);
      
      double double0 = FastMath.cos(1479.3019F);
      assertEquals((-0.9255692031466629), double0, 0.01);
      
      double double1 = FastMath.toDegrees(0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      float float1 = FastMath.nextAfter(1479.3019F, (double) 1479.3019F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1479.3019F, float1, 0.01F);
      
      double double2 = FastMath.abs((double) 1479.3019F);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1479.3018798828125, double2, 0.01);
      
      int int0 = FastMath.max(816, 0);
      assertEquals(816, int0);
      
      int int1 = FastMath.min(816, 1600);
      assertTrue(int1 == int0);
      assertEquals(816, int1);
      
      double double3 = FastMath.cos(816);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.6865303881402984, double3, 0.01);
      
      double double4 = FastMath.nextUp((double) 816);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(816.0000000000001, double4, 0.01);
      
      double double5 = FastMath.copySign((-3449.091021244), 816.0000000000001);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(3449.091021244, double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = FastMath.pow((-2214.9008371), (-2214.9008371));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = FastMath.tan(Double.NaN);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = FastMath.min((-2692.7486294067653), Double.NaN);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = FastMath.scalb((-2214.9008371), 17);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals((-2.903114825203712E8), double3, 0.01);
      
      double double4 = FastMath.pow(708.6154174804688, Double.NaN);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = FastMath.scalb((-1.0E-6), (-1023));
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals((-1.1125369294E-314), double5, 0.01);
      
      double double6 = FastMath.min((-2214.9008371), (-129.0044592));
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals((-2214.9008371), double6, 0.01);
      
      double double7 = FastMath.abs(0.19999954120254515);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(0.19999954120254515, double7, 0.01);
      
      double double8 = FastMath.random();
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(0.0, double8, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = FastMath.exp(887.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = FastMath.scalb(342.9254994206531, 8);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(87788.9278516872, double1, 0.01);
      
      float float0 = FastMath.copySign((float) 8, (-2294.09F));
      assertEquals((-8.0F), float0, 0.01F);
      
      double double2 = FastMath.pow(Double.POSITIVE_INFINITY, 466);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = FastMath.copySign(87788.9278516872, 0.0);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(87788.9278516872, double3, 0.01);
      
      int int0 = FastMath.min(466, 8);
      assertEquals(8, int0);
      
      double double4 = FastMath.floor(Double.NaN);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = FastMath.pow(3038.228603318254, 0);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(1.0, double5, 0.01);
      
      double double6 = FastMath.asinh((-177.197043751151));
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals((-5.870417497466427), double6, 0.01);
      
      double double7 = FastMath.abs(0.19999999999923582);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(0.19999999999923582, double7, 0.01);
      
      double double8 = FastMath.max((double) 466, 0.0);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(466.0, double8, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = FastMath.hypot(1722.2589697549, (-609.957870023));
      assertEquals(1827.0808854848776, double0, 0.01);
      
      long long0 = FastMath.abs((-9223372036854775808L));
      assertEquals((-9223372036854775808L), long0);
      
      double double1 = FastMath.copySign(1827.0808854848776, (-1.3839477920475328E-8));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1827.0808854848776), double1, 0.01);
      
      double double2 = FastMath.scalb((-609.957870023), (-1605));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(-0.0, double2, 0.01);
      
      double double3 = FastMath.tan((-9223372036854775808L));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-84.73931296875567), double3, 0.01);
      
      int int0 = FastMath.min((-1605), 1271);
      assertEquals((-1605), int0);
      
      double double4 = FastMath.IEEEremainder((-1701.849028977), (-1701.849028977));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(-0.0, double4, 0.01);
      
      long long1 = FastMath.round((double) (-1605));
      assertFalse(long1 == long0);
      assertEquals((-1605L), long1);
      
      double double5 = FastMath.abs((double) (-9223372036854775808L));
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(9.223372036854776E18, double5, 0.01);
      
      float float0 = FastMath.scalb((float) (-1605), (-1605));
      assertEquals(-0.0F, float0, 0.01F);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = ":M{BNV/uGhp+";
      stringArray0[2] = "*o&7r";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "TANGENT_TABLE_B";
      stringArray0[6] = "8FU(x0?yNc";
      stringArray0[7] = "";
      FastMath.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = FastMath.copySign((-2891.391), (-2891.391));
      assertEquals((-2891.391), double0, 0.01);
      
      int int0 = FastMath.round(0.0F);
      assertEquals(0, int0);
      
      float float0 = FastMath.scalb(1270.9551F, 674);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      double double1 = FastMath.acos((-910.2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = FastMath.copySign(4978.0, (-2891.391));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-4978.0), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = FastMath.nextUp(2.0773178629060355E8);
      assertEquals(2.0773178629060358E8, double0, 0.01);
      
      double double1 = FastMath.cos(2.0773178629060355E8);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-0.7050655786213871), double1, 0.01);
      
      double double2 = FastMath.log1p(579.5867898863031);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(6.364039298810679, double2, 0.01);
      
      float float0 = FastMath.scalb(2818.277F, (-1251));
      assertEquals(0.0F, float0, 0.01F);
      
      double double3 = FastMath.acos(2.0773178629060355E8);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      float float1 = FastMath.nextAfter(0.0F, 5.3690316086030166E-17);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1.4E-45F, float1, 0.01F);
      
      double double4 = FastMath.exp((-1251));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = FastMath.scalb(0.0, 1741);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      float float2 = FastMath.abs(0.0F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      double double6 = FastMath.hypot(5.3690316086030166E-17, (-1927.3934));
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(1927.3934, double6, 0.01);
      
      double double7 = FastMath.acosh(2.0773178629060355E8);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(19.844905497131727, double7, 0.01);
      
      double double8 = FastMath.log1p(2.0773178629060358E8);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(19.151758321385678, double8, 0.01);
      
      float float3 = FastMath.nextAfter(0.0F, 2.0773178629060355E8);
      assertEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals(float3, float0, 0.01F);
      assertEquals(1.4E-45F, float3, 0.01F);
      
      double double9 = FastMath.atan2((-5101.65866), (-394.564334));
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals((-1.6479830754865967), double9, 0.01);
      
      double double10 = FastMath.cbrt(5.3690316086030166E-17);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertEquals(double10, double5, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertEquals(double10, double4, 0.01);
      assertEquals(3.7725237877996972E-6, double10, 0.01);
      
      double double11 = FastMath.nextAfter((double) 2818.277F, Double.NaN);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertEquals(double11, double3, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertEquals(Double.NaN, double11, 0.01);
      
      double double12 = FastMath.atan2((-394.564334), 1.4E-45F);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertEquals((-1.5707963267948966), double12, 0.01);
      
      double double13 = FastMath.ulp((-1.6479830754865967));
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertEquals(double13, double5, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertEquals(double13, double10, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertEquals(double13, double4, 0.01);
      assertEquals(2.220446049250313E-16, double13, 0.01);
      
      double double14 = FastMath.abs(2.0217439756338078E-10);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertEquals(double14, double4, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertEquals(double14, double13, 0.01);
      assertEquals(double14, double5, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertEquals(double14, double10, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertEquals(2.0217439756338078E-10, double14, 0.01);
      
      double double15 = FastMath.exp((-255.0));
      assertEquals(double15, double14, 0.01);
      assertEquals(double15, double5, 0.01);
      assertEquals(double15, double4, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertEquals(double15, double10, 0.01);
      assertNotEquals(double15, double9, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertNotEquals(double15, double0, 0.01);
      assertEquals(double15, double13, 0.01);
      assertNotEquals(double15, double3, 0.01);
      assertNotEquals(double15, double2, 0.01);
      assertNotEquals(double15, double8, 0.01);
      assertNotEquals(double15, double1, 0.01);
      assertNotEquals(double15, double12, 0.01);
      assertNotEquals(double15, double6, 0.01);
      assertEquals(1.7984862202794635E-111, double15, 0.01);
      
      double double16 = FastMath.random();
      assertNotEquals(double16, double9, 0.01);
      assertNotEquals(double16, double12, 0.01);
      assertNotEquals(double16, double8, 0.01);
      assertEquals(double16, double4, 0.01);
      assertNotEquals(double16, double2, 0.01);
      assertNotEquals(double16, double1, 0.01);
      assertEquals(double16, double14, 0.01);
      assertNotEquals(double16, double11, 0.01);
      assertEquals(double16, double10, 0.01);
      assertNotEquals(double16, double7, 0.01);
      assertNotEquals(double16, double3, 0.01);
      assertNotEquals(double16, double0, 0.01);
      assertEquals(double16, double5, 0.01);
      assertNotEquals(double16, double6, 0.01);
      assertEquals(double16, double15, 0.01);
      assertEquals(double16, double13, 0.01);
      assertEquals(0.0, double16, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = FastMath.expm1(0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = FastMath.tan((-7.126913872617518E298));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5.845869967869113, double1, 0.01);
      
      float float0 = FastMath.max(170.761F, 170.761F);
      assertEquals(170.761F, float0, 0.01F);
      
      int int0 = FastMath.getExponent((float) 0L);
      assertEquals((-127), int0);
      
      double double2 = FastMath.asinh((-2.6437112632041807E-8));
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-2.6437112632041804E-8), double2, 0.01);
      
      float float1 = FastMath.ulp((float) 0L);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.4E-45F, float1, 0.01F);
      
      double double3 = FastMath.asin(5.845869967869113);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = FastMath.ulp(Double.NaN);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = FastMath.nextAfter(1348.1, 6.837671137556327E30);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(1348.1000000000001, double5, 0.01);
      
      float float2 = FastMath.nextUp((float) 874L);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(874.00006F, float2, 0.01F);
      
      double double6 = FastMath.atanh(0.0);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      double double7 = FastMath.cosh(0.0);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(1.0, double7, 0.01);
      
      double double8 = FastMath.tanh(1.0);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(0.7615941559557649, double8, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float float0 = FastMath.min(3.4028235E38F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = FastMath.scalb(3.4028235E38F, 0);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(3.4028235E38F, float1, 0.01F);
      
      double double0 = FastMath.sqrt(3.4028235E38F);
      assertEquals(1.844674352395373E19, double0, 0.01);
      
      int int0 = FastMath.abs(750);
      assertEquals(750, int0);
      
      double double1 = FastMath.expm1(750);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      double double2 = FastMath.atan2(0.0, (-1213.03063525));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(3.141592653589793, double2, 0.01);
      
      double double3 = FastMath.min((double) 3.4028235E38F, (double) 0.0F);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = FastMath.tan(3.4028235E38F);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals((-0.6117979498342481), double4, 0.01);
      
      double double5 = FastMath.atan(3.4028235E38F);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(1.5707963267948966, double5, 0.01);
      
      double double6 = FastMath.log10((-1520.9663454));
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      int int1 = FastMath.round(3.4028235E38F);
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
      
      float float2 = FastMath.scalb(0.0F, (-1701));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      float float3 = FastMath.signum(1789.0F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(1.0F, float3, 0.01F);
      
      double double7 = FastMath.exp(0.008333333333329196);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(1.0083681522074428, double7, 0.01);
      
      double double8 = FastMath.ceil((-1213.03063525));
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals((-1213.0), double8, 0.01);
      
      float float4 = FastMath.ulp(0.0F);
      assertEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertEquals(1.4E-45F, float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = FastMath.abs((-3217.6111001315853));
      assertEquals(3217.6111001315853, double0, 0.01);
      
      float float0 = FastMath.min((-1.0F), (-1.0F));
      assertEquals((-1.0F), float0, 0.01F);
      
      double double1 = FastMath.acos((-3217.6111001315853));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = FastMath.sinh(4282.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      float float1 = FastMath.min((-1.0F), Float.NaN);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(Float.NaN, float1, 0.01F);
      
      double double3 = FastMath.asin(4282.0);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = FastMath.max((double) Float.NaN, (-3217.6111001315853));
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = FastMath.rint((-759.0598782));
      assertEquals((-759.0), double0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "._Mwb{g:]CSSnJ";
      stringArray0[1] = "@j&;$}<(=N'}k";
      FastMath.main(stringArray0);
      assertEquals(2, stringArray0.length);
      
      double double1 = FastMath.asinh(1.096019026243815E274);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      double double2 = FastMath.acosh(Double.POSITIVE_INFINITY);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      double double3 = FastMath.nextAfter(4017.05286587876, (-759.0));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(4017.0528658787593, double3, 0.01);
      
      int int0 = FastMath.round((-3049.843F));
      assertEquals((-3050), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = FastMath.hypot(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.math3.exception.MathArithmeticException";
      stringArray0[1] = "org.apache.commons.math3.exception.MathArithmeticException";
      FastMath.main(stringArray0);
      assertEquals(2, stringArray0.length);
      
      double double1 = FastMath.atan(90.9442840586);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.559801026637762, double1, 0.01);
      
      double double2 = FastMath.min((-0.3058015757857271), 0.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-0.3058015757857271), double2, 0.01);
      
      double double3 = FastMath.min(0.0, 0.0);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      float float0 = FastMath.scalb(0.0F, 0);
      assertEquals(0.0F, float0, 0.01F);
      
      long long0 = FastMath.round(1.559801026637762);
      assertEquals(2L, long0);
      
      double double4 = FastMath.nextAfter(0.0, 1404.0508199);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(4.9E-324, double4, 0.01);
      
      float float1 = FastMath.min((float) 2L, (float) 0);
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      float float2 = FastMath.scalb(0.0F, 0);
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      double double5 = FastMath.atanh(90.9442840586);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = FastMath.min((-0.3058015757857271), 1404.0508199);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals((-0.3058015757857271), double6, 0.01);
      
      double double7 = FastMath.IEEEremainder((-1583.7419), 0.0);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      long long1 = FastMath.abs((-1L));
      assertFalse(long1 == long0);
      assertEquals(1L, long1);
      
      double double8 = FastMath.cbrt((-0.3058015757857271));
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals((-0.6737207234521381), double8, 0.01);
      
      double double9 = FastMath.nextAfter(1404.0508199, 0.0);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(1404.0508198999999, double9, 0.01);
      
      double double10 = FastMath.atanh(0.0F);
      assertNotEquals(double10, double5, 0.01);
      assertEquals(double10, double3, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertEquals(double10, double4, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals(double10, double0, 0.01);
      assertEquals(0.0, double10, 0.01);
      
      float float3 = FastMath.abs((float) 1L);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(1.0F, float3, 0.01F);
      
      double double11 = FastMath.sin((-1619.0));
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertEquals(0.8818556970657493, double11, 0.01);
      
      float float4 = FastMath.nextAfter((float) (-1L), (double) 1L);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertEquals((-0.99999994F), float4, 0.01F);
      
      float float5 = FastMath.nextAfter(Float.NaN, (-521.33893364719));
      assertNotEquals(float5, float0, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals(Float.NaN, float5, 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float float0 = FastMath.min(0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = FastMath.max(0.0F, 0.0F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      int int0 = FastMath.getExponent(1.4074742794036865);
      assertEquals(0, int0);
      
      double double0 = FastMath.atan2(0.0F, (-1233.359512727));
      assertEquals(3.141592653589793, double0, 0.01);
      
      double double1 = FastMath.expm1(0.0F);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      int int1 = FastMath.min(0, (-1159));
      assertFalse(int1 == int0);
      assertEquals((-1159), int1);
      
      double double2 = FastMath.acosh(296.642);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(6.385670364058816, double2, 0.01);
      
      double double3 = FastMath.ulp(3.141592653589793);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(4.440892098500626E-16, double3, 0.01);
      
      int int2 = FastMath.getExponent(2100.87039129328);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(11, int2);
      
      double double4 = FastMath.sqrt(0.0F);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      long long0 = FastMath.round((-3265.74259480989));
      assertEquals((-3266L), long0);
      
      double double5 = FastMath.pow((-8.588890051473289E-8), (-1159));
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = FastMath.log1p(Double.NaN);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      long long1 = FastMath.max((long) (-1159), (long) (-1159));
      assertFalse(long1 == long0);
      assertEquals((-1159L), long1);
      
      double double7 = FastMath.pow((-1233.359512727), (double) (-1159));
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(-0.0, double7, 0.01);
      
      long long2 = FastMath.min((-1571L), (-1571L));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-1571L), long2);
      
      double double8 = FastMath.nextUp((-0.33333333333333287));
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals((-0.3333333333333328), double8, 0.01);
      
      double double9 = FastMath.nextUp(0.0);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(double9, double7, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(double9, double3, 0.01);
      assertEquals(double9, double1, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(4.9E-324, double9, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = FastMath.tan(2124.56);
      assertEquals(1.1232166917528037, double0, 0.01);
      
      int int0 = FastMath.min((-492), 0);
      assertEquals((-492), int0);
      
      double double1 = FastMath.ceil(4503599627370496L);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(4.503599627370496E15, double1, 0.01);
      
      double double2 = FastMath.expm1(0.0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = FastMath.ulp(1.1795268640216787E-8);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(1.6543612251060553E-24, double3, 0.01);
      
      double double4 = FastMath.atan(1.6543612251060553E-24);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(1.6543612251060553E-24, double4, 0.01);
      
      double double5 = FastMath.expm1(4.503599627370496E15);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double5, 0.01);
      
      float float0 = FastMath.min((-1.4E-45F), (float) (-492));
      assertEquals((-492.0F), float0, 0.01F);
      
      int int1 = FastMath.max((-492), (-492));
      assertTrue(int1 == int0);
      assertEquals((-492), int1);
      
      long long0 = FastMath.min(4503599627370496L, 4503599627370496L);
      assertEquals(4503599627370496L, long0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = FastMath.abs(0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = FastMath.tan(4470.9625562453);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.5158033191042677, double1, 0.01);
      
      float float0 = FastMath.scalb(1.0F, 0);
      assertEquals(1.0F, float0, 0.01F);
      
      long long0 = FastMath.max((long) 0, 286L);
      assertEquals(286L, long0);
      
      double double2 = FastMath.log(0.0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01);
      
      double double3 = FastMath.sqrt(0);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = FastMath.toRadians(Double.NEGATIVE_INFINITY);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double4, 0.01);
      
      long long1 = FastMath.max(286L, (long) 0);
      assertTrue(long1 == long0);
      assertEquals(286L, long1);
      
      double double5 = FastMath.nextAfter((double) 0, (double) 0);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = FastMath.random();
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      double double7 = FastMath.cosh(356.53116504967);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(3.4553147330739254E154, double7, 0.01);
      
      float float1 = FastMath.copySign(Float.POSITIVE_INFINITY, 1.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      
      float float2 = FastMath.copySign((float) 286L, 324.2F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(286.0F, float2, 0.01F);
      
      double double8 = FastMath.IEEEremainder(1.0F, 286.0F);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(1.0, double8, 0.01);
      
      int int0 = FastMath.max(0, 0);
      assertEquals(0, int0);
      
      float float3 = FastMath.min((-3262.365F), 1.0F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals((-3262.365F), float3, 0.01F);
      
      double double9 = FastMath.asin(286L);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
      
      int int1 = FastMath.abs(128);
      assertFalse(int1 == int0);
      assertEquals(128, int1);
      
      double double10 = FastMath.sin(128);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(0.7210377105017316, double10, 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = FastMath.acos(0.008333333333329196);
      assertEquals(1.562462897007936, double0, 0.01);
      
      long long0 = FastMath.round(1.562462897007936);
      assertEquals(2L, long0);
      
      double double1 = FastMath.ulp(1.562462897007936);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.220446049250313E-16, double1, 0.01);
      
      double double2 = FastMath.tanh((-841.48951));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-1.0), double2, 0.01);
      
      double double3 = FastMath.atan2((-1401.7592), 0.0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-1.5707963267948966), double3, 0.01);
      
      double double4 = FastMath.atan(0.008333333333329196);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(0.008333140440131781, double4, 0.01);
      
      double double5 = FastMath.scalb(2.220446049250313E-16, 744);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(2.0547405865423334E208, double5, 0.01);
      
      float float0 = FastMath.signum((float) 744);
      assertEquals(1.0F, float0, 0.01F);
      
      int int0 = FastMath.getExponent((-1160.0F));
      assertEquals(10, int0);
      
      float float1 = FastMath.ulp(0.0F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.4E-45F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = FastMath.atan((-1613.10640278));
      assertEquals((-1.5701764049657008), double0, 0.01);
      
      long long0 = FastMath.max(1L, 1L);
      assertEquals(1L, long0);
      
      double double1 = FastMath.tanh((-1.3734273888891115E-8));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.3734273888891114E-8), double1, 0.01);
      
      double double2 = FastMath.tan((-1613.10640278));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-9.825686320372569), double2, 0.01);
      
      double double3 = FastMath.atan(1L);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.7853981633974483, double3, 0.01);
      
      float float0 = FastMath.nextAfter((float) 1L, (-9.825686320372569));
      assertEquals(0.99999994F, float0, 0.01F);
      
      double double4 = FastMath.ulp(0.0);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(4.9E-324, double4, 0.01);
      
      double double5 = FastMath.ceil((-494.827));
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals((-494.0), double5, 0.01);
      
      float float1 = FastMath.signum(2638.0425F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float float0 = FastMath.copySign(213.8087F, 32.508865F);
      assertEquals(213.8087F, float0, 0.01F);
      
      double double0 = FastMath.max((double) 213.8087F, (-602.551));
      assertEquals(213.80870056152344, double0, 0.01);
      
      double double1 = FastMath.hypot(0.0, (-92.0191024054389));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(92.0191024054389, double1, 0.01);
      
      double double2 = FastMath.sinh((-27.52510761));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-4.4975122317009766E11), double2, 0.01);
      
      int int0 = FastMath.abs((-1503));
      assertEquals(1503, int0);
      
      double double3 = FastMath.nextAfter(0.0, 0.07490822288864472);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(4.9E-324, double3, 0.01);
      
      double double4 = FastMath.asinh((-602.551));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals((-7.094320178221367), double4, 0.01);
      
      double double5 = FastMath.asinh(0.036);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(0.035992228531467885, double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = FastMath.nextUp((-1196.03292208));
      assertEquals((-1196.0329220799997), double0, 0.01);
      
      Random.setNextRandom((-949));
      Random.setNextRandom((-2423));
      double double1 = FastMath.hypot(2.0740270614624023, 1.8307188599677033E-8);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.0740270614624023, double1, 0.01);
      
      float float0 = FastMath.nextUp((float) (-949));
      assertEquals((-948.99994F), float0, 0.01F);
      
      double double2 = FastMath.tan(344.31112292);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-3.1573348830325747), double2, 0.01);
      
      double double3 = FastMath.pow(261.6942535, (-2367.56742051));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      float float1 = FastMath.ulp((float) (-2423));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(2.4414062E-4F, float1, 0.01F);
      
      double double4 = FastMath.pow((double) 2.4414062E-4F, 1.8307188599677033E-8);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(0.9999998477250976, double4, 0.01);
      
      double double5 = FastMath.pow((double) 2.4414062E-4F, 1312145731);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = FastMath.cos(747.89276655086);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(0.9812958501892283, double6, 0.01);
      
      float float2 = FastMath.scalb((float) (-949), (-2423));
      assertEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(-0.0F, float2, 0.01F);
      
      double double7 = FastMath.atanh(3476.469987577548);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      float float3 = FastMath.ulp(-0.0F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals(1.4E-45F, float3, 0.01F);
      
      double double8 = FastMath.floor((-4641.0));
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals((-4641.0), double8, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = FastMath.min(3030.3, (-4.503599627370496E15));
      assertEquals((-4.503599627370496E15), double0, 0.01);
      
      double double1 = FastMath.min((-5087.1663), 0.22001364827156067);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-5087.1663), double1, 0.01);
      
      double double2 = FastMath.tanh((-4.503599627370496E15));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-1.0), double2, 0.01);
      
      double double3 = FastMath.ceil(9.755392680573412E-9);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(1.0, double3, 0.01);
      
      long long0 = FastMath.abs((-1233L));
      assertEquals(1233L, long0);
      
      double double4 = FastMath.log1p((-547.0682440218632));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = FastMath.ceil(9.896378545255258E-9);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(1.0, double5, 0.01);
      
      double double6 = FastMath.cos((-4.503599627370496E15));
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals((-0.4855348677422206), double6, 0.01);
      
      double double7 = FastMath.log(1.0);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(0.0, double7, 0.01);
      
      double double8 = FastMath.atan2(Double.NaN, (-547.0682440218632));
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double4, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      
      float float0 = FastMath.nextAfter((float) (-1233L), Double.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
      
      double double9 = FastMath.acos(0.0);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(1.5707963267948966, double9, 0.01);
      
      double double10 = FastMath.pow(0.6897233724594116, 513);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertEquals(double10, double7, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals(1.7387846016584314E-83, double10, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = FastMath.tanh((-1228.87190611334));
      assertEquals((-1.0), double0, 0.01);
      
      double double1 = FastMath.random();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = FastMath.exp(0.9921976327896118);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2.6971553210128745, double2, 0.01);
      
      double double3 = FastMath.pow((-1.0), (-1.0));
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals((-1.0), double3, 0.01);
      
      int int0 = FastMath.getExponent((-1228.87190611334));
      assertEquals(10, int0);
      
      int int1 = FastMath.getExponent(508.72F);
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      
      double double4 = FastMath.acos((-1228.87190611334));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = FastMath.asin(10);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = FastMath.nextAfter((-1745.0), (double) 10);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals((-1744.9999999999998), double6, 0.01);
      
      int int2 = FastMath.abs(866);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(866, int2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float float0 = FastMath.nextUp(Float.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
      
      long long0 = FastMath.min(1023L, 0L);
      assertEquals(0L, long0);
      
      double double0 = FastMath.log10(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double double1 = FastMath.sin(1023L);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-0.9164853722719367), double1, 0.01);
      
      int int0 = FastMath.max(13, 13);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float float0 = FastMath.ulp((-2068.0F));
      assertEquals(2.4414062E-4F, float0, 0.01F);
      
      float float1 = FastMath.abs(0.0F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      double double0 = FastMath.asin(2.4414062E-4F);
      assertEquals(2.441406274253193E-4, double0, 0.01);
      
      double double1 = FastMath.IEEEremainder(0.0F, 0.7675435543060303);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      int int0 = FastMath.getExponent(0.0);
      assertEquals((-1023), int0);
      
      double double2 = FastMath.ceil(1946.9580615767245);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1947.0, double2, 0.01);
      
      double double3 = FastMath.cosh(0.7675435543060303);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1.309309624470986, double3, 0.01);
      
      double double4 = FastMath.abs(0.0);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = FastMath.log(0.0, 1947.0);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(-0.0, double5, 0.01);
      
      double double6 = FastMath.acos((-3548.8));
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = FastMath.sin(3.4893601256685762E283);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(0.5344914956960568, double7, 0.01);
      
      double double8 = FastMath.abs((double) (-2068.0F));
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(2068.0, double8, 0.01);
      
      double double9 = FastMath.rint((-2068.0F));
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals((-2068.0), double9, 0.01);
      
      double double10 = FastMath.min((double) (-2068.0F), 2395.6534);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertEquals(double10, double9, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertEquals((-2068.0), double10, 0.01);
      
      double double11 = FastMath.scalb(1619.0, (-1023));
      assertNotEquals(double11, double10, 0.01);
      assertEquals(double11, double4, 0.01);
      assertEquals(double11, double1, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertEquals(double11, double5, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertEquals(double11, double0, 0.01);
      assertEquals(1.8011972884615795E-305, double11, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = FastMath.min(5.8759898326913254E166, 5.8759898326913254E166);
      assertEquals(5.8759898326913254E166, double0, 0.01);
      
      double double1 = FastMath.sin(5.8759898326913254E166);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-0.9997591092337834), double1, 0.01);
      
      double double2 = FastMath.min((-0.9997591092337834), 5.8759898326913254E166);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals((-0.9997591092337834), double2, 0.01);
      
      double double3 = FastMath.nextUp((-0.9997591092337834));
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals((-0.9997591092337833), double3, 0.01);
      
      double double4 = FastMath.asin(1.8307188599677033E-8);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(1.8307188599677033E-8, double4, 0.01);
      
      int int0 = FastMath.abs((-1031));
      assertEquals(1031, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float float0 = FastMath.ulp((-2068.0F));
      assertEquals(2.4414062E-4F, float0, 0.01F);
      
      float float1 = FastMath.abs(0.0F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      double double0 = FastMath.asin(2.4414062E-4F);
      assertEquals(2.441406274253193E-4, double0, 0.01);
      
      double double1 = FastMath.IEEEremainder(0.0F, 0.7675435543060303);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      int int0 = FastMath.getExponent(0.0);
      assertEquals((-1023), int0);
      
      double double2 = FastMath.ceil(1946.9580615767245);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1947.0, double2, 0.01);
      
      double double3 = FastMath.cosh(0.7675435543060303);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(1.309309624470986, double3, 0.01);
      
      double double4 = FastMath.abs(0.0);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = FastMath.log(0.0, 1947.0);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(-0.0, double5, 0.01);
      
      double double6 = FastMath.acos(-0.0);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(1.5707963267948966, double6, 0.01);
      
      double double7 = FastMath.sin(3.4893601256685762E283);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(0.5344914956960568, double7, 0.01);
      
      double double8 = FastMath.abs((double) (-2068.0F));
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(2068.0, double8, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = FastMath.acosh((-727.755393452109));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = FastMath.atan2(Double.NaN, 9.710435805122717E-67);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      long long0 = FastMath.min(0L, 0L);
      assertEquals(0L, long0);
      
      float float0 = FastMath.abs((float) 0L);
      assertEquals(0.0F, float0, 0.01F);
      
      double double2 = FastMath.atan2(Double.NaN, 1.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = FastMath.acos((-727.755393452109));
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = FastMath.atan(0L);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      float float1 = FastMath.copySign(0.0F, (-1753.0F));
      assertEquals(float1, float0, 0.01F);
      assertEquals(-0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = FastMath.abs(0L);
      assertEquals(0L, long0);
      
      double double0 = FastMath.ceil((-4.068233003401932E-9));
      assertEquals(-0.0, double0, 0.01);
      
      double double1 = FastMath.tan(3.102559332875688E297);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-0.23729312132483957), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float float0 = FastMath.copySign(0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = FastMath.getExponent(2885.8547F);
      assertEquals(11, int0);
      
      double double0 = FastMath.atan2(0.0F, (-1076.07));
      assertEquals(3.141592653589793, double0, 0.01);
      
      long long0 = FastMath.min(0L, 0L);
      assertEquals(0L, long0);
      
      float float1 = FastMath.signum((-19.3F));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1.0F), float1, 0.01F);
      
      int int1 = FastMath.max(11, 2007);
      assertFalse(int1 == int0);
      assertEquals(2007, int1);
      
      float float2 = FastMath.min((-1.0F), 0.5F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals((-1.0F), float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = FastMath.atan2(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = FastMath.hypot(0.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = FastMath.max(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      long long0 = FastMath.min((-1624L), (-1624L));
      assertEquals((-1624L), long0);
      
      double double1 = FastMath.log1p(0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = FastMath.toDegrees(0.0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = FastMath.log10(0.0);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01);
      
      double double4 = FastMath.asin(1795.905326767);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = FastMath.toDegrees(Double.NEGATIVE_INFINITY);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double5, 0.01);
      
      double double6 = FastMath.ulp((-1483.40795392));
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(2.2737367544323206E-13, double6, 0.01);
      
      float float0 = FastMath.scalb((-4925.0923F), 797);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = FastMath.hypot(0.010684899985790253, 0.010684899985790253);
      assertEquals(0.015110730472504667, double0, 0.01);
      
      float float0 = FastMath.min(0.0F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      double double1 = FastMath.asinh(0.015110730472504667);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.015110155482219457, double1, 0.01);
      
      double double2 = FastMath.max(0.015110155482219457, 0.0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.015110155482219457, double2, 0.01);
      
      double double3 = FastMath.cos(3.0095696449279785);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-0.9912976138856956), double3, 0.01);
      
      double double4 = FastMath.sinh(0.0);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = FastMath.acosh(1.9699272335463627E-8);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = FastMath.pow(Double.NaN, (-1828));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = FastMath.tan(Double.NaN);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      float float0 = FastMath.copySign(0.0F, (float) (-1828));
      assertEquals(-0.0F, float0, 0.01F);
      
      double double3 = FastMath.ceil(1.9699272335463627E-8);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(1.0, double3, 0.01);
      
      double double4 = FastMath.pow((double) (-1828), (double) (-1828));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = FastMath.pow((-0.49999999999999994), (-4.503599627370496E15));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = FastMath.log(0.26820653676986694);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.3159979356878448), double1, 0.01);
      
      double double2 = FastMath.pow((-0.49999999999999994), 138);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2.8698592549371814E-42, double2, 0.01);
      
      double double3 = FastMath.cbrt((-941.703125));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-9.801773679382988), double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = FastMath.toRadians((-2315.176));
      assertEquals((-40.40744396315224), double0, 0.01);
      
      double double1 = FastMath.nextAfter((-9668828.709349453), 226.839109778);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-9668828.709349452), double1, 0.01);
      
      double double2 = FastMath.nextUp((-2315.176));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-2315.1759999999995), double2, 0.01);
      
      double double3 = FastMath.ceil((-3059.30646));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-3059.0), double3, 0.01);
      
      double double4 = FastMath.pow(1.5, (-1018.84));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(3.901050960974163E-180, double4, 0.01);
      
      float float0 = FastMath.scalb(130.0F, (-1116));
      assertEquals(0.0F, float0, 0.01F);
      
      double double5 = FastMath.min((-2315.1759999999995), 508.212831169864);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals((-2315.1759999999995), double5, 0.01);
      
      double double6 = FastMath.ceil((-2315.1759999999995));
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals((-2315.0), double6, 0.01);
      
      double double7 = FastMath.nextUp(4591.28);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(4591.280000000001, double7, 0.01);
      
      float float1 = FastMath.max(0.0F, Float.POSITIVE_INFINITY);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      
      double double8 = FastMath.ceil(2943.601928471626);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(2944.0, double8, 0.01);
      
      double double9 = FastMath.cbrt((-3059.30646));
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals((-14.516914798822457), double9, 0.01);
      
      float float2 = FastMath.scalb(Float.POSITIVE_INFINITY, 347);
      assertEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = FastMath.pow((-4346.343911), 15);
      assertEquals((-3.7313098382835444E54), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = FastMath.sin(0.0);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = FastMath.getExponent((-1.0F));
      assertEquals(0, int0);
      
      float float0 = FastMath.min(3314.8376F, 0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      int int1 = FastMath.getExponent((-129.339601));
      assertFalse(int1 == int0);
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = FastMath.floor(0.0);
      assertEquals(0.0, double0, 0.01);
      
      long long0 = FastMath.min(2819561105158720014L, 2819561105158720014L);
      assertEquals(2819561105158720014L, long0);
      
      double double1 = FastMath.pow((-4123.42999814165), (double) 2819561105158720014L);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      double double2 = FastMath.nextAfter((-1254.598927), (double) 2819561105158720014L);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-1254.5989269999998), double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = FastMath.floor((-625.0));
      assertEquals((-625.0), double0, 0.01);
      
      double double1 = FastMath.nextAfter((-625.0), (-625.0));
      assertEquals(double1, double0, 0.01);
      assertEquals((-625.0), double1, 0.01);
      
      float float0 = FastMath.scalb(0.0F, (-701));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = FastMath.rint((-1.02137463037812));
      assertEquals((-1.0), double0, 0.01);
      
      double double1 = FastMath.asin((-1.0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.5707963267948966), double1, 0.01);
      
      double double2 = FastMath.scalb((-1.0), (-592));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-6.169394854663383E-179), double2, 0.01);
      
      double double3 = FastMath.log1p((-1.0));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01);
      
      float float0 = FastMath.abs((float) (-592));
      assertEquals(592.0F, float0, 0.01F);
      
      double double4 = FastMath.hypot((-6.169394854663383E-179), 0.087);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(0.087, double4, 0.01);
      
      double double5 = FastMath.scalb(968.6, 1274);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double5, 0.01);
      
      double double6 = FastMath.rint(0.036);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      double double7 = FastMath.asinh(1003.888336);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(7.604783503569829, double7, 0.01);
      
      float float1 = FastMath.scalb((float) (-592), (-592));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(-0.0F, float1, 0.01F);
      
      float float2 = FastMath.nextUp(3430.0F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(3430.0002F, float2, 0.01F);
      
      double double8 = FastMath.ceil(0.1111111111111111);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertEquals(1.0, double8, 0.01);
      
      double double9 = FastMath.random();
      assertEquals(double9, double6, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(double9, double2, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertEquals(0.0, double9, 0.01);
      
      double double10 = FastMath.cos(1.5707963267948966);
      assertEquals(double10, double6, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(double10, double9, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertEquals(double10, double2, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertEquals(6.123233995736766E-17, double10, 0.01);
      
      float float3 = FastMath.scalb((float) 1274, 853);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, float3, 0.01F);
      
      double double11 = FastMath.random();
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertEquals(0.1, double11, 0.01);
      
      Random.setNextRandom(2146200802);
      double double12 = FastMath.sqrt(3117.4);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertEquals(55.83368159095368, double12, 0.01);
      
      double double13 = FastMath.rint(1003.888336);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertEquals(1004.0, double13, 0.01);
      
      float float4 = FastMath.nextAfter((float) 853, (-4.135121057126514E24));
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertEquals(852.99994F, float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = FastMath.rint((-547.0682440218632));
      assertEquals((-547.0), double0, 0.01);
      
      double double1 = FastMath.tan((-560.6));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-5.679393538700238), double1, 0.01);
      
      double double2 = FastMath.tanh((-547.0682440218632));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-1.0), double2, 0.01);
      
      double double3 = FastMath.atan2((-1.0), (-547.0682440218632));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-3.1397647301137748), double3, 0.01);
      
      double double4 = FastMath.ceil(2436.079);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(2437.0, double4, 0.01);
      
      float float0 = FastMath.ulp(2391.98F);
      assertEquals(2.4414062E-4F, float0, 0.01F);
      
      double double5 = FastMath.tanh(2.4414062E-4F);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(2.4414062014936172E-4, double5, 0.01);
      
      double double6 = FastMath.atanh(3495.888034);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      float float1 = FastMath.scalb((-3.0517578E-5F), 135);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1.329228E36F), float1, 0.01F);
      
      float float2 = FastMath.abs((float) 135);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(135.0F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = FastMath.asin((-108.646322));
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = FastMath.sqrt((-945.076346292923));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = FastMath.rint(Double.NaN);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      float float0 = FastMath.scalb(2061.35F, 130);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      double double3 = FastMath.min((-1513.7730873052171), (-20.0));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-1513.7730873052171), double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = FastMath.nextUp(0.31204116344451904);
      assertEquals(0.3120411634445191, double0, 0.01);
      
      double double1 = FastMath.ceil(20.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(20.0, double1, 0.01);
      
      double double2 = FastMath.cosh(20.0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2.4258259770489514E8, double2, 0.01);
      
      double double3 = FastMath.cosh((-996.8319506576092));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01);
      
      float float0 = FastMath.abs(1.0F);
      assertEquals(1.0F, float0, 0.01F);
      
      double double4 = FastMath.scalb(0.31204116344451904, 794);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(3.251085908594804E238, double4, 0.01);
      
      double double5 = FastMath.rint(1.0F);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(1.0, double5, 0.01);
      
      double double6 = FastMath.asin((-1419.9));
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = FastMath.cosh(3825.910587);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double7, 0.01);
      
      double double8 = FastMath.nextAfter(970.077652872979, 3.251085908594804E238);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(970.0776528729791, double8, 0.01);
      
      float float1 = FastMath.nextUp(1.0F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1.0000001F, float1, 0.01F);
      
      double double9 = FastMath.acosh(1.0F);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(0.0, double9, 0.01);
      
      double double10 = FastMath.acosh((-2323.0));
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertEquals(double10, double6, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertEquals(Double.NaN, double10, 0.01);
      
      double double11 = FastMath.acos(1.0F);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertEquals(double11, double9, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertEquals(0.0, double11, 0.01);
      
      double double12 = FastMath.min(2357.259236074, 995.3518009130385);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertEquals(995.3518009130385, double12, 0.01);
      
      double double13 = FastMath.rint(0.375);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertEquals(double13, double9, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertEquals(double13, double11, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertEquals(0.0, double13, 0.01);
      
      double double14 = FastMath.asin(0.0);
      assertNotEquals(double14, double5, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertEquals(double14, double9, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertEquals(double14, double13, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertEquals(double14, double11, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertEquals(0.0, double14, 0.01);
      
      double double15 = FastMath.atanh(995.3518009130385);
      assertEquals(double15, double6, 0.01);
      assertNotEquals(double15, double5, 0.01);
      assertNotEquals(double15, double4, 0.01);
      assertNotEquals(double15, double8, 0.01);
      assertNotEquals(double15, double3, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertNotEquals(double15, double12, 0.01);
      assertNotEquals(double15, double9, 0.01);
      assertNotEquals(double15, double2, 0.01);
      assertNotEquals(double15, double13, 0.01);
      assertEquals(double15, double10, 0.01);
      assertNotEquals(double15, double14, 0.01);
      assertNotEquals(double15, double1, 0.01);
      assertNotEquals(double15, double0, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertEquals(Double.NaN, double15, 0.01);
      
      double double16 = FastMath.rint(20.0);
      assertNotEquals(double16, double2, 0.01);
      assertEquals(double16, double1, 0.01);
      assertNotEquals(double16, double11, 0.01);
      assertNotEquals(double16, double0, 0.01);
      assertNotEquals(double16, double14, 0.01);
      assertNotEquals(double16, double5, 0.01);
      assertNotEquals(double16, double9, 0.01);
      assertNotEquals(double16, double12, 0.01);
      assertNotEquals(double16, double15, 0.01);
      assertNotEquals(double16, double10, 0.01);
      assertNotEquals(double16, double7, 0.01);
      assertNotEquals(double16, double4, 0.01);
      assertNotEquals(double16, double8, 0.01);
      assertNotEquals(double16, double6, 0.01);
      assertNotEquals(double16, double3, 0.01);
      assertNotEquals(double16, double13, 0.01);
      assertEquals(20.0, double16, 0.01);
      
      double double17 = FastMath.sin((-3873.88688));
      assertNotEquals(double17, double3, 0.01);
      assertNotEquals(double17, double4, 0.01);
      assertNotEquals(double17, double12, 0.01);
      assertNotEquals(double17, double8, 0.01);
      assertNotEquals(double17, double15, 0.01);
      assertNotEquals(double17, double9, 0.01);
      assertNotEquals(double17, double7, 0.01);
      assertNotEquals(double17, double6, 0.01);
      assertNotEquals(double17, double13, 0.01);
      assertNotEquals(double17, double2, 0.01);
      assertNotEquals(double17, double14, 0.01);
      assertNotEquals(double17, double1, 0.01);
      assertNotEquals(double17, double10, 0.01);
      assertNotEquals(double17, double11, 0.01);
      assertNotEquals(double17, double16, 0.01);
      assertNotEquals(double17, double5, 0.01);
      assertNotEquals(double17, double0, 0.01);
      assertEquals(0.2985167107860965, double17, 0.01);
      
      double double18 = FastMath.sin(970.0776528729791);
      assertNotEquals(double18, double8, 0.01);
      assertNotEquals(double18, double4, 0.01);
      assertNotEquals(double18, double12, 0.01);
      assertNotEquals(double18, double1, 0.01);
      assertNotEquals(double18, double9, 0.01);
      assertNotEquals(double18, double13, 0.01);
      assertNotEquals(double18, double17, 0.01);
      assertNotEquals(double18, double3, 0.01);
      assertNotEquals(double18, double11, 0.01);
      assertNotEquals(double18, double10, 0.01);
      assertNotEquals(double18, double15, 0.01);
      assertNotEquals(double18, double16, 0.01);
      assertNotEquals(double18, double7, 0.01);
      assertNotEquals(double18, double6, 0.01);
      assertNotEquals(double18, double0, 0.01);
      assertNotEquals(double18, double2, 0.01);
      assertNotEquals(double18, double5, 0.01);
      assertNotEquals(double18, double14, 0.01);
      assertEquals(0.6244889889245299, double18, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = FastMath.asin(0.0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = FastMath.nextAfter(0.0, 0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = FastMath.abs(0.0);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = FastMath.atanh((-1846.2394217));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = FastMath.pow(0.0, 0);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(1.0, double4, 0.01);
      
      double double5 = FastMath.ulp(0.0);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(4.9E-324, double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = FastMath.acos((-2.7663203939320167E-8));
      assertEquals(1.5707963544581005, double0, 0.01);
      
      double double1 = FastMath.scalb((-2.7663203939320167E-8), (-2905));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(-0.0, double1, 0.01);
      
      int int0 = FastMath.abs(9);
      assertEquals(9, int0);
      
      double double2 = FastMath.sin(5965.19285);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.637769718966179, double2, 0.01);
      
      double double3 = FastMath.sinh((-3.5392250480081715E-9));
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-3.5392250480081715E-9), double3, 0.01);
      
      double double4 = FastMath.abs(0.40546512603759766);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(0.40546512603759766, double4, 0.01);
      
      double double5 = FastMath.random();
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = FastMath.tanh(0.637769718966179);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(0.5633790670333876, double6, 0.01);
      
      double double7 = FastMath.sin(5.1876107490791666E-250);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(5.1876107490791666E-250, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float float0 = FastMath.nextAfter((-2174.0F), (double) (-2174.0F));
      assertEquals((-2174.0F), float0, 0.01F);
      
      int int0 = FastMath.abs((-2992));
      assertEquals(2992, int0);
      
      float float1 = FastMath.nextAfter(1.0F, (double) (-2174.0F));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.99999994F, float1, 0.01F);
      
      float float2 = FastMath.max((float) 2992, 0.99999994F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(2992.0F, float2, 0.01F);
      
      double double0 = FastMath.cbrt(2425.745);
      assertEquals(13.436362586257719, double0, 0.01);
      
      double double1 = FastMath.log((double) 1.0F, (double) (-2992));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      long long0 = FastMath.abs(0L);
      assertEquals(0L, long0);
      
      int int1 = FastMath.round(1.0F);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      double double2 = FastMath.sinh(181.72202344205);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(4.167177749318483E78, double2, 0.01);
      
      double double3 = FastMath.expm1(938.8617855187682);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01);
      
      double double4 = FastMath.acos((-2174.0F));
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = FastMath.scalb((double) 0.99999994F, 2992);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double5, 0.01);
      
      int int2 = FastMath.getExponent(Double.NaN);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1024, int2);
      
      long long1 = FastMath.min((-1362L), (long) 2992);
      assertFalse(long1 == long0);
      assertEquals((-1362L), long1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = FastMath.min(0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":{v8m_]v_*T(";
      FastMath.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = FastMath.min(967, 1);
      assertEquals(1, int0);
      
      double double1 = FastMath.sinh(0.0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = FastMath.ceil(0.0);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = FastMath.ulp(0.0);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(4.9E-324, double3, 0.01);
      
      double double4 = FastMath.toDegrees(4.9E-324);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(2.8E-322, double4, 0.01);
      
      double double5 = FastMath.ceil((-2718.402475170769));
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals((-2718.0), double5, 0.01);
      
      double double6 = FastMath.rint((-2718.0));
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals((-2718.0), double6, 0.01);
      
      double double7 = FastMath.log(0.0);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double7, 0.01);
      
      double double8 = FastMath.IEEEremainder(1229.0, 1);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double4, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double1, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(0.0, double8, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = FastMath.cosh((-1687.30637));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = FastMath.min((-1687.30637), Double.POSITIVE_INFINITY);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1687.30637), double1, 0.01);
      
      float float0 = FastMath.abs(0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      double double2 = FastMath.sinh((-1687.30637));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01);
      
      double double3 = FastMath.acos(Double.POSITIVE_INFINITY);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      int int0 = FastMath.abs(1717);
      assertEquals(1717, int0);
      
      double double4 = FastMath.random();
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = FastMath.pow(Double.NEGATIVE_INFINITY, Double.NaN);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      float float1 = FastMath.nextAfter(0.0F, Double.POSITIVE_INFINITY);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1.4E-45F, float1, 0.01F);
      
      double double6 = FastMath.floor(1717);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(1717.0, double6, 0.01);
      
      float float2 = FastMath.max(0.0F, (float) 1717);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(1717.0F, float2, 0.01F);
      
      double double7 = FastMath.sinh(0.0);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(0.0, double7, 0.01);
      
      double double8 = FastMath.scalb(Double.NEGATIVE_INFINITY, 13);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(double8, double2, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double8, 0.01);
      
      float float3 = FastMath.nextUp(0.0F);
      assertEquals(float3, float0, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(1.4E-45F, float3, 0.01F);
      
      double double9 = FastMath.atanh(0.0F);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(double9, double7, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(0.0, double9, 0.01);
      
      double double10 = FastMath.asin(1650.97);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(double10, double5, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(Double.NaN, double10, 0.01);
      
      int int1 = FastMath.abs(683);
      assertFalse(int1 == int0);
      assertEquals(683, int1);
      
      double double11 = FastMath.tan((-2961.1249274526135));
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertEquals(5.6939697604953095, double11, 0.01);
      
      double double12 = FastMath.pow(1447.5251575514, (double) 1717.0F);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertEquals(double12, double0, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double12, 0.01);
      
      double double13 = FastMath.log1p((-1687.30637));
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertEquals(double13, double5, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertEquals(double13, double3, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertEquals(double13, double10, 0.01);
      assertEquals(Double.NaN, double13, 0.01);
      
      double double14 = FastMath.floor(5.6939697604953095);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertEquals(5.0, double14, 0.01);
      
      Random.setNextRandom(683);
      float float4 = FastMath.max(0.0F, 0.0F);
      assertEquals(float4, float0, 0.01F);
      assertEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(float4, float3, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      
      double double15 = FastMath.cbrt(4.455505956692757);
      assertNotEquals(double15, double6, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertNotEquals(double15, double14, 0.01);
      assertNotEquals(double15, double12, 0.01);
      assertNotEquals(double15, double2, 0.01);
      assertNotEquals(double15, double5, 0.01);
      assertNotEquals(double15, double8, 0.01);
      assertNotEquals(double15, double10, 0.01);
      assertNotEquals(double15, double0, 0.01);
      assertNotEquals(double15, double13, 0.01);
      assertNotEquals(double15, double4, 0.01);
      assertNotEquals(double15, double1, 0.01);
      assertNotEquals(double15, double3, 0.01);
      assertNotEquals(double15, double9, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertEquals(1.645504254608231, double15, 0.01);
      
      double double16 = FastMath.asinh(2.0217439756338078E-10);
      assertNotEquals(double16, double3, 0.01);
      assertNotEquals(double16, double12, 0.01);
      assertEquals(double16, double7, 0.01);
      assertNotEquals(double16, double1, 0.01);
      assertNotEquals(double16, double0, 0.01);
      assertNotEquals(double16, double14, 0.01);
      assertNotEquals(double16, double15, 0.01);
      assertNotEquals(double16, double13, 0.01);
      assertEquals(double16, double9, 0.01);
      assertNotEquals(double16, double11, 0.01);
      assertNotEquals(double16, double2, 0.01);
      assertNotEquals(double16, double5, 0.01);
      assertNotEquals(double16, double6, 0.01);
      assertEquals(double16, double4, 0.01);
      assertNotEquals(double16, double10, 0.01);
      assertNotEquals(double16, double8, 0.01);
      assertEquals(2.0217439756338078E-10, double16, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = FastMath.atan(942.535);
      assertEquals(1.5697353586347942, double0, 0.01);
      
      double double1 = FastMath.atanh(1.5697353586347942);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = FastMath.rint((-125.3563321574));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-125.0), double2, 0.01);
      
      float float0 = FastMath.nextAfter(754.0F, Double.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
      
      int int0 = FastMath.getExponent((double) Float.NaN);
      assertEquals(1024, int0);
      
      double double3 = FastMath.log10((-3457.93958471));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      int int1 = FastMath.getExponent(3.2988908516009827E-9);
      assertFalse(int1 == int0);
      assertEquals((-29), int1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float float0 = FastMath.ulp(0.0F);
      assertEquals(1.4E-45F, float0, 0.01F);
      
      long long0 = FastMath.abs((-474L));
      assertEquals(474L, long0);
      
      double double0 = FastMath.tanh((-2184.69226831915));
      assertEquals((-1.0), double0, 0.01);
      
      double double1 = FastMath.signum((double) 1.4E-45F);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = FastMath.asinh(5.924290380648597E-224);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(5.924290380648597E-224, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = FastMath.log10(0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      double double1 = FastMath.expm1(0.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = FastMath.nextUp(0.0);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(4.9E-324, double2, 0.01);
      
      double double3 = FastMath.atan(0.0);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = FastMath.sinh(0.0);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = FastMath.pow(994.0, 994.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = FastMath.asin(1268.62086459);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = FastMath.tan(1268.62086459);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-0.6588441713911539), double2, 0.01);
      
      double double3 = FastMath.sqrt(Double.POSITIVE_INFINITY);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01);
      
      double double4 = FastMath.scalb(5.382210096763589E-17, (-1763));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = FastMath.nextAfter(0.0, 0.0);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = FastMath.asin(827.3);
      assertEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = FastMath.tanh(5.382210096763589E-17);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(5.382210096763589E-17, double7, 0.01);
      
      double double8 = FastMath.asin((-2.957007209750105E-8));
      assertNotEquals(double8, double3, 0.01);
      assertEquals(double8, double5, 0.01);
      assertEquals(double8, double4, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(double8, double7, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertEquals((-2.9570072097501052E-8), double8, 0.01);
      
      double double9 = FastMath.atanh(1736.791296792817);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(double9, double6, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(double9, double1, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(Double.NaN, double9, 0.01);
      
      double double10 = FastMath.scalb(941.703125, 597);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertEquals(4.88451472306423E182, double10, 0.01);
      
      double double11 = FastMath.nextAfter(1.7976931348623157E308, 994.0);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertEquals(1.7976931348623155E308, double11, 0.01);
      
      double double12 = FastMath.nextAfter(2.356194490192345, Double.NaN);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertEquals(double12, double6, 0.01);
      assertEquals(double12, double9, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertEquals(double12, double1, 0.01);
      assertEquals(Double.NaN, double12, 0.01);
      
      double double13 = FastMath.asinh(0.11113807559013367);
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertEquals(0.11091054781873998, double13, 0.01);
      
      double double14 = FastMath.atan2(994.0, (-2.957007209750105E-8));
      assertNotEquals(double14, double8, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertEquals(1.5707963268246452, double14, 0.01);
      
      double double15 = FastMath.asin(Double.NaN);
      assertNotEquals(double15, double0, 0.01);
      assertEquals(double15, double12, 0.01);
      assertNotEquals(double15, double10, 0.01);
      assertEquals(double15, double1, 0.01);
      assertEquals(double15, double6, 0.01);
      assertNotEquals(double15, double4, 0.01);
      assertNotEquals(double15, double5, 0.01);
      assertNotEquals(double15, double8, 0.01);
      assertNotEquals(double15, double2, 0.01);
      assertNotEquals(double15, double13, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertNotEquals(double15, double14, 0.01);
      assertEquals(double15, double9, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertNotEquals(double15, double3, 0.01);
      assertEquals(Double.NaN, double15, 0.01);
      
      double double16 = FastMath.log1p(0.11091054781873998);
      assertNotEquals(double16, double11, 0.01);
      assertEquals(double16, double13, 0.01);
      assertNotEquals(double16, double14, 0.01);
      assertNotEquals(double16, double2, 0.01);
      assertNotEquals(double16, double9, 0.01);
      assertNotEquals(double16, double12, 0.01);
      assertNotEquals(double16, double4, 0.01);
      assertNotEquals(double16, double8, 0.01);
      assertNotEquals(double16, double0, 0.01);
      assertNotEquals(double16, double1, 0.01);
      assertNotEquals(double16, double5, 0.01);
      assertNotEquals(double16, double10, 0.01);
      assertNotEquals(double16, double6, 0.01);
      assertNotEquals(double16, double15, 0.01);
      assertNotEquals(double16, double7, 0.01);
      assertNotEquals(double16, double3, 0.01);
      assertEquals(0.10517999240134968, double16, 0.01);
      
      double double17 = FastMath.cbrt((-2.2250738585072014E-308));
      assertNotEquals(double17, double13, 0.01);
      assertNotEquals(double17, double2, 0.01);
      assertEquals(double17, double8, 0.01);
      assertEquals(double17, double7, 0.01);
      assertEquals(double17, double5, 0.01);
      assertNotEquals(double17, double15, 0.01);
      assertNotEquals(double17, double11, 0.01);
      assertNotEquals(double17, double16, 0.01);
      assertNotEquals(double17, double0, 0.01);
      assertNotEquals(double17, double1, 0.01);
      assertNotEquals(double17, double6, 0.01);
      assertNotEquals(double17, double10, 0.01);
      assertEquals(double17, double4, 0.01);
      assertNotEquals(double17, double12, 0.01);
      assertNotEquals(double17, double14, 0.01);
      assertNotEquals(double17, double3, 0.01);
      assertNotEquals(double17, double9, 0.01);
      assertEquals((-2.812644285236262E-103), double17, 0.01);
      
      float float0 = FastMath.nextUp((-935.03F));
      assertEquals((-935.02997F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = FastMath.log1p(0.041666663879186654);
      assertEquals(0.04082199184427431, double0, 0.01);
      
      double double1 = FastMath.log10(0.041666663879186654);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.3802112707656995), double1, 0.01);
      
      double double2 = FastMath.asinh(0.04082199184427431);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.04081066247194813, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = FastMath.sqrt(20.0);
      assertEquals(4.47213595499958, double0, 0.01);
      
      double double1 = FastMath.hypot(20.0, 20.0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(28.284271247461902, double1, 0.01);
      
      long long0 = FastMath.abs(4368491638549381120L);
      assertEquals(4368491638549381120L, long0);
      
      double double2 = FastMath.cos(28.284271247461902);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-0.9999506247932243), double2, 0.01);
      
      double double3 = FastMath.log((double) 4368491638549381120L);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(42.92094946061459, double3, 0.01);
      
      double double4 = FastMath.atanh(4.47213595499958);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = FastMath.asinh((-0.9999506247932243));
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals((-0.8813386730450401), double5, 0.01);
      
      double double6 = FastMath.sqrt(20.0);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(4.47213595499958, double6, 0.01);
      
      double double7 = FastMath.hypot((-0.3058015757857271), 28.284271247461902);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(28.28592431941642, double7, 0.01);
      
      float float0 = FastMath.scalb((float) 4368491638549381120L, 3407);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      double double8 = FastMath.sin(28.284271247461902);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals((-0.009937201600071412), double8, 0.01);
      
      double double9 = FastMath.pow((double) 3407, 2125.8965);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double9, 0.01);
      
      float float1 = FastMath.min((float) 4368491638549381120L, (float) 3407);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(3407.0F, float1, 0.01F);
      
      double double10 = FastMath.sin(10.0);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertEquals((-0.5440211108893698), double10, 0.01);
      
      double double11 = FastMath.hypot(197.0, 4.503599627370496E15);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertEquals(4.503599627370496E15, double11, 0.01);
      
      double double12 = FastMath.abs(4.503599627370496E15);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertEquals(double12, double11, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertEquals(4.503599627370496E15, double12, 0.01);
      
      double double13 = FastMath.scalb(4.503599627370496E15, 3407);
      assertEquals(double13, double9, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double13, 0.01);
      
      double double14 = FastMath.tan(0.5);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double8, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertEquals(0.5463024898437905, double14, 0.01);
      
      float float2 = FastMath.nextAfter((-1.4E-45F), (-706.0082155));
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-2.8E-45F), float2, 0.01F);
      
      double double15 = FastMath.acos((-2.8E-45F));
      assertNotEquals(double15, double8, 0.01);
      assertNotEquals(double15, double13, 0.01);
      assertNotEquals(double15, double2, 0.01);
      assertNotEquals(double15, double14, 0.01);
      assertNotEquals(double15, double3, 0.01);
      assertNotEquals(double15, double6, 0.01);
      assertNotEquals(double15, double10, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertNotEquals(double15, double5, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertNotEquals(double15, double4, 0.01);
      assertNotEquals(double15, double1, 0.01);
      assertNotEquals(double15, double9, 0.01);
      assertNotEquals(double15, double0, 0.01);
      assertNotEquals(double15, double12, 0.01);
      assertEquals(1.5707963267948966, double15, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = FastMath.IEEEremainder(0.0, 0.0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = FastMath.pow(0.0, Double.NaN);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = FastMath.toRadians(Double.NaN);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = FastMath.acos(Double.NaN);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = FastMath.sin(Double.NaN);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = FastMath.toDegrees((-3839.514556));
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals((-219987.97943784617), double5, 0.01);
      
      double double6 = FastMath.expm1(Double.NaN);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
      
      double double7 = FastMath.sin(Double.NaN);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      double double8 = FastMath.tanh(Double.NaN);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(double8, double7, 0.01);
      assertEquals(double8, double4, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double6, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      
      long long0 = FastMath.max(376L, 376L);
      assertEquals(376L, long0);
      
      double double9 = FastMath.sin((-5.607991635038776E-29));
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals((-5.607991635038776E-29), double9, 0.01);
      
      double double10 = FastMath.exp(0.0);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertEquals(1.0, double10, 0.01);
      
      double double11 = FastMath.sin(Double.NaN);
      assertEquals(double11, double1, 0.01);
      assertEquals(double11, double3, 0.01);
      assertEquals(double11, double2, 0.01);
      assertEquals(double11, double7, 0.01);
      assertEquals(double11, double4, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertEquals(double11, double6, 0.01);
      assertEquals(double11, double8, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertEquals(double11, double0, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertEquals(Double.NaN, double11, 0.01);
      
      double double12 = FastMath.sinh((-359.641));
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertEquals((-7.745897941471122E155), double12, 0.01);
      
      double double13 = FastMath.atanh(3485.01864906);
      assertNotEquals(double13, double5, 0.01);
      assertEquals(double13, double8, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertEquals(double13, double0, 0.01);
      assertEquals(double13, double2, 0.01);
      assertEquals(double13, double3, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertEquals(double13, double4, 0.01);
      assertEquals(double13, double1, 0.01);
      assertEquals(double13, double6, 0.01);
      assertEquals(double13, double7, 0.01);
      assertEquals(double13, double11, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertEquals(Double.NaN, double13, 0.01);
      
      double double14 = FastMath.scalb(Double.NaN, 3192);
      assertEquals(double14, double7, 0.01);
      assertEquals(double14, double13, 0.01);
      assertEquals(double14, double3, 0.01);
      assertEquals(double14, double2, 0.01);
      assertEquals(double14, double6, 0.01);
      assertEquals(double14, double0, 0.01);
      assertEquals(double14, double1, 0.01);
      assertEquals(double14, double4, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertEquals(double14, double8, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertEquals(double14, double11, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertEquals(Double.NaN, double14, 0.01);
      
      double double15 = FastMath.random();
      assertNotEquals(double15, double3, 0.01);
      assertNotEquals(double15, double2, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertNotEquals(double15, double12, 0.01);
      assertNotEquals(double15, double6, 0.01);
      assertEquals(double15, double9, 0.01);
      assertNotEquals(double15, double4, 0.01);
      assertNotEquals(double15, double13, 0.01);
      assertNotEquals(double15, double5, 0.01);
      assertNotEquals(double15, double0, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertNotEquals(double15, double8, 0.01);
      assertNotEquals(double15, double1, 0.01);
      assertNotEquals(double15, double10, 0.01);
      assertNotEquals(double15, double14, 0.01);
      assertEquals(0.0, double15, 0.01);
      
      double double16 = FastMath.ulp(0.0);
      assertNotEquals(double16, double1, 0.01);
      assertEquals(double16, double15, 0.01);
      assertNotEquals(double16, double11, 0.01);
      assertNotEquals(double16, double8, 0.01);
      assertNotEquals(double16, double12, 0.01);
      assertNotEquals(double16, double13, 0.01);
      assertNotEquals(double16, double10, 0.01);
      assertEquals(double16, double9, 0.01);
      assertNotEquals(double16, double6, 0.01);
      assertNotEquals(double16, double14, 0.01);
      assertNotEquals(double16, double0, 0.01);
      assertNotEquals(double16, double5, 0.01);
      assertNotEquals(double16, double2, 0.01);
      assertNotEquals(double16, double7, 0.01);
      assertNotEquals(double16, double4, 0.01);
      assertNotEquals(double16, double3, 0.01);
      assertEquals(4.9E-324, double16, 0.01);
      
      double double17 = FastMath.IEEEremainder(Double.NaN, 376L);
      assertNotEquals(double17, double5, 0.01);
      assertEquals(double17, double14, 0.01);
      assertNotEquals(double17, double9, 0.01);
      assertNotEquals(double17, double12, 0.01);
      assertEquals(double17, double11, 0.01);
      assertEquals(double17, double0, 0.01);
      assertNotEquals(double17, double15, 0.01);
      assertEquals(double17, double13, 0.01);
      assertEquals(double17, double4, 0.01);
      assertEquals(double17, double6, 0.01);
      assertEquals(double17, double3, 0.01);
      assertEquals(double17, double1, 0.01);
      assertNotEquals(double17, double10, 0.01);
      assertEquals(double17, double7, 0.01);
      assertEquals(double17, double2, 0.01);
      assertEquals(double17, double8, 0.01);
      assertNotEquals(double17, double16, 0.01);
      assertEquals(Double.NaN, double17, 0.01);
      
      double double18 = FastMath.toDegrees(Double.NaN);
      assertNotEquals(double18, double12, 0.01);
      assertEquals(double18, double14, 0.01);
      assertEquals(double18, double0, 0.01);
      assertNotEquals(double18, double5, 0.01);
      assertEquals(double18, double8, 0.01);
      assertEquals(double18, double3, 0.01);
      assertEquals(double18, double2, 0.01);
      assertEquals(double18, double7, 0.01);
      assertEquals(double18, double4, 0.01);
      assertNotEquals(double18, double9, 0.01);
      assertEquals(double18, double1, 0.01);
      assertNotEquals(double18, double16, 0.01);
      assertNotEquals(double18, double10, 0.01);
      assertNotEquals(double18, double15, 0.01);
      assertEquals(double18, double17, 0.01);
      assertEquals(double18, double6, 0.01);
      assertEquals(double18, double11, 0.01);
      assertEquals(double18, double13, 0.01);
      assertEquals(Double.NaN, double18, 0.01);
      
      int int0 = FastMath.min(1093, 3192);
      assertEquals(1093, int0);
      
      double double19 = FastMath.IEEEremainder(0.0, 2.4939635093999683E-8);
      assertNotEquals(double19, double0, 0.01);
      assertEquals(double19, double9, 0.01);
      assertNotEquals(double19, double18, 0.01);
      assertNotEquals(double19, double2, 0.01);
      assertNotEquals(double19, double4, 0.01);
      assertNotEquals(double19, double6, 0.01);
      assertNotEquals(double19, double5, 0.01);
      assertNotEquals(double19, double14, 0.01);
      assertNotEquals(double19, double3, 0.01);
      assertNotEquals(double19, double7, 0.01);
      assertNotEquals(double19, double8, 0.01);
      assertNotEquals(double19, double12, 0.01);
      assertNotEquals(double19, double11, 0.01);
      assertNotEquals(double19, double1, 0.01);
      assertEquals(double19, double16, 0.01);
      assertNotEquals(double19, double13, 0.01);
      assertNotEquals(double19, double10, 0.01);
      assertNotEquals(double19, double17, 0.01);
      assertEquals(double19, double15, 0.01);
      assertEquals(0.0, double19, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = FastMath.hypot(5.321990399912051E-172, 0.0);
      assertEquals(5.321990399912051E-172, double0, 0.01);
      
      double double1 = FastMath.tanh(5.321990399912051E-172);
      assertEquals(double1, double0, 0.01);
      assertEquals(5.321990399912051E-172, double1, 0.01);
      
      double double2 = FastMath.nextUp(2042.45843);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(2042.4584300000001, double2, 0.01);
      
      float float0 = FastMath.abs(0.0F);
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = FastMath.copySign(0.0F, 0.0F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      long long0 = FastMath.round((-1027.9056094));
      assertEquals((-1028L), long0);
      
      double double3 = FastMath.min((double) 0.0F, (-421.49));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals((-421.49), double3, 0.01);
      
      long long1 = FastMath.min(0L, (-372L));
      assertFalse(long1 == long0);
      assertEquals((-372L), long1);
      
      float float2 = FastMath.nextAfter(Float.NEGATIVE_INFINITY, (double) 0.0F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-3.4028235E38F), float2, 0.01F);
      
      double double4 = FastMath.atanh(1.2840254306793213);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      
      int int0 = FastMath.round(0.0F);
      assertEquals(0, int0);
      
      double double5 = FastMath.min(57.2957763671875, (double) 0.0F);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = FastMath.nextAfter((double) 0.0F, (-421.49));
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals((-4.9E-324), double6, 0.01);
      
      float float3 = FastMath.min((-1.0F), 0.0F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals((-1.0F), float3, 0.01F);
      
      double double7 = FastMath.hypot(0.0F, (-3.4028235E38F));
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(3.4028234663852886E38, double7, 0.01);
      
      double double8 = FastMath.max(2.5066452026367188, 302.7155875576907);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(302.7155875576907, double8, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = FastMath.exp((-5.7618793749770706E-8));
      assertEquals(0.9999999423812079, double0, 0.01);
      
      double double1 = FastMath.cos((-5.7618793749770706E-8));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.9999999999999983, double1, 0.01);
      
      int int0 = FastMath.abs(1219);
      assertEquals(1219, int0);
      
      double double2 = FastMath.toDegrees(0.9999999999999983);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(57.29577951308222, double2, 0.01);
      
      double double3 = FastMath.cosh(0.0);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(1.0, double3, 0.01);
      
      int int1 = FastMath.round((float) 1219);
      assertTrue(int1 == int0);
      assertEquals(1219, int1);
      
      double double4 = FastMath.expm1((-5.7618793749770706E-8));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals((-5.761879208980804E-8), double4, 0.01);
      
      double double5 = FastMath.toRadians((-5.761879208980804E-8));
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals((-1.0056376329892147E-9), double5, 0.01);
      
      float float0 = FastMath.scalb((-1.0F), 0);
      assertEquals((-1.0F), float0, 0.01F);
      
      double double6 = FastMath.copySign((-5.761879208980804E-8), 2.092571258544922);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(5.761879208980804E-8, double6, 0.01);
      
      double double7 = FastMath.log((-5.761879208980804E-8));
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      double double8 = FastMath.exp(2955.772666627707);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double8, 0.01);
      
      float float1 = FastMath.nextAfter((float) 1219, 0.9999999999999983);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1218.9999F, float1, 0.01F);
      
      double double9 = FastMath.atan2(2734.0, (-1.0F));
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(1.5711620912262811, double9, 0.01);
      
      double double10 = FastMath.hypot((-5.7618793749770706E-8), 57.29577951308222);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertEquals(double10, double2, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals(57.29577951308222, double10, 0.01);
      
      double double11 = FastMath.tan(0.0);
      assertEquals(double11, double6, 0.01);
      assertEquals(double11, double4, 0.01);
      assertEquals(double11, double5, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertEquals(0.0, double11, 0.01);
      
      double double12 = FastMath.log10(2.4368339445199057E-8);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertEquals((-7.6131740643465875), double12, 0.01);
      
      double double13 = FastMath.exp(49.19596482208);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertEquals(2.3202567999937307E21, double13, 0.01);
      
      double double14 = FastMath.pow(1085.003295, (double) 1219);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double5, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertNotEquals(double14, double10, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertEquals(double14, double8, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double14, 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = FastMath.pow(1757.6791688050553, 1757.6791688050553);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      double double1 = FastMath.cosh(1757.6791688050553);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      double double2 = FastMath.atan2(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.7853981633974483, double2, 0.01);
      
      double double3 = FastMath.exp(1757.6791688050553);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01);
      
      double double4 = FastMath.rint(Double.POSITIVE_INFINITY);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01);
      
      double double5 = FastMath.atanh(5.515817703577808E-8);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(5.515817703577814E-8, double5, 0.01);
      
      double double6 = FastMath.cos(5.515817703577814E-8);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(0.9999999999999984, double6, 0.01);
      
      double double7 = FastMath.sinh(5.515817703577808E-8);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(5.5158177035778106E-8, double7, 0.01);
      
      double double8 = FastMath.ceil((-1.5140150088220166E-8));
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(double8, double7, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(-0.0, double8, 0.01);
      
      double double9 = FastMath.cosh(5.515817703577814E-8);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(double9, double6, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertEquals(1.0000000000000016, double9, 0.01);
      
      double double10 = FastMath.pow(Double.POSITIVE_INFINITY, (-2708));
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertEquals(double10, double8, 0.01);
      assertEquals(double10, double5, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertEquals(double10, double7, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals(0.0, double10, 0.01);
      
      double double11 = FastMath.nextAfter(4.877860620031438E147, 1893.3);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertEquals(4.877860620031437E147, double11, 0.01);
      
      double double12 = FastMath.cbrt((-5.4565574740789256));
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertEquals((-1.7605143849967135), double12, 0.01);
      
      double double13 = FastMath.nextAfter(14.18219700759335, 14.18219700759335);
      assertNotEquals(double13, double3, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double9, 0.01);
      assertNotEquals(double13, double4, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertEquals(14.18219700759335, double13, 0.01);
      
      double double14 = FastMath.random();
      assertNotEquals(double14, double13, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertNotEquals(double14, double4, 0.01);
      assertEquals(double14, double5, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertEquals(double14, double10, 0.01);
      assertEquals(double14, double8, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double1, 0.01);
      assertEquals(double14, double7, 0.01);
      assertEquals(0.0, double14, 0.01);
      
      double double15 = FastMath.cosh((-1928.2839134));
      assertNotEquals(double15, double14, 0.01);
      assertNotEquals(double15, double9, 0.01);
      assertNotEquals(double15, double6, 0.01);
      assertNotEquals(double15, double13, 0.01);
      assertEquals(double15, double0, 0.01);
      assertNotEquals(double15, double5, 0.01);
      assertEquals(double15, double1, 0.01);
      assertNotEquals(double15, double10, 0.01);
      assertNotEquals(double15, double11, 0.01);
      assertNotEquals(double15, double8, 0.01);
      assertNotEquals(double15, double12, 0.01);
      assertEquals(double15, double3, 0.01);
      assertEquals(double15, double4, 0.01);
      assertNotEquals(double15, double2, 0.01);
      assertNotEquals(double15, double7, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double15, 0.01);
      
      double double16 = FastMath.cos(0.0);
      assertNotEquals(double16, double0, 0.01);
      assertNotEquals(double16, double4, 0.01);
      assertNotEquals(double16, double14, 0.01);
      assertNotEquals(double16, double5, 0.01);
      assertEquals(double16, double6, 0.01);
      assertNotEquals(double16, double12, 0.01);
      assertNotEquals(double16, double8, 0.01);
      assertNotEquals(double16, double1, 0.01);
      assertNotEquals(double16, double10, 0.01);
      assertNotEquals(double16, double11, 0.01);
      assertNotEquals(double16, double3, 0.01);
      assertNotEquals(double16, double15, 0.01);
      assertNotEquals(double16, double7, 0.01);
      assertEquals(double16, double9, 0.01);
      assertNotEquals(double16, double13, 0.01);
      assertNotEquals(double16, double2, 0.01);
      assertEquals(1.0, double16, 0.01);
      
      double double17 = FastMath.tan(5.5158177035778106E-8);
      assertNotEquals(double17, double2, 0.01);
      assertNotEquals(double17, double16, 0.01);
      assertNotEquals(double17, double11, 0.01);
      assertNotEquals(double17, double12, 0.01);
      assertNotEquals(double17, double3, 0.01);
      assertNotEquals(double17, double1, 0.01);
      assertEquals(double17, double8, 0.01);
      assertNotEquals(double17, double15, 0.01);
      assertNotEquals(double17, double13, 0.01);
      assertNotEquals(double17, double4, 0.01);
      assertNotEquals(double17, double0, 0.01);
      assertNotEquals(double17, double9, 0.01);
      assertEquals(double17, double5, 0.01);
      assertEquals(double17, double14, 0.01);
      assertEquals(double17, double10, 0.01);
      assertEquals(double17, double7, 0.01);
      assertNotEquals(double17, double6, 0.01);
      assertEquals(5.515817703577816E-8, double17, 0.01);
      
      float float0 = FastMath.scalb(736.138F, (-2708));
      assertEquals(0.0F, float0, 0.01F);
      
      double double18 = FastMath.pow(1757.6791688050553, (-5.4565574740789256));
      assertNotEquals(double18, double2, 0.01);
      assertNotEquals(double18, double11, 0.01);
      assertNotEquals(double18, double1, 0.01);
      assertEquals(double18, double7, 0.01);
      assertNotEquals(double18, double3, 0.01);
      assertNotEquals(double18, double13, 0.01);
      assertEquals(double18, double8, 0.01);
      assertNotEquals(double18, double15, 0.01);
      assertNotEquals(double18, double0, 0.01);
      assertNotEquals(double18, double9, 0.01);
      assertEquals(double18, double5, 0.01);
      assertNotEquals(double18, double4, 0.01);
      assertNotEquals(double18, double6, 0.01);
      assertEquals(double18, double17, 0.01);
      assertEquals(double18, double10, 0.01);
      assertNotEquals(double18, double12, 0.01);
      assertNotEquals(double18, double16, 0.01);
      assertEquals(double18, double14, 0.01);
      assertEquals(1.9669827060817233E-18, double18, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float float0 = FastMath.ulp(Float.NEGATIVE_INFINITY);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      double double0 = FastMath.ceil(Float.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      
      float float1 = FastMath.nextUp(Float.POSITIVE_INFINITY);
      assertEquals(float1, float0, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      
      double double1 = FastMath.cbrt(1.0267509648109748E-7);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0046826141506092775, double1, 0.01);
      
      double double2 = FastMath.sqrt(Float.POSITIVE_INFINITY);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      
      double double3 = FastMath.max(Double.NEGATIVE_INFINITY, (double) Float.POSITIVE_INFINITY);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01);
      
      double double4 = FastMath.sinh(9184.05372263562);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01);
      
      double double5 = FastMath.cos(Double.POSITIVE_INFINITY);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      
      double double6 = FastMath.log(0.0046826141506092775);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals((-5.363898745809851), double6, 0.01);
      
      double double7 = FastMath.tan(Double.NEGATIVE_INFINITY);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      
      double double8 = FastMath.ceil(0.0046826141506092775);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(1.0, double8, 0.01);
      
      float float2 = FastMath.ulp(Float.POSITIVE_INFINITY);
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, float2, 0.01F);
      
      long long0 = FastMath.abs(4607182418800017408L);
      assertEquals(4607182418800017408L, long0);
      
      double double9 = FastMath.ulp(1.0267509648109748E-7);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(double9, double1, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(1.3234889800848443E-23, double9, 0.01);
      
      float float3 = FastMath.scalb(0.99999994F, 1464);
      assertEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals(float3, float0, 0.01F);
      assertEquals(Float.POSITIVE_INFINITY, float3, 0.01F);
      
      long long1 = FastMath.abs(4607182418800017408L);
      assertTrue(long1 == long0);
      assertEquals(4607182418800017408L, long1);
      
      float float4 = FastMath.max((-744.0F), (float) 4607182418800017408L);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertEquals(4.60718242E18F, float4, 0.01F);
      
      float float5 = FastMath.nextAfter((-744.0F), 3106.8);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float0, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertEquals((-743.99994F), float5, 0.01F);
      
      double double10 = FastMath.sinh(29.68156040746352);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals(3.886045699705579E12, double10, 0.01);
      
      double double11 = FastMath.hypot(4.503599627370496E15, 3.886045699705579E12);
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertEquals(4.503601303956962E15, double11, 0.01);
      
      double double12 = FastMath.abs((double) 4607182418800017408L);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertNotEquals(double12, double9, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double3, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double4, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertEquals(4.6071824188000174E18, double12, 0.01);
      
      double double13 = FastMath.pow(Double.NEGATIVE_INFINITY, 562.24252993052);
      assertNotEquals(double13, double9, 0.01);
      assertEquals(double13, double2, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertEquals(double13, double3, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double12, 0.01);
      assertEquals(double13, double4, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double13, 0.01);
      
      Random.setNextRandom(1464);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FastMath.exp(20.0);
      FastMath.max(-0.0F, -0.0F);
      float float0 = FastMath.scalb(-0.0F, (-3));
      assertEquals(-0.0F, float0, 0.01F);
      
      double double0 = FastMath.cosh(-0.0F);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = FastMath.tan((-1149.4438520749));
      assertEquals(0.3983221738625264, double1, 0.01);
      
      FastMath.min(1623.06F, (-1573.5013F));
      FastMath.min((double) (-3), 1.625);
      FastMath.ulp((-4006.46F));
      double double2 = FastMath.ulp((-4.3991443996021166E113));
      assertEquals(6.835158514946912E97, double2, 0.01);
      
      FastMath.random();
      FastMath.min((-3.8146973E-6F), (-2955.216F));
      float float1 = FastMath.nextAfter(0.0F, (double) (-1573.5013F));
      assertEquals((-1.4E-45F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FastMath.floor(3.4893601256685762E283);
      FastMath.exp(3.7072473866919033E-183);
      FastMath.sqrt(3.7072473866919033E-183);
      FastMath.abs(3.7072473866919033E-183);
      float float0 = FastMath.nextUp(1623.06F);
      assertEquals(1623.0602F, float0, 0.01F);
      
      double double0 = FastMath.sin(1623.06F);
      assertEquals(0.9100245640753561, double0, 0.01);
      
      float float1 = FastMath.min((-2933.0F), 1623.0602F);
      assertEquals((-2933.0F), float1, 0.01F);
      
      FastMath.abs(2477);
      FastMath.asin(2477);
      double double1 = FastMath.acosh(2477);
      assertEquals(8.50795056930302, double1, 0.01);
      
      double double2 = FastMath.atan2((-509.646871), 3.7072473866919033E-183);
      assertEquals((-1.5707963267948966), double2, 0.01);
      
      FastMath.atanh(8.50795056930302);
      double double3 = FastMath.sinh((-2933.0F));
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01);
      
      double double4 = FastMath.nextAfter((-1469.74617605737), 1030.05);
      assertEquals((-1469.7461760573697), double4, 0.01);
      
      FastMath.atanh(3.7072473866919033E-183);
      FastMath.acos(Double.NaN);
      double double5 = FastMath.log1p(0.9100245640753561);
      assertEquals(0.6471161027482772, double5, 0.01);
      
      double double6 = FastMath.cos(3.965171513035854E23);
      assertEquals((-0.6518476985002287), double6, 0.01);
      
      double double7 = FastMath.tan((-1.5707963267948966));
      assertEquals((-1.633123935319537E16), double7, 0.01);
      
      double double8 = FastMath.cbrt(3.7072473866919033E-183);
      assertEquals(1.5476895701595637E-61, double8, 0.01);
      
      double double9 = FastMath.floor(3.7072473866919033E-183);
      assertEquals(0.0, double9, 0.01);
  }

    @Test(timeout = 4000)
    public void test131()  throws Throwable {
      double double0 = FastMath.pow(-3.0, 4503599627370497.0); // (-3)^(TWO_POWER_52+1) = (-3)^2 + (-3)^(TWO_POWER_52-1)
      double double1 = FastMath.pow(-3.0, 4503599627370495.0); // (-3)^(TWO_POWER_52-1)
      assertEquals(double1 * 9, double0, 0.01);
    }
}
